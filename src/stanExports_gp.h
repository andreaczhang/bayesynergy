// Generated by rstantools.  Do not edit by hand.

/*
    BayesIntComp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesIntComp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesIntComp.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_gp_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'gp', line 43, column 4 to column 47)",
                                                      " (in 'gp', line 44, column 4 to column 47)",
                                                      " (in 'gp', line 45, column 4 to column 16)",
                                                      " (in 'gp', line 46, column 4 to column 16)",
                                                      " (in 'gp', line 47, column 4 to column 26)",
                                                      " (in 'gp', line 48, column 4 to column 26)",
                                                      " (in 'gp', line 51, column 4 to column 21)",
                                                      " (in 'gp', line 52, column 4 to column 21)",
                                                      " (in 'gp', line 55, column 4 to column 22)",
                                                      " (in 'gp', line 56, column 4 to column 26)",
                                                      " (in 'gp', line 57, column 4 to column 43)",
                                                      " (in 'gp', line 58, column 4 to column 20)",
                                                      " (in 'gp', line 62, column 4 to column 21)",
                                                      " (in 'gp', line 63, column 4 to column 28)",
                                                      " (in 'gp', line 64, column 4 to column 28)",
                                                      " (in 'gp', line 67, column 4 to column 39)",
                                                      " (in 'gp', line 68, column 4 to column 41)",
                                                      " (in 'gp', line 69, column 4 to column 37)",
                                                      " (in 'gp', line 70, column 4 to column 42)",
                                                      " (in 'gp', line 74, column 8 to column 24)",
                                                      " (in 'gp', line 75, column 8 to column 24)",
                                                      " (in 'gp', line 77, column 15 to column 17)",
                                                      " (in 'gp', line 77, column 18 to column 20)",
                                                      " (in 'gp', line 77, column 8 to column 24)",
                                                      " (in 'gp', line 78, column 15 to column 17)",
                                                      " (in 'gp', line 78, column 18 to column 20)",
                                                      " (in 'gp', line 78, column 8 to column 25)",
                                                      " (in 'gp', line 81, column 16 to column 21)",
                                                      " (in 'gp', line 81, column 24 to column 29)",
                                                      " (in 'gp', line 81, column 8 to column 36)",
                                                      " (in 'gp', line 82, column 16 to column 21)",
                                                      " (in 'gp', line 82, column 24 to column 29)",
                                                      " (in 'gp', line 82, column 8 to column 38)",
                                                      " (in 'gp', line 102, column 10 to column 130)",
                                                      " (in 'gp', line 101, column 27 to line 103, column 9)",
                                                      " (in 'gp', line 101, column 13 to line 103, column 9)",
                                                      " (in 'gp', line 87, column 18 to column 23)",
                                                      " (in 'gp', line 87, column 26 to column 31)",
                                                      " (in 'gp', line 87, column 10 to column 39)",
                                                      " (in 'gp', line 97, column 12 to column 81)",
                                                      " (in 'gp', line 98, column 12 to column 105)",
                                                      " (in 'gp', line 96, column 32 to line 99, column 11)",
                                                      " (in 'gp', line 96, column 15 to line 99, column 11)",
                                                      " (in 'gp', line 93, column 12 to column 46)",
                                                      " (in 'gp', line 94, column 12 to column 105)",
                                                      " (in 'gp', line 92, column 32 to line 95, column 11)",
                                                      " (in 'gp', line 92, column 15 to line 99, column 11)",
                                                      " (in 'gp', line 89, column 12 to column 49)",
                                                      " (in 'gp', line 90, column 12 to column 97)",
                                                      " (in 'gp', line 88, column 27 to line 91, column 11)",
                                                      " (in 'gp', line 88, column 10 to line 99, column 11)",
                                                      " (in 'gp', line 86, column 27 to line 100, column 9)",
                                                      " (in 'gp', line 86, column 13 to line 103, column 9)",
                                                      " (in 'gp', line 84, column 10 to column 102)",
                                                      " (in 'gp', line 83, column 22 to line 85, column 9)",
                                                      " (in 'gp', line 83, column 8 to line 103, column 9)",
                                                      " (in 'gp', line 104, column 8 to column 40)",
                                                      " (in 'gp', line 105, column 8 to column 38)",
                                                      " (in 'gp', line 111, column 10 to column 25)",
                                                      " (in 'gp', line 112, column 10 to column 25)",
                                                      " (in 'gp', line 110, column 15 to line 113, column 9)",
                                                      " (in 'gp', line 108, column 10 to column 31)",
                                                      " (in 'gp', line 109, column 10 to column 31)",
                                                      " (in 'gp', line 107, column 19 to line 110, column 9)",
                                                      " (in 'gp', line 107, column 8 to line 113, column 9)",
                                                      " (in 'gp', line 117, column 10 to column 79)",
                                                      " (in 'gp', line 119, column 12 to column 81)",
                                                      " (in 'gp', line 120, column 12 to column 36)",
                                                      " (in 'gp', line 121, column 12 to column 29)",
                                                      " (in 'gp', line 122, column 12 to column 135)",
                                                      " (in 'gp', line 118, column 25 to line 123, column 11)",
                                                      " (in 'gp', line 118, column 10 to line 123, column 11)",
                                                      " (in 'gp', line 116, column 23 to line 124, column 9)",
                                                      " (in 'gp', line 116, column 8 to line 124, column 9)",
                                                      " (in 'gp', line 73, column 6 to line 125, column 7)",
                                                      " (in 'gp', line 165, column 4 to column 36)",
                                                      " (in 'gp', line 166, column 4 to column 19)",
                                                      " (in 'gp', line 167, column 4 to column 19)",
                                                      " (in 'gp', line 168, column 4 to column 20)",
                                                      " (in 'gp', line 169, column 4 to column 24)",
                                                      " (in 'gp', line 170, column 4 to column 22)",
                                                      " (in 'gp', line 171, column 4 to column 22)",
                                                      " (in 'gp', line 173, column 13 to column 17)",
                                                      " (in 'gp', line 173, column 18 to column 22)",
                                                      " (in 'gp', line 173, column 6 to column 26)",
                                                      " (in 'gp', line 174, column 13 to column 15)",
                                                      " (in 'gp', line 174, column 16 to column 18)",
                                                      " (in 'gp', line 174, column 6 to column 31)",
                                                      " (in 'gp', line 175, column 6 to column 22)",
                                                      " (in 'gp', line 176, column 6 to column 22)",
                                                      " (in 'gp', line 177, column 6 to column 22)",
                                                      " (in 'gp', line 178, column 6 to column 15)",
                                                      " (in 'gp', line 179, column 6 to column 25)",
                                                      " (in 'gp', line 180, column 6 to column 15)",
                                                      " (in 'gp', line 181, column 6 to column 25)",
                                                      " (in 'gp', line 182, column 13 to column 15)",
                                                      " (in 'gp', line 182, column 6 to column 24)",
                                                      " (in 'gp', line 183, column 13 to column 15)",
                                                      " (in 'gp', line 183, column 6 to column 25)",
                                                      " (in 'gp', line 184, column 13 to column 15)",
                                                      " (in 'gp', line 184, column 6 to column 23)",
                                                      " (in 'gp', line 185, column 13 to column 15)",
                                                      " (in 'gp', line 185, column 6 to column 23)",
                                                      " (in 'gp', line 187, column 6 to column 17)",
                                                      " (in 'gp', line 188, column 6 to column 26)",
                                                      " (in 'gp', line 189, column 6 to column 26)",
                                                      " (in 'gp', line 190, column 6 to column 40)",
                                                      " (in 'gp', line 191, column 6 to column 47)",
                                                      " (in 'gp', line 193, column 8 to column 76)",
                                                      " (in 'gp', line 192, column 20 to line 194, column 7)",
                                                      " (in 'gp', line 192, column 6 to line 194, column 7)",
                                                      " (in 'gp', line 200, column 10 to column 25)",
                                                      " (in 'gp', line 201, column 10 to column 25)",
                                                      " (in 'gp', line 199, column 15 to line 202, column 9)",
                                                      " (in 'gp', line 197, column 10 to column 31)",
                                                      " (in 'gp', line 198, column 10 to column 31)",
                                                      " (in 'gp', line 196, column 17 to line 199, column 9)",
                                                      " (in 'gp', line 196, column 6 to line 202, column 9)",
                                                      " (in 'gp', line 210, column 14 to column 47)",
                                                      " (in 'gp', line 210, column 13 to column 48)",
                                                      " (in 'gp', line 205, column 8 to column 82)",
                                                      " (in 'gp', line 209, column 16 to column 49)",
                                                      " (in 'gp', line 209, column 15 to column 50)",
                                                      " (in 'gp', line 207, column 10 to column 125)",
                                                      " (in 'gp', line 208, column 10 to column 56)",
                                                      " (in 'gp', line 206, column 26 to line 209, column 9)",
                                                      " (in 'gp', line 206, column 8 to line 209, column 50)",
                                                      " (in 'gp', line 204, column 35 to line 210, column 7)",
                                                      " (in 'gp', line 204, column 6 to line 210, column 48)",
                                                      " (in 'gp', line 217, column 14 to column 47)",
                                                      " (in 'gp', line 217, column 13 to column 48)",
                                                      " (in 'gp', line 212, column 8 to column 82)",
                                                      " (in 'gp', line 216, column 16 to column 49)",
                                                      " (in 'gp', line 216, column 15 to column 50)",
                                                      " (in 'gp', line 214, column 10 to column 125)",
                                                      " (in 'gp', line 215, column 10 to column 56)",
                                                      " (in 'gp', line 213, column 26 to line 216, column 9)",
                                                      " (in 'gp', line 213, column 8 to line 216, column 50)",
                                                      " (in 'gp', line 211, column 35 to line 217, column 7)",
                                                      " (in 'gp', line 211, column 6 to line 217, column 48)",
                                                      " (in 'gp', line 221, column 9 to column 25)",
                                                      " (in 'gp', line 222, column 9 to column 26)",
                                                      " (in 'gp', line 223, column 9 to column 24)",
                                                      " (in 'gp', line 224, column 9 to column 24)",
                                                      " (in 'gp', line 226, column 11 to column 79)",
                                                      " (in 'gp', line 227, column 11 to column 82)",
                                                      " (in 'gp', line 228, column 11 to column 96)",
                                                      " (in 'gp', line 229, column 11 to column 96)",
                                                      " (in 'gp', line 225, column 24 to line 230, column 10)",
                                                      " (in 'gp', line 225, column 9 to line 230, column 10)",
                                                      " (in 'gp', line 231, column 9 to column 28)",
                                                      " (in 'gp', line 232, column 9 to column 30)",
                                                      " (in 'gp', line 233, column 9 to column 26)",
                                                      " (in 'gp', line 234, column 9 to column 26)",
                                                      " (in 'gp', line 236, column 11 to column 69)",
                                                      " (in 'gp', line 237, column 11 to column 75)",
                                                      " (in 'gp', line 238, column 11 to column 69)",
                                                      " (in 'gp', line 239, column 11 to column 69)",
                                                      " (in 'gp', line 235, column 19 to line 240, column 10)",
                                                      " (in 'gp', line 235, column 9 to line 240, column 10)",
                                                      " (in 'gp', line 220, column 22 to line 241, column 8)",
                                                      " (in 'gp', line 220, column 7 to line 241, column 8)",
                                                      " (in 'gp', line 243, column 7 to column 69)",
                                                      " (in 'gp', line 244, column 7 to column 103)",
                                                      " (in 'gp', line 245, column 7 to column 83)",
                                                      " (in 'gp', line 246, column 7 to column 85)",
                                                      " (in 'gp', line 172, column 4 to line 247, column 5)",
                                                      " (in 'gp', line 129, column 11 to column 15)",
                                                      " (in 'gp', line 129, column 16 to column 20)",
                                                      " (in 'gp', line 129, column 4 to column 24)",
                                                      " (in 'gp', line 130, column 4 to column 15)",
                                                      " (in 'gp', line 131, column 4 to column 24)",
                                                      " (in 'gp', line 132, column 4 to column 24)",
                                                      " (in 'gp', line 133, column 4 to column 38)",
                                                      " (in 'gp', line 136, column 4 to column 26)",
                                                      " (in 'gp', line 137, column 4 to column 31)",
                                                      " (in 'gp', line 138, column 4 to column 31)",
                                                      " (in 'gp', line 141, column 4 to column 23)",
                                                      " (in 'gp', line 142, column 4 to column 23)",
                                                      " (in 'gp', line 143, column 4 to column 25)",
                                                      " (in 'gp', line 144, column 4 to column 25)",
                                                      " (in 'gp', line 145, column 4 to column 39)",
                                                      " (in 'gp', line 146, column 4 to column 39)",
                                                      " (in 'gp', line 149, column 4 to column 20)",
                                                      " (in 'gp', line 150, column 4 to column 20)",
                                                      " (in 'gp', line 153, column 4 to column 21)",
                                                      " (in 'gp', line 154, column 4 to column 29)",
                                                      " (in 'gp', line 156, column 6 to column 25)",
                                                      " (in 'gp', line 155, column 18 to line 157, column 5)",
                                                      " (in 'gp', line 155, column 4 to line 157, column 5)",
                                                      " (in 'gp', line 158, column 4 to column 21)",
                                                      " (in 'gp', line 161, column 4 to column 46)",
                                                      " (in 'gp', line 4, column 2 to column 18)",
                                                      " (in 'gp', line 5, column 2 to column 18)",
                                                      " (in 'gp', line 6, column 2 to column 24)",
                                                      " (in 'gp', line 7, column 2 to column 20)",
                                                      " (in 'gp', line 8, column 9 to column 38)",
                                                      " (in 'gp', line 8, column 2 to column 42)",
                                                      " (in 'gp', line 9, column 13 to column 42)",
                                                      " (in 'gp', line 9, column 2 to column 44)",
                                                      " (in 'gp', line 10, column 10 to column 12)",
                                                      " (in 'gp', line 10, column 2 to column 14)",
                                                      " (in 'gp', line 11, column 10 to column 12)",
                                                      " (in 'gp', line 11, column 2 to column 14)",
                                                      " (in 'gp', line 12, column 2 to column 13)",
                                                      " (in 'gp', line 13, column 2 to column 13)",
                                                      " (in 'gp', line 14, column 2 to column 16)",
                                                      " (in 'gp', line 15, column 2 to column 16)",
                                                      " (in 'gp', line 18, column 2 to column 40)",
                                                      " (in 'gp', line 19, column 9 to column 14)",
                                                      " (in 'gp', line 19, column 15 to column 20)",
                                                      " (in 'gp', line 19, column 2 to column 28)",
                                                      " (in 'gp', line 20, column 9 to column 14)",
                                                      " (in 'gp', line 20, column 15 to column 20)",
                                                      " (in 'gp', line 20, column 2 to column 36)",
                                                      " (in 'gp', line 22, column 9 to column 14)",
                                                      " (in 'gp', line 22, column 2 to column 20)",
                                                      " (in 'gp', line 23, column 2 to column 12)",
                                                      " (in 'gp', line 26, column 6 to column 21)",
                                                      " (in 'gp', line 27, column 6 to column 21)",
                                                      " (in 'gp', line 28, column 6 to column 13)",
                                                      " (in 'gp', line 25, column 19 to line 29, column 5)",
                                                      " (in 'gp', line 25, column 4 to line 29, column 5)",
                                                      " (in 'gp', line 24, column 17 to line 30, column 3)",
                                                      " (in 'gp', line 24, column 2 to line 30, column 3)",
                                                      " (in 'gp', line 34, column 6 to column 41)",
                                                      " (in 'gp', line 35, column 6 to column 30)",
                                                      " (in 'gp', line 36, column 6 to column 57)",
                                                      " (in 'gp', line 37, column 6 to column 46)",
                                                      " (in 'gp', line 33, column 24 to line 38, column 5)",
                                                      " (in 'gp', line 33, column 4 to line 38, column 5)",
                                                      " (in 'gp', line 32, column 21 to line 39, column 3)",
                                                      " (in 'gp', line 32, column 2 to line 39, column 3)",
                                                      " (in 'gp', line 43, column 31 to column 45)",
                                                      " (in 'gp', line 44, column 31 to column 45)",
                                                      " (in 'gp', line 57, column 24 to column 41)",
                                                      " (in 'gp', line 58, column 11 to column 16)",
                                                      " (in 'gp', line 67, column 29 to column 31)",
                                                      " (in 'gp', line 67, column 32 to column 34)",
                                                      " (in 'gp', line 68, column 33 to column 35)",
                                                      " (in 'gp', line 69, column 29 to column 31)",
                                                      " (in 'gp', line 70, column 29 to column 31)",
                                                      " (in 'gp', line 70, column 32 to column 34)",
                                                      " (in 'gp', line 165, column 11 to column 12)"};
#include <stan_meta_header.hpp>
class model_gp final : public model_base_crtp<model_gp> {
private:
  int n1;
  int n2;
  int nmissing;
  int nrep;
  Eigen::Matrix<double, -1, 1> y;
  std::vector<int> ii_obs;
  std::vector<double> x1;
  std::vector<double> x2;
  int est_la;
  int kernel;
  int nu_matern;
  int est_alpha;
  int N;
  Eigen::Matrix<double, -1, -1> xdist;
  Eigen::Matrix<double, -1, -1> xdist_squared;
  Eigen::Matrix<double, -1, -1> X;
  int k;
  int la_1_1dim__;
  int la_2_1dim__;
  int alpha_1dim__;
  int z_1dim__;
 
public:
  ~model_gp() { }
  
  inline std::string model_name() const final { return "model_gp"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_gp(stan::io::var_context& context__, unsigned int random_seed__ = 0,
           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_gp_namespace::model_gp";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 193;
      context__.validate_dims("data initialization","n1","int",
          context__.to_vec());
      n1 = std::numeric_limits<int>::min();
      
      current_statement__ = 193;
      n1 = context__.vals_i("n1")[(1 - 1)];
      current_statement__ = 193;
      current_statement__ = 193;
      check_greater_or_equal(function__, "n1", n1, 1);
      current_statement__ = 194;
      context__.validate_dims("data initialization","n2","int",
          context__.to_vec());
      n2 = std::numeric_limits<int>::min();
      
      current_statement__ = 194;
      n2 = context__.vals_i("n2")[(1 - 1)];
      current_statement__ = 194;
      current_statement__ = 194;
      check_greater_or_equal(function__, "n2", n2, 1);
      current_statement__ = 195;
      context__.validate_dims("data initialization","nmissing","int",
          context__.to_vec());
      nmissing = std::numeric_limits<int>::min();
      
      current_statement__ = 195;
      nmissing = context__.vals_i("nmissing")[(1 - 1)];
      current_statement__ = 195;
      current_statement__ = 195;
      check_greater_or_equal(function__, "nmissing", nmissing, 0);
      current_statement__ = 196;
      context__.validate_dims("data initialization","nrep","int",
          context__.to_vec());
      nrep = std::numeric_limits<int>::min();
      
      current_statement__ = 196;
      nrep = context__.vals_i("nrep")[(1 - 1)];
      current_statement__ = 196;
      current_statement__ = 196;
      check_greater_or_equal(function__, "nrep", nrep, 1);
      current_statement__ = 197;
      validate_non_negative_index("y",
                                  "(n1 + n2 + n1 * n2 + 1) * nrep - nmissing",
                                  (((((n1 + n2) + (n1 * n2)) + 1) * nrep) -
                                    nmissing));
      current_statement__ = 198;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(
            (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
      y = Eigen::Matrix<double, -1, 1>((((((n1 + n2) + (n1 * n2)) + 1) *
                                          nrep) - nmissing));
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 198;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 198;
        pos__ = 1;
        current_statement__ = 198;
        for (int sym1__ = 1;
             sym1__ <= (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
             ++sym1__) {
          current_statement__ = 198;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 198;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 199;
      validate_non_negative_index("ii_obs",
                                  "(n1 + n2 + n1 * n2 + 1) * nrep - nmissing",
                                  (((((n1 + n2) + (n1 * n2)) + 1) * nrep) -
                                    nmissing));
      current_statement__ = 200;
      context__.validate_dims("data initialization","ii_obs","int",
          context__.to_vec(
            (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
      ii_obs = std::vector<int>((((((n1 + n2) + (n1 * n2)) + 1) * nrep) -
                                  nmissing), std::numeric_limits<int>::min());
      
      current_statement__ = 200;
      assign(ii_obs, nil_index_list(), context__.vals_i("ii_obs"),
        "assigning variable ii_obs");
      current_statement__ = 201;
      validate_non_negative_index("x1", "n1", n1);
      current_statement__ = 202;
      context__.validate_dims("data initialization","x1","double",
          context__.to_vec(n1));
      x1 = std::vector<double>(n1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 202;
      assign(x1, nil_index_list(), context__.vals_r("x1"),
        "assigning variable x1");
      current_statement__ = 203;
      validate_non_negative_index("x2", "n2", n2);
      current_statement__ = 204;
      context__.validate_dims("data initialization","x2","double",
          context__.to_vec(n2));
      x2 = std::vector<double>(n2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 204;
      assign(x2, nil_index_list(), context__.vals_r("x2"),
        "assigning variable x2");
      current_statement__ = 205;
      context__.validate_dims("data initialization","est_la","int",
          context__.to_vec());
      est_la = std::numeric_limits<int>::min();
      
      current_statement__ = 205;
      est_la = context__.vals_i("est_la")[(1 - 1)];
      current_statement__ = 206;
      context__.validate_dims("data initialization","kernel","int",
          context__.to_vec());
      kernel = std::numeric_limits<int>::min();
      
      current_statement__ = 206;
      kernel = context__.vals_i("kernel")[(1 - 1)];
      current_statement__ = 207;
      context__.validate_dims("data initialization","nu_matern","int",
          context__.to_vec());
      nu_matern = std::numeric_limits<int>::min();
      
      current_statement__ = 207;
      nu_matern = context__.vals_i("nu_matern")[(1 - 1)];
      current_statement__ = 208;
      context__.validate_dims("data initialization","est_alpha","int",
          context__.to_vec());
      est_alpha = std::numeric_limits<int>::min();
      
      current_statement__ = 208;
      est_alpha = context__.vals_i("est_alpha")[(1 - 1)];
      current_statement__ = 209;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 209;
      N = (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
      current_statement__ = 210;
      validate_non_negative_index("xdist", "n1 * n2", (n1 * n2));
      current_statement__ = 211;
      validate_non_negative_index("xdist", "n1 * n2", (n1 * n2));
      current_statement__ = 212;
      xdist = Eigen::Matrix<double, -1, -1>((n1 * n2), (n1 * n2));
      stan::math::fill(xdist, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 213;
      validate_non_negative_index("xdist_squared", "n1 * n2", (n1 * n2));
      current_statement__ = 214;
      validate_non_negative_index("xdist_squared", "n1 * n2", (n1 * n2));
      current_statement__ = 215;
      xdist_squared = Eigen::Matrix<double, -1, -1>((n1 * n2), (n1 * n2));
      stan::math::fill(xdist_squared, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 216;
      validate_non_negative_index("X", "n1 * n2", (n1 * n2));
      current_statement__ = 217;
      X = Eigen::Matrix<double, -1, -1>((n1 * n2), 2);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 218;
      k = std::numeric_limits<int>::min();
      
      current_statement__ = 218;
      k = 1;
      current_statement__ = 225;
      for (int j = 1; j <= n1; ++j) {
        current_statement__ = 223;
        for (int i = 1; i <= n2; ++i) {
          current_statement__ = 219;
          assign(X,
            cons_list(index_uni(k),
              cons_list(index_uni(1), nil_index_list())), x1[(j - 1)],
            "assigning variable X");
          current_statement__ = 220;
          assign(X,
            cons_list(index_uni(k),
              cons_list(index_uni(2), nil_index_list())), x2[(i - 1)],
            "assigning variable X");
          current_statement__ = 221;
          k = (k + 1);}}
      current_statement__ = 233;
      for (int j = 1; j <= (n1 * n2); ++j) {
        current_statement__ = 231;
        for (int i = j; i <= (n1 * n2); ++i) {
          current_statement__ = 226;
          assign(xdist,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            distance(
              rvalue(X,
                cons_list(index_uni(i),
                  cons_list(index_omni(), nil_index_list())), "X"),
              rvalue(X,
                cons_list(index_uni(j),
                  cons_list(index_omni(), nil_index_list())), "X")),
            "assigning variable xdist");
          current_statement__ = 227;
          assign(xdist,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            rvalue(xdist,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "xdist"),
            "assigning variable xdist");
          current_statement__ = 228;
          assign(xdist_squared,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            squared_distance(
              rvalue(X,
                cons_list(index_uni(i),
                  cons_list(index_omni(), nil_index_list())), "X"),
              rvalue(X,
                cons_list(index_uni(j),
                  cons_list(index_omni(), nil_index_list())), "X")),
            "assigning variable xdist_squared");
          current_statement__ = 229;
          assign(xdist_squared,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            rvalue(xdist_squared,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "xdist_squared"),
            "assigning variable xdist_squared");}}
      current_statement__ = 234;
      la_1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 234;
      la_1_1dim__ = (est_la ? 1 : 0);
      current_statement__ = 234;
      validate_non_negative_index("la_1", "est_la ? 1 : 0", la_1_1dim__);
      current_statement__ = 235;
      la_2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 235;
      la_2_1dim__ = (est_la ? 1 : 0);
      current_statement__ = 235;
      validate_non_negative_index("la_2", "est_la ? 1 : 0", la_2_1dim__);
      current_statement__ = 236;
      alpha_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 236;
      alpha_1dim__ = (est_alpha ? 1 : 0);
      current_statement__ = 236;
      validate_non_negative_index("alpha", "est_alpha ? 1 : 0", alpha_1dim__);
      current_statement__ = 237;
      z_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 237;
      z_1dim__ = (n1 * n2);
      current_statement__ = 237;
      validate_non_negative_index("z", "n1 * n2", z_1dim__);
      current_statement__ = 238;
      validate_non_negative_index("p0", "n2", n2);
      current_statement__ = 239;
      validate_non_negative_index("p0", "n1", n1);
      current_statement__ = 240;
      validate_non_negative_index("p01", "n1", n1);
      current_statement__ = 241;
      validate_non_negative_index("p02", "n2", n2);
      current_statement__ = 242;
      validate_non_negative_index("Delta", "n2", n2);
      current_statement__ = 243;
      validate_non_negative_index("Delta", "n1", n1);
      current_statement__ = 244;
      validate_non_negative_index("CPO", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += la_1_1dim__;
      num_params_r__ += la_2_1dim__;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += alpha_1dim__;
      num_params_r__ += z_1dim__;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_gp_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> la_1;
      la_1 = std::vector<local_scalar_t__>(la_1_1dim__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_1[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable la_1");
        } else {
          current_statement__ = 1;
          assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_1[(sym1__ - 1)], 0, 1),
            "assigning variable la_1");
        }}
      std::vector<local_scalar_t__> la_2;
      la_2 = std::vector<local_scalar_t__>(la_2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_2[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable la_2");
        } else {
          current_statement__ = 2;
          assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_2[(sym1__ - 1)], 0, 1),
            "assigning variable la_2");
        }}
      local_scalar_t__ ec50_1;
      ec50_1 = DUMMY_VAR__;
      
      current_statement__ = 3;
      ec50_1 = in__.scalar();
      local_scalar_t__ ec50_2;
      ec50_2 = DUMMY_VAR__;
      
      current_statement__ = 4;
      ec50_2 = in__.scalar();
      local_scalar_t__ slope_1;
      slope_1 = DUMMY_VAR__;
      
      current_statement__ = 5;
      slope_1 = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        slope_1 = stan::math::lb_constrain(slope_1, 0, lp__);
      } else {
        current_statement__ = 5;
        slope_1 = stan::math::lb_constrain(slope_1, 0);
      }
      local_scalar_t__ slope_2;
      slope_2 = DUMMY_VAR__;
      
      current_statement__ = 6;
      slope_2 = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        slope_2 = stan::math::lb_constrain(slope_2, 0, lp__);
      } else {
        current_statement__ = 6;
        slope_2 = stan::math::lb_constrain(slope_2, 0);
      }
      local_scalar_t__ b1;
      b1 = DUMMY_VAR__;
      
      current_statement__ = 7;
      b1 = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        b1 = stan::math::lb_constrain(b1, 0, lp__);
      } else {
        current_statement__ = 7;
        b1 = stan::math::lb_constrain(b1, 0);
      }
      local_scalar_t__ b2;
      b2 = DUMMY_VAR__;
      
      current_statement__ = 8;
      b2 = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        b2 = stan::math::lb_constrain(b2, 0, lp__);
      } else {
        current_statement__ = 8;
        b2 = stan::math::lb_constrain(b2, 0);
      }
      local_scalar_t__ ell;
      ell = DUMMY_VAR__;
      
      current_statement__ = 9;
      ell = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        ell = stan::math::lb_constrain(ell, 0, lp__);
      } else {
        current_statement__ = 9;
        ell = stan::math::lb_constrain(ell, 0);
      }
      local_scalar_t__ sigma_f;
      sigma_f = DUMMY_VAR__;
      
      current_statement__ = 10;
      sigma_f = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        sigma_f = stan::math::lb_constrain(sigma_f, 0, lp__);
      } else {
        current_statement__ = 10;
        sigma_f = stan::math::lb_constrain(sigma_f, 0);
      }
      std::vector<local_scalar_t__> alpha;
      alpha = std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 11;
        if (jacobian__) {
          current_statement__ = 11;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 11;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> z;
      z = Eigen::Matrix<local_scalar_t__, -1, 1>(z_1dim__);
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 12;
      z = in__.vector(z_1dim__);
      local_scalar_t__ s2;
      s2 = DUMMY_VAR__;
      
      current_statement__ = 13;
      s2 = in__.scalar();
      current_statement__ = 13;
      if (jacobian__) {
        current_statement__ = 13;
        s2 = stan::math::lb_constrain(s2, 0, lp__);
      } else {
        current_statement__ = 13;
        s2 = stan::math::lb_constrain(s2, 0);
      }
      local_scalar_t__ s2_ec50_1;
      s2_ec50_1 = DUMMY_VAR__;
      
      current_statement__ = 14;
      s2_ec50_1 = in__.scalar();
      current_statement__ = 14;
      if (jacobian__) {
        current_statement__ = 14;
        s2_ec50_1 = stan::math::lb_constrain(s2_ec50_1, 0, lp__);
      } else {
        current_statement__ = 14;
        s2_ec50_1 = stan::math::lb_constrain(s2_ec50_1, 0);
      }
      local_scalar_t__ s2_ec50_2;
      s2_ec50_2 = DUMMY_VAR__;
      
      current_statement__ = 15;
      s2_ec50_2 = in__.scalar();
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        s2_ec50_2 = stan::math::lb_constrain(s2_ec50_2, 0, lp__);
      } else {
        current_statement__ = 15;
        s2_ec50_2 = stan::math::lb_constrain(s2_ec50_2, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> p0;
      p0 = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
      stan::math::fill(p0, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> p01;
      p01 = Eigen::Matrix<local_scalar_t__, 1, -1>(n1);
      stan::math::fill(p01, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p02;
      p02 = Eigen::Matrix<local_scalar_t__, -1, 1>(n2);
      stan::math::fill(p02, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Delta;
      Delta = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
      stan::math::fill(Delta, DUMMY_VAR__);
      
      {
        local_scalar_t__ la_1_param;
        la_1_param = DUMMY_VAR__;
        
        local_scalar_t__ la_2_param;
        la_2_param = DUMMY_VAR__;
        
        current_statement__ = 22;
        validate_non_negative_index("B", "n2", n2);
        current_statement__ = 23;
        validate_non_negative_index("B", "n1", n1);
        Eigen::Matrix<local_scalar_t__, -1, -1> B;
        B = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
        stan::math::fill(B, DUMMY_VAR__);
        
        current_statement__ = 25;
        validate_non_negative_index("GP", "n2", n2);
        current_statement__ = 26;
        validate_non_negative_index("GP", "n1", n1);
        Eigen::Matrix<local_scalar_t__, -1, -1> GP;
        GP = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
        stan::math::fill(GP, DUMMY_VAR__);
        
        current_statement__ = 28;
        validate_non_negative_index("cov", "(n1 * n2)", (n1 * n2));
        current_statement__ = 29;
        validate_non_negative_index("cov", "(n1 * n2)", (n1 * n2));
        Eigen::Matrix<local_scalar_t__, -1, -1> cov;
        cov = Eigen::Matrix<local_scalar_t__, -1, -1>((n1 * n2), (n1 * n2));
        stan::math::fill(cov, DUMMY_VAR__);
        
        current_statement__ = 31;
        validate_non_negative_index("L_cov", "(n1 * n2)", (n1 * n2));
        current_statement__ = 32;
        validate_non_negative_index("L_cov", "(n1 * n2)", (n1 * n2));
        Eigen::Matrix<local_scalar_t__, -1, -1> L_cov;
        L_cov = Eigen::Matrix<local_scalar_t__, -1, -1>((n1 * n2), (n1 * n2));
        stan::math::fill(L_cov, DUMMY_VAR__);
        
        current_statement__ = 56;
        if (logical_eq(kernel, 1)) {
          current_statement__ = 54;
          assign(cov, nil_index_list(),
            add(
              multiply(sigma_f,
                stan::math::exp(
                  elt_divide(minus(xdist_squared), (2 * pow(ell, 2))))),
              diag_matrix(rep_vector(1e-10, (n1 * n2)))),
            "assigning variable cov");
        } else {
          current_statement__ = 53;
          if (logical_eq(kernel, 2)) {
            current_statement__ = 37;
            validate_non_negative_index("poly", "(n1 * n2)", (n1 * n2));
            current_statement__ = 38;
            validate_non_negative_index("poly", "(n1 * n2)", (n1 * n2));
            Eigen::Matrix<local_scalar_t__, -1, -1> poly;
            poly = Eigen::Matrix<local_scalar_t__, -1, -1>((n1 * n2), 
              (n1 * n2));
            stan::math::fill(poly, DUMMY_VAR__);
            
            current_statement__ = 51;
            if (logical_eq(nu_matern, 1)) {
              current_statement__ = 48;
              assign(poly, nil_index_list(),
                rep_matrix(1, (n1 * n2), (n1 * n2)),
                "assigning variable poly");
              current_statement__ = 49;
              assign(cov, nil_index_list(),
                add(
                  multiply(sigma_f,
                    elt_multiply(poly,
                      stan::math::exp(elt_divide(minus(xdist), ell)))),
                  diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                "assigning variable cov");
            } else {
              current_statement__ = 47;
              if (logical_eq(nu_matern, 2)) {
                current_statement__ = 44;
                assign(poly, nil_index_list(),
                  add(1,
                    multiply(stan::math::sqrt(3), elt_divide(xdist, ell))),
                  "assigning variable poly");
                current_statement__ = 45;
                assign(cov, nil_index_list(),
                  add(
                    multiply(sigma_f,
                      elt_multiply(poly,
                        stan::math::exp(
                          elt_divide(multiply(-stan::math::sqrt(3), xdist),
                            ell)))),
                    diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                  "assigning variable cov");
              } else {
                current_statement__ = 43;
                if (logical_eq(nu_matern, 3)) {
                  current_statement__ = 40;
                  assign(poly, nil_index_list(),
                    add(
                      add(1,
                        multiply(stan::math::sqrt(5), elt_divide(xdist, ell))),
                      multiply((5. / 3.),
                        elt_divide(xdist_squared, pow(ell, 2)))),
                    "assigning variable poly");
                  current_statement__ = 41;
                  assign(cov, nil_index_list(),
                    add(
                      multiply(sigma_f,
                        elt_multiply(poly,
                          stan::math::exp(
                            elt_divide(multiply(-stan::math::sqrt(5), xdist),
                              ell)))),
                      diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                    "assigning variable cov");
                } 
              }
            }
          } else {
            current_statement__ = 36;
            if (logical_eq(kernel, 3)) {
              current_statement__ = 34;
              assign(cov, nil_index_list(),
                add(
                  multiply(sigma_f,
                    stan::math::exp(
                      multiply(-alpha[(1 - 1)],
                        stan::math::log(
                          add(1,
                            elt_divide(xdist_squared,
                              ((2 * alpha[(1 - 1)]) * pow(ell, 2)))))))),
                  diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                "assigning variable cov");
            } 
          }
        }
        current_statement__ = 57;
        assign(L_cov, nil_index_list(), cholesky_decompose(cov),
          "assigning variable L_cov");
        current_statement__ = 58;
        assign(GP, nil_index_list(), to_matrix(multiply(L_cov, z), n2, n1),
          "assigning variable GP");
        current_statement__ = 65;
        if (est_la) {
          current_statement__ = 62;
          la_1_param = la_1[(1 - 1)];
          current_statement__ = 63;
          la_2_param = la_2[(1 - 1)];
        } else {
          current_statement__ = 59;
          la_1_param = 0;
          current_statement__ = 60;
          la_2_param = 0;
        }
        current_statement__ = 74;
        for (int j = 1; j <= n1; ++j) {
          current_statement__ = 66;
          assign(p01, cons_list(index_uni(j), nil_index_list()),
            (la_1_param +
              ((1 - la_1_param) /
                (1 + pow(10, (slope_1 * (x1[(j - 1)] - ec50_1)))))),
            "assigning variable p01");
          current_statement__ = 72;
          for (int i = 1; i <= n2; ++i) {
            current_statement__ = 67;
            assign(p02, cons_list(index_uni(i), nil_index_list()),
              (la_2_param +
                ((1 - la_2_param) /
                  (1 + pow(10, (slope_2 * (x2[(i - 1)] - ec50_2)))))),
              "assigning variable p02");
            current_statement__ = 68;
            assign(p0,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              (p01[(j - 1)] * p02[(i - 1)]), "assigning variable p0");
            current_statement__ = 69;
            assign(B,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              rvalue(GP,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "GP"),
              "assigning variable B");
            current_statement__ = 70;
            assign(Delta,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((-rvalue(p0,
                   cons_list(index_uni(i),
                     cons_list(index_uni(j), nil_index_list())), "p0") /
                 (1 +
                   stan::math::exp(
                     ((b1 *
                        rvalue(B,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())), "B"))
                       +
                       stan::math::log(
                         (rvalue(p0,
                            cons_list(index_uni(i),
                              cons_list(index_uni(j), nil_index_list())),
                            "p0") /
                           (1 -
                             rvalue(p0,
                               cons_list(index_uni(i),
                                 cons_list(index_uni(j), nil_index_list())),
                               "p0")))))))) +
                ((1 -
                   rvalue(p0,
                     cons_list(index_uni(i),
                       cons_list(index_uni(j), nil_index_list())), "p0")) /
                  (1 +
                    stan::math::exp(
                      ((-b2 *
                         rvalue(B,
                           cons_list(index_uni(i),
                             cons_list(index_uni(j), nil_index_list())), "B"))
                        -
                        stan::math::log(
                          (rvalue(p0,
                             cons_list(index_uni(i),
                               cons_list(index_uni(j), nil_index_list())),
                             "p0") /
                            (1 -
                              rvalue(p0,
                                cons_list(index_uni(i),
                                  cons_list(index_uni(j), nil_index_list())),
                                "p0"))))))))), "assigning variable Delta");}}
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 16;
          current_statement__ = 16;
          check_greater_or_equal(function__, "p0[sym1__, sym2__]",
                                 rvalue(p0,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "p0"), 0);}}
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 16;
          current_statement__ = 16;
          check_less_or_equal(function__, "p0[sym1__, sym2__]",
                              rvalue(p0,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "p0"), 1);}}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_greater_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)],
                               0);}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_less_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)], 1);
      }
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_greater_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)],
                               0);}
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_less_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)], 1);
      }
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 19;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 19;
          current_statement__ = 19;
          check_greater_or_equal(function__, "Delta[sym1__, sym2__]",
                                 rvalue(Delta,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "Delta"), 
                                 -1);}}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 19;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 19;
          current_statement__ = 19;
          check_less_or_equal(function__, "Delta[sym1__, sym2__]",
                              rvalue(Delta,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "Delta"), 1);}}
      {
        current_statement__ = 168;
        validate_non_negative_index("f", "n2 + 1", (n2 + 1));
        current_statement__ = 169;
        validate_non_negative_index("f", "n1 + 1", (n1 + 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> f;
        f = Eigen::Matrix<local_scalar_t__, -1, -1>((n2 + 1), (n1 + 1));
        stan::math::fill(f, DUMMY_VAR__);
        
        current_statement__ = 171;
        assign(f,
          cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
          1, "assigning variable f");
        current_statement__ = 172;
        assign(f,
          cons_list(index_uni(1),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())), p01,
          "assigning variable f");
        current_statement__ = 173;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_uni(1), nil_index_list())), p02,
          "assigning variable f");
        current_statement__ = 174;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())),
          add(p0, Delta), "assigning variable f");
        current_statement__ = 175;
        lp_accum__.add(inv_gamma_lpdf<propto__>(s2, 3, 0.5));
        current_statement__ = 176;
        lp_accum__.add(inv_gamma_lpdf<propto__>(s2_ec50_1, 3, 2));
        current_statement__ = 177;
        lp_accum__.add(inv_gamma_lpdf<propto__>(s2_ec50_2, 3, 2));
        current_statement__ = 178;
        lp_accum__.add(beta_lpdf<propto__>(la_1, .5, .5));
        current_statement__ = 179;
        lp_accum__.add(beta_lpdf<propto__>(la_2, .5, .5));
        current_statement__ = 180;
        lp_accum__.add(gamma_lpdf<propto__>(slope_1, 1, 1));
        current_statement__ = 181;
        lp_accum__.add(gamma_lpdf<propto__>(slope_2, 1, 1));
        current_statement__ = 182;
        lp_accum__.add(
          normal_lpdf<propto__>(ec50_1, 0, stan::math::sqrt(s2_ec50_1)));
        current_statement__ = 183;
        lp_accum__.add(
          normal_lpdf<propto__>(ec50_2, 0, stan::math::sqrt(s2_ec50_2)));
        current_statement__ = 184;
        lp_accum__.add(gamma_lpdf<propto__>(b1, 1, 1));
        current_statement__ = 185;
        lp_accum__.add(gamma_lpdf<propto__>(b2, 1, 1));
        current_statement__ = 186;
        lp_accum__.add(gamma_lpdf<propto__>(ell, 1, 1));
        current_statement__ = 187;
        lp_accum__.add(lognormal_lpdf<propto__>(sigma_f, 1, 1));
        current_statement__ = 190;
        if (est_alpha) {
          current_statement__ = 188;
          lp_accum__.add(gamma_lpdf<propto__>(alpha, 1, 1));
        } 
        current_statement__ = 191;
        lp_accum__.add(std_normal_lpdf<propto__>(z));
        current_statement__ = 192;
        lp_accum__.add(
          normal_lpdf<propto__>(y,
            rvalue(to_vector(f),
              cons_list(index_multi(ii_obs), nil_index_list()),
              "to_vector(f)"), stan::math::sqrt(s2)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_gp_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> la_1;
      la_1 = std::vector<double>(la_1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(la_1[(sym1__ - 1)], 0, 1),
          "assigning variable la_1");}
      std::vector<double> la_2;
      la_2 = std::vector<double>(la_2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(la_2[(sym1__ - 1)], 0, 1),
          "assigning variable la_2");}
      double ec50_1;
      ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      ec50_1 = in__.scalar();
      double ec50_2;
      ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      ec50_2 = in__.scalar();
      double slope_1;
      slope_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      slope_1 = in__.scalar();
      current_statement__ = 5;
      slope_1 = stan::math::lb_constrain(slope_1, 0);
      double slope_2;
      slope_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      slope_2 = in__.scalar();
      current_statement__ = 6;
      slope_2 = stan::math::lb_constrain(slope_2, 0);
      double b1;
      b1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      b1 = in__.scalar();
      current_statement__ = 7;
      b1 = stan::math::lb_constrain(b1, 0);
      double b2;
      b2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      b2 = in__.scalar();
      current_statement__ = 8;
      b2 = stan::math::lb_constrain(b2, 0);
      double ell;
      ell = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      ell = in__.scalar();
      current_statement__ = 9;
      ell = stan::math::lb_constrain(ell, 0);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_f = in__.scalar();
      current_statement__ = 10;
      sigma_f = stan::math::lb_constrain(sigma_f, 0);
      std::vector<double> alpha;
      alpha = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      Eigen::Matrix<double, -1, 1> z;
      z = Eigen::Matrix<double, -1, 1>(z_1dim__);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 12;
      z = in__.vector(z_1dim__);
      double s2;
      s2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      s2 = in__.scalar();
      current_statement__ = 13;
      s2 = stan::math::lb_constrain(s2, 0);
      double s2_ec50_1;
      s2_ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      s2_ec50_1 = in__.scalar();
      current_statement__ = 14;
      s2_ec50_1 = stan::math::lb_constrain(s2_ec50_1, 0);
      double s2_ec50_2;
      s2_ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      s2_ec50_2 = in__.scalar();
      current_statement__ = 15;
      s2_ec50_2 = stan::math::lb_constrain(s2_ec50_2, 0);
      Eigen::Matrix<double, -1, -1> p0;
      p0 = Eigen::Matrix<double, -1, -1>(n2, n1);
      stan::math::fill(p0, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> p01;
      p01 = Eigen::Matrix<double, 1, -1>(n1);
      stan::math::fill(p01, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> p02;
      p02 = Eigen::Matrix<double, -1, 1>(n2);
      stan::math::fill(p02, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Delta;
      Delta = Eigen::Matrix<double, -1, -1>(n2, n1);
      stan::math::fill(Delta, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        vars__.emplace_back(la_1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        vars__.emplace_back(la_2[(sym1__ - 1)]);}
      vars__.emplace_back(ec50_1);
      vars__.emplace_back(ec50_2);
      vars__.emplace_back(slope_1);
      vars__.emplace_back(slope_2);
      vars__.emplace_back(b1);
      vars__.emplace_back(b2);
      vars__.emplace_back(ell);
      vars__.emplace_back(sigma_f);
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
        vars__.emplace_back(z[(sym1__ - 1)]);}
      vars__.emplace_back(s2);
      vars__.emplace_back(s2_ec50_1);
      vars__.emplace_back(s2_ec50_2);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        double la_1_param;
        la_1_param = std::numeric_limits<double>::quiet_NaN();
        
        double la_2_param;
        la_2_param = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 22;
        validate_non_negative_index("B", "n2", n2);
        current_statement__ = 23;
        validate_non_negative_index("B", "n1", n1);
        Eigen::Matrix<double, -1, -1> B;
        B = Eigen::Matrix<double, -1, -1>(n2, n1);
        stan::math::fill(B, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 25;
        validate_non_negative_index("GP", "n2", n2);
        current_statement__ = 26;
        validate_non_negative_index("GP", "n1", n1);
        Eigen::Matrix<double, -1, -1> GP;
        GP = Eigen::Matrix<double, -1, -1>(n2, n1);
        stan::math::fill(GP, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 28;
        validate_non_negative_index("cov", "(n1 * n2)", (n1 * n2));
        current_statement__ = 29;
        validate_non_negative_index("cov", "(n1 * n2)", (n1 * n2));
        Eigen::Matrix<double, -1, -1> cov;
        cov = Eigen::Matrix<double, -1, -1>((n1 * n2), (n1 * n2));
        stan::math::fill(cov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 31;
        validate_non_negative_index("L_cov", "(n1 * n2)", (n1 * n2));
        current_statement__ = 32;
        validate_non_negative_index("L_cov", "(n1 * n2)", (n1 * n2));
        Eigen::Matrix<double, -1, -1> L_cov;
        L_cov = Eigen::Matrix<double, -1, -1>((n1 * n2), (n1 * n2));
        stan::math::fill(L_cov, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 56;
        if (logical_eq(kernel, 1)) {
          current_statement__ = 54;
          assign(cov, nil_index_list(),
            add(
              multiply(sigma_f,
                stan::math::exp(
                  elt_divide(minus(xdist_squared), (2 * pow(ell, 2))))),
              diag_matrix(rep_vector(1e-10, (n1 * n2)))),
            "assigning variable cov");
        } else {
          current_statement__ = 53;
          if (logical_eq(kernel, 2)) {
            current_statement__ = 37;
            validate_non_negative_index("poly", "(n1 * n2)", (n1 * n2));
            current_statement__ = 38;
            validate_non_negative_index("poly", "(n1 * n2)", (n1 * n2));
            Eigen::Matrix<double, -1, -1> poly;
            poly = Eigen::Matrix<double, -1, -1>((n1 * n2), (n1 * n2));
            stan::math::fill(poly, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 51;
            if (logical_eq(nu_matern, 1)) {
              current_statement__ = 48;
              assign(poly, nil_index_list(),
                rep_matrix(1, (n1 * n2), (n1 * n2)),
                "assigning variable poly");
              current_statement__ = 49;
              assign(cov, nil_index_list(),
                add(
                  multiply(sigma_f,
                    elt_multiply(poly,
                      stan::math::exp(elt_divide(minus(xdist), ell)))),
                  diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                "assigning variable cov");
            } else {
              current_statement__ = 47;
              if (logical_eq(nu_matern, 2)) {
                current_statement__ = 44;
                assign(poly, nil_index_list(),
                  add(1,
                    multiply(stan::math::sqrt(3), elt_divide(xdist, ell))),
                  "assigning variable poly");
                current_statement__ = 45;
                assign(cov, nil_index_list(),
                  add(
                    multiply(sigma_f,
                      elt_multiply(poly,
                        stan::math::exp(
                          elt_divide(multiply(-stan::math::sqrt(3), xdist),
                            ell)))),
                    diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                  "assigning variable cov");
              } else {
                current_statement__ = 43;
                if (logical_eq(nu_matern, 3)) {
                  current_statement__ = 40;
                  assign(poly, nil_index_list(),
                    add(
                      add(1,
                        multiply(stan::math::sqrt(5), elt_divide(xdist, ell))),
                      multiply((5. / 3.),
                        elt_divide(xdist_squared, pow(ell, 2)))),
                    "assigning variable poly");
                  current_statement__ = 41;
                  assign(cov, nil_index_list(),
                    add(
                      multiply(sigma_f,
                        elt_multiply(poly,
                          stan::math::exp(
                            elt_divide(multiply(-stan::math::sqrt(5), xdist),
                              ell)))),
                      diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                    "assigning variable cov");
                } 
              }
            }
          } else {
            current_statement__ = 36;
            if (logical_eq(kernel, 3)) {
              current_statement__ = 34;
              assign(cov, nil_index_list(),
                add(
                  multiply(sigma_f,
                    stan::math::exp(
                      multiply(-alpha[(1 - 1)],
                        stan::math::log(
                          add(1,
                            elt_divide(xdist_squared,
                              ((2 * alpha[(1 - 1)]) * pow(ell, 2)))))))),
                  diag_matrix(rep_vector(1e-10, (n1 * n2)))),
                "assigning variable cov");
            } 
          }
        }
        current_statement__ = 57;
        assign(L_cov, nil_index_list(), cholesky_decompose(cov),
          "assigning variable L_cov");
        current_statement__ = 58;
        assign(GP, nil_index_list(), to_matrix(multiply(L_cov, z), n2, n1),
          "assigning variable GP");
        current_statement__ = 65;
        if (est_la) {
          current_statement__ = 62;
          la_1_param = la_1[(1 - 1)];
          current_statement__ = 63;
          la_2_param = la_2[(1 - 1)];
        } else {
          current_statement__ = 59;
          la_1_param = 0;
          current_statement__ = 60;
          la_2_param = 0;
        }
        current_statement__ = 74;
        for (int j = 1; j <= n1; ++j) {
          current_statement__ = 66;
          assign(p01, cons_list(index_uni(j), nil_index_list()),
            (la_1_param +
              ((1 - la_1_param) /
                (1 + pow(10, (slope_1 * (x1[(j - 1)] - ec50_1)))))),
            "assigning variable p01");
          current_statement__ = 72;
          for (int i = 1; i <= n2; ++i) {
            current_statement__ = 67;
            assign(p02, cons_list(index_uni(i), nil_index_list()),
              (la_2_param +
                ((1 - la_2_param) /
                  (1 + pow(10, (slope_2 * (x2[(i - 1)] - ec50_2)))))),
              "assigning variable p02");
            current_statement__ = 68;
            assign(p0,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              (p01[(j - 1)] * p02[(i - 1)]), "assigning variable p0");
            current_statement__ = 69;
            assign(B,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              rvalue(GP,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "GP"),
              "assigning variable B");
            current_statement__ = 70;
            assign(Delta,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((-rvalue(p0,
                   cons_list(index_uni(i),
                     cons_list(index_uni(j), nil_index_list())), "p0") /
                 (1 +
                   stan::math::exp(
                     ((b1 *
                        rvalue(B,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())), "B"))
                       +
                       stan::math::log(
                         (rvalue(p0,
                            cons_list(index_uni(i),
                              cons_list(index_uni(j), nil_index_list())),
                            "p0") /
                           (1 -
                             rvalue(p0,
                               cons_list(index_uni(i),
                                 cons_list(index_uni(j), nil_index_list())),
                               "p0")))))))) +
                ((1 -
                   rvalue(p0,
                     cons_list(index_uni(i),
                       cons_list(index_uni(j), nil_index_list())), "p0")) /
                  (1 +
                    stan::math::exp(
                      ((-b2 *
                         rvalue(B,
                           cons_list(index_uni(i),
                             cons_list(index_uni(j), nil_index_list())), "B"))
                        -
                        stan::math::log(
                          (rvalue(p0,
                             cons_list(index_uni(i),
                               cons_list(index_uni(j), nil_index_list())),
                             "p0") /
                            (1 -
                              rvalue(p0,
                                cons_list(index_uni(i),
                                  cons_list(index_uni(j), nil_index_list())),
                                "p0"))))))))), "assigning variable Delta");}}
      }
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 16;
          current_statement__ = 16;
          check_greater_or_equal(function__, "p0[sym1__, sym2__]",
                                 rvalue(p0,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "p0"), 0);}}
      current_statement__ = 16;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 16;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 16;
          current_statement__ = 16;
          check_less_or_equal(function__, "p0[sym1__, sym2__]",
                              rvalue(p0,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "p0"), 1);}}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_greater_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)],
                               0);}
      current_statement__ = 17;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 17;
        current_statement__ = 17;
        check_less_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)], 1);
      }
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_greater_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)],
                               0);}
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        current_statement__ = 18;
        check_less_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)], 1);
      }
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 19;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 19;
          current_statement__ = 19;
          check_greater_or_equal(function__, "Delta[sym1__, sym2__]",
                                 rvalue(Delta,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "Delta"), 
                                 -1);}}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 19;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 19;
          current_statement__ = 19;
          check_less_or_equal(function__, "Delta[sym1__, sym2__]",
                              rvalue(Delta,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "Delta"), 1);}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            vars__.emplace_back(
              rvalue(p0,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "p0"));}}
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          vars__.emplace_back(p01[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
          vars__.emplace_back(p02[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            vars__.emplace_back(
              rvalue(Delta,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "Delta"));
          }}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> CPO;
      CPO = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(CPO, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 76;
      assign(CPO, nil_index_list(), rep_vector(0, N),
        "assigning variable CPO");
      double dss_1;
      dss_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 77;
      dss_1 = 0;
      double dss_2;
      dss_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 78;
      dss_2 = 0;
      double rVUS_p;
      rVUS_p = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 79;
      rVUS_p = 0;
      double rVUS_Delta;
      rVUS_Delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 80;
      rVUS_Delta = 0;
      double rVUS_syn;
      rVUS_syn = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 81;
      rVUS_syn = 0;
      double rVUS_ant;
      rVUS_ant = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 82;
      rVUS_ant = 0;
      {
        current_statement__ = 83;
        validate_non_negative_index("f", "n2 + 1", (n2 + 1));
        current_statement__ = 84;
        validate_non_negative_index("f", "n1 + 1", (n1 + 1));
        Eigen::Matrix<double, -1, -1> f;
        f = Eigen::Matrix<double, -1, -1>((n2 + 1), (n1 + 1));
        stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 86;
        validate_non_negative_index("f_interior", "n2", n2);
        current_statement__ = 87;
        validate_non_negative_index("f_interior", "n1", n1);
        Eigen::Matrix<double, -1, -1> f_interior;
        f_interior = Eigen::Matrix<double, -1, -1>(n2, n1);
        stan::math::fill(f_interior, std::numeric_limits<double>::quiet_NaN());
        
        double la_1_param;
        la_1_param = std::numeric_limits<double>::quiet_NaN();
        
        double la_2_param;
        la_2_param = std::numeric_limits<double>::quiet_NaN();
        
        double eps;
        eps = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 91;
        eps = 0.05;
        double c11;
        c11 = std::numeric_limits<double>::quiet_NaN();
        
        double c12;
        c12 = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 93;
        c12 = max(x1);
        double c21;
        c21 = std::numeric_limits<double>::quiet_NaN();
        
        double c22;
        c22 = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 95;
        c22 = max(x2);
        current_statement__ = 96;
        validate_non_negative_index("B_rVUS", "n2", n2);
        Eigen::Matrix<double, -1, 1> B_rVUS;
        B_rVUS = Eigen::Matrix<double, -1, 1>(n2);
        stan::math::fill(B_rVUS, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 98;
        validate_non_negative_index("B_Delta", "n2", n2);
        Eigen::Matrix<double, -1, 1> B_Delta;
        B_Delta = Eigen::Matrix<double, -1, 1>(n2);
        stan::math::fill(B_Delta, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 100;
        validate_non_negative_index("B_syn", "n2", n2);
        Eigen::Matrix<double, -1, 1> B_syn;
        B_syn = Eigen::Matrix<double, -1, 1>(n2);
        stan::math::fill(B_syn, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 102;
        validate_non_negative_index("B_ant", "n2", n2);
        Eigen::Matrix<double, -1, 1> B_ant;
        B_ant = Eigen::Matrix<double, -1, 1>(n2);
        stan::math::fill(B_ant, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 104;
        assign(f,
          cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
          1, "assigning variable f");
        current_statement__ = 105;
        assign(f,
          cons_list(index_uni(1),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())), p01,
          "assigning variable f");
        current_statement__ = 106;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_uni(1), nil_index_list())), p02,
          "assigning variable f");
        current_statement__ = 107;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())),
          add(p0, Delta), "assigning variable f");
        current_statement__ = 108;
        assign(f_interior,
          cons_list(index_min_max(1, n2),
            cons_list(index_min_max(1, n1), nil_index_list())),
          subtract(1, add(p0, Delta)), "assigning variable f_interior");
        current_statement__ = 111;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 109;
          assign(CPO, cons_list(index_uni(i), nil_index_list()),
            stan::math::exp(
              -normal_lpdf<false>(y[(i - 1)],
                 to_vector(f)[(ii_obs[(i - 1)] - 1)], stan::math::sqrt(s2))),
            "assigning variable CPO");}
        current_statement__ = 118;
        if (est_la) {
          current_statement__ = 115;
          la_1_param = la_1[(1 - 1)];
          current_statement__ = 116;
          la_2_param = la_2[(1 - 1)];
        } else {
          current_statement__ = 112;
          la_1_param = 0;
          current_statement__ = 113;
          la_2_param = 0;
        }
        current_statement__ = 129;
        if (logical_gt((1 - (eps / 2)), la_1_param)) {
          current_statement__ = 121;
          c11 = (((1 / slope_1) *
                   stan::math::log10(
                     (((1 - la_1_param) / ((1 - (eps / 2)) - la_1_param)) -
                       1))) + ec50_1);
          current_statement__ = 127;
          if (logical_lt(c11, max(x1))) {
            current_statement__ = 124;
            dss_1 = ((c12 - c11) +
                      (((la_1_param - 1) / slope_1) *
                        (stan::math::log10(
                           (1 + pow(10, (slope_1 * (c12 - ec50_1))))) -
                          stan::math::log10(
                            (1 + pow(10, (slope_1 * (c11 - ec50_1))))))));
            current_statement__ = 125;
            dss_1 = (100 * (1 - (dss_1 / ((1 - (eps / 2)) * (c12 - c11)))));
          } else {
            current_statement__ = 122;
            dss_1 = uniform_rng(1e-16, 1e-15, base_rng__);
          }
        } else {
          current_statement__ = 119;
          dss_1 = uniform_rng(1e-16, 1e-15, base_rng__);
        }
        current_statement__ = 140;
        if (logical_gt((1 - (eps / 2)), la_2_param)) {
          current_statement__ = 132;
          c21 = (((1 / slope_2) *
                   stan::math::log10(
                     (((1 - la_2_param) / ((1 - (eps / 2)) - la_2_param)) -
                       1))) + ec50_2);
          current_statement__ = 138;
          if (logical_lt(c21, max(x2))) {
            current_statement__ = 135;
            dss_2 = ((c22 - c21) +
                      (((la_2_param - 1) / slope_2) *
                        (stan::math::log10(
                           (1 + pow(10, (slope_2 * (c22 - ec50_2))))) -
                          stan::math::log10(
                            (1 + pow(10, (slope_2 * (c21 - ec50_2))))))));
            current_statement__ = 136;
            dss_2 = (100 * (1 - (dss_2 / ((1 - (eps / 2)) * (c22 - c21)))));
          } else {
            current_statement__ = 133;
            dss_2 = uniform_rng(1e-16, 1e-15, base_rng__);
          }
        } else {
          current_statement__ = 130;
          dss_2 = uniform_rng(1e-16, 1e-15, base_rng__);
        }
        current_statement__ = 162;
        for (int i = 1; i <= n2; ++i) {
          double b_rVUS;
          b_rVUS = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 141;
          b_rVUS = 0;
          double b_Delta;
          b_Delta = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 142;
          b_Delta = 0;
          double b_syn;
          b_syn = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 143;
          b_syn = 0;
          double b_ant;
          b_ant = std::numeric_limits<double>::quiet_NaN();
          
          current_statement__ = 144;
          b_ant = 0;
          current_statement__ = 150;
          for (int j = 2; j <= n1; ++j) {
            current_statement__ = 145;
            b_rVUS = (b_rVUS +
                       (((x1[(j - 1)] - x1[((j - 1) - 1)]) *
                          (rvalue(f_interior,
                             cons_list(index_uni(i),
                               cons_list(index_uni(j), nil_index_list())),
                             "f_interior") +
                            rvalue(f_interior,
                              cons_list(index_uni(i),
                                cons_list(index_uni((j - 1)),
                                  nil_index_list())), "f_interior"))) / 2));
            current_statement__ = 146;
            b_Delta = (b_Delta +
                        (((x1[(j - 1)] - x1[((j - 1) - 1)]) *
                           (stan::math::fabs(
                              rvalue(Delta,
                                cons_list(index_uni(i),
                                  cons_list(index_uni(j), nil_index_list())),
                                "Delta")) +
                             stan::math::fabs(
                               rvalue(Delta,
                                 cons_list(index_uni(i),
                                   cons_list(index_uni((j - 1)),
                                     nil_index_list())), "Delta")))) / 2));
            current_statement__ = 147;
            b_syn = (b_syn +
                      (((x1[(j - 1)] - x1[((j - 1) - 1)]) *
                         (stan::math::fabs(
                            stan::math::fmin(
                              rvalue(Delta,
                                cons_list(index_uni(i),
                                  cons_list(index_uni(j), nil_index_list())),
                                "Delta"), 0)) +
                           stan::math::fabs(
                             stan::math::fmin(
                               rvalue(Delta,
                                 cons_list(index_uni(i),
                                   cons_list(index_uni((j - 1)),
                                     nil_index_list())), "Delta"), 0)))) / 2));
            current_statement__ = 148;
            b_ant = (b_ant +
                      (((x1[(j - 1)] - x1[((j - 1) - 1)]) *
                         (stan::math::fabs(
                            stan::math::fmax(
                              rvalue(Delta,
                                cons_list(index_uni(i),
                                  cons_list(index_uni(j), nil_index_list())),
                                "Delta"), 0)) +
                           stan::math::fabs(
                             stan::math::fmax(
                               rvalue(Delta,
                                 cons_list(index_uni(i),
                                   cons_list(index_uni((j - 1)),
                                     nil_index_list())), "Delta"), 0)))) / 2));
          }
          current_statement__ = 151;
          assign(B_rVUS, cons_list(index_uni(i), nil_index_list()), b_rVUS,
            "assigning variable B_rVUS");
          current_statement__ = 152;
          assign(B_Delta, cons_list(index_uni(i), nil_index_list()), b_Delta,
            "assigning variable B_Delta");
          current_statement__ = 153;
          assign(B_syn, cons_list(index_uni(i), nil_index_list()), b_syn,
            "assigning variable B_syn");
          current_statement__ = 154;
          assign(B_ant, cons_list(index_uni(i), nil_index_list()), b_ant,
            "assigning variable B_ant");
          current_statement__ = 160;
          if (logical_gt(i, 1)) {
            current_statement__ = 155;
            rVUS_p = (rVUS_p +
                       (((x2[(i - 1)] - x2[((i - 1) - 1)]) *
                          (B_rVUS[(i - 1)] + B_rVUS[((i - 1) - 1)])) / 2));
            current_statement__ = 156;
            rVUS_Delta = (rVUS_Delta +
                           (((x2[(i - 1)] - x2[((i - 1) - 1)]) *
                              (B_Delta[(i - 1)] + B_Delta[((i - 1) - 1)])) /
                             2));
            current_statement__ = 157;
            rVUS_syn = (rVUS_syn +
                         (((x2[(i - 1)] - x2[((i - 1) - 1)]) *
                            (B_syn[(i - 1)] + B_syn[((i - 1) - 1)])) / 2));
            current_statement__ = 158;
            rVUS_ant = (rVUS_ant +
                         (((x2[(i - 1)] - x2[((i - 1) - 1)]) *
                            (B_ant[(i - 1)] + B_ant[((i - 1) - 1)])) / 2));
          } }
        current_statement__ = 163;
        rVUS_p = ((100 * rVUS_p) /
                   ((max(x1) - min(x1)) * (max(x2) - min(x2))));
        current_statement__ = 164;
        rVUS_Delta = ((100 * rVUS_Delta) /
                       (((max(x1) - min(x1)) * (max(x2) - min(x2))) *
                         stan::math::fmax(max(p0), max(subtract(1, p0)))));
        current_statement__ = 165;
        rVUS_syn = ((100 * rVUS_syn) /
                     (((max(x1) - min(x1)) * (max(x2) - min(x2))) * max(p0)));
        current_statement__ = 166;
        rVUS_ant = ((100 * rVUS_ant) /
                     (((max(x1) - min(x1)) * (max(x2) - min(x2))) *
                       max(subtract(1, p0))));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(CPO[(sym1__ - 1)]);}
      vars__.emplace_back(dss_1);
      vars__.emplace_back(dss_2);
      vars__.emplace_back(rVUS_p);
      vars__.emplace_back(rVUS_Delta);
      vars__.emplace_back(rVUS_syn);
      vars__.emplace_back(rVUS_ant);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> la_1;
      la_1 = std::vector<double>(la_1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(la_1, nil_index_list(), context__.vals_r("la_1"),
        "assigning variable la_1");
      std::vector<double> la_1_free__;
      la_1_free__ = std::vector<double>(la_1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(la_1[(sym1__ - 1)], 0, 1),
          "assigning variable la_1_free__");}
      std::vector<double> la_2;
      la_2 = std::vector<double>(la_2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(la_2, nil_index_list(), context__.vals_r("la_2"),
        "assigning variable la_2");
      std::vector<double> la_2_free__;
      la_2_free__ = std::vector<double>(la_2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(la_2[(sym1__ - 1)], 0, 1),
          "assigning variable la_2_free__");}
      double ec50_1;
      ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      ec50_1 = context__.vals_r("ec50_1")[(1 - 1)];
      double ec50_2;
      ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      ec50_2 = context__.vals_r("ec50_2")[(1 - 1)];
      double slope_1;
      slope_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      slope_1 = context__.vals_r("slope_1")[(1 - 1)];
      double slope_1_free__;
      slope_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      slope_1_free__ = stan::math::lb_free(slope_1, 0);
      double slope_2;
      slope_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      slope_2 = context__.vals_r("slope_2")[(1 - 1)];
      double slope_2_free__;
      slope_2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      slope_2_free__ = stan::math::lb_free(slope_2, 0);
      double b1;
      b1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      b1 = context__.vals_r("b1")[(1 - 1)];
      double b1_free__;
      b1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      b1_free__ = stan::math::lb_free(b1, 0);
      double b2;
      b2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      b2 = context__.vals_r("b2")[(1 - 1)];
      double b2_free__;
      b2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      b2_free__ = stan::math::lb_free(b2, 0);
      double ell;
      ell = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      ell = context__.vals_r("ell")[(1 - 1)];
      double ell_free__;
      ell_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      ell_free__ = stan::math::lb_free(ell, 0);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_f = context__.vals_r("sigma_f")[(1 - 1)];
      double sigma_f_free__;
      sigma_f_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_f_free__ = stan::math::lb_free(sigma_f, 0);
      std::vector<double> alpha;
      alpha = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      assign(alpha, nil_index_list(), context__.vals_r("alpha"),
        "assigning variable alpha");
      std::vector<double> alpha_free__;
      alpha_free__ = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 11;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      Eigen::Matrix<double, -1, 1> z;
      z = Eigen::Matrix<double, -1, 1>(z_1dim__);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 12;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
          current_statement__ = 12;
          assign(z, cons_list(index_uni(sym1__), nil_index_list()),
            z_flat__[(pos__ - 1)], "assigning variable z");
          current_statement__ = 12;
          pos__ = (pos__ + 1);}
      }
      double s2;
      s2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      s2 = context__.vals_r("s2")[(1 - 1)];
      double s2_free__;
      s2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 13;
      s2_free__ = stan::math::lb_free(s2, 0);
      double s2_ec50_1;
      s2_ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      s2_ec50_1 = context__.vals_r("s2_ec50_1")[(1 - 1)];
      double s2_ec50_1_free__;
      s2_ec50_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 14;
      s2_ec50_1_free__ = stan::math::lb_free(s2_ec50_1, 0);
      double s2_ec50_2;
      s2_ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      s2_ec50_2 = context__.vals_r("s2_ec50_2")[(1 - 1)];
      double s2_ec50_2_free__;
      s2_ec50_2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      s2_ec50_2_free__ = stan::math::lb_free(s2_ec50_2, 0);
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        vars__.emplace_back(la_1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        vars__.emplace_back(la_2_free__[(sym1__ - 1)]);}
      vars__.emplace_back(ec50_1);
      vars__.emplace_back(ec50_2);
      vars__.emplace_back(slope_1_free__);
      vars__.emplace_back(slope_2_free__);
      vars__.emplace_back(b1_free__);
      vars__.emplace_back(b2_free__);
      vars__.emplace_back(ell_free__);
      vars__.emplace_back(sigma_f_free__);
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
        vars__.emplace_back(z[(sym1__ - 1)]);}
      vars__.emplace_back(s2_free__);
      vars__.emplace_back(s2_ec50_1_free__);
      vars__.emplace_back(s2_ec50_2_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("la_1");
    names__.emplace_back("la_2");
    names__.emplace_back("ec50_1");
    names__.emplace_back("ec50_2");
    names__.emplace_back("slope_1");
    names__.emplace_back("slope_2");
    names__.emplace_back("b1");
    names__.emplace_back("b2");
    names__.emplace_back("ell");
    names__.emplace_back("sigma_f");
    names__.emplace_back("alpha");
    names__.emplace_back("z");
    names__.emplace_back("s2");
    names__.emplace_back("s2_ec50_1");
    names__.emplace_back("s2_ec50_2");
    names__.emplace_back("p0");
    names__.emplace_back("p01");
    names__.emplace_back("p02");
    names__.emplace_back("Delta");
    names__.emplace_back("CPO");
    names__.emplace_back("dss_1");
    names__.emplace_back("dss_2");
    names__.emplace_back("rVUS_p");
    names__.emplace_back("rVUS_Delta");
    names__.emplace_back("rVUS_syn");
    names__.emplace_back("rVUS_ant");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(la_1_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(la_2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(z_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2),
                                             static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2),
                                             static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_2" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "ec50_1");
    param_names__.emplace_back(std::string() + "ec50_2");
    param_names__.emplace_back(std::string() + "slope_1");
    param_names__.emplace_back(std::string() + "slope_2");
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "b2");
    param_names__.emplace_back(std::string() + "ell");
    param_names__.emplace_back(std::string() + "sigma_f");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "s2");
    param_names__.emplace_back(std::string() + "s2_ec50_1");
    param_names__.emplace_back(std::string() + "s2_ec50_2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p0" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p01" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p02" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Delta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CPO" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "dss_1");
      param_names__.emplace_back(std::string() + "dss_2");
      param_names__.emplace_back(std::string() + "rVUS_p");
      param_names__.emplace_back(std::string() + "rVUS_Delta");
      param_names__.emplace_back(std::string() + "rVUS_syn");
      param_names__.emplace_back(std::string() + "rVUS_ant");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_2" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "ec50_1");
    param_names__.emplace_back(std::string() + "ec50_2");
    param_names__.emplace_back(std::string() + "slope_1");
    param_names__.emplace_back(std::string() + "slope_2");
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "b2");
    param_names__.emplace_back(std::string() + "ell");
    param_names__.emplace_back(std::string() + "sigma_f");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "s2");
    param_names__.emplace_back(std::string() + "s2_ec50_1");
    param_names__.emplace_back(std::string() + "s2_ec50_2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p0" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p01" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p02" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Delta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CPO" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "dss_1");
      param_names__.emplace_back(std::string() + "dss_2");
      param_names__.emplace_back(std::string() + "rVUS_p");
      param_names__.emplace_back(std::string() + "rVUS_Delta");
      param_names__.emplace_back(std::string() + "rVUS_syn");
      param_names__.emplace_back(std::string() + "rVUS_ant");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"la_1\",\"type\":{\"name\":\"array\",\"length\":" << la_1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"la_2\",\"type\":{\"name\":\"array\",\"length\":" << la_2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ell\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << alpha_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" << z_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"s2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p01\",\"type\":{\"name\":\"vector\",\"length\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p02\",\"type\":{\"name\":\"vector\",\"length\":" << n2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Delta\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"CPO\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"dss_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"dss_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_p\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_Delta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_syn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_ant\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"la_1\",\"type\":{\"name\":\"array\",\"length\":" << la_1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"la_2\",\"type\":{\"name\":\"array\",\"length\":" << la_2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ell\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << alpha_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"vector\",\"length\":" << z_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"s2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p01\",\"type\":{\"name\":\"vector\",\"length\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p02\",\"type\":{\"name\":\"vector\",\"length\":" << n2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Delta\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"CPO\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"dss_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"dss_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_p\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_Delta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_syn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_ant\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_gp_namespace::model_gp;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_gp_namespace::profiles__;
}
#endif
#endif
