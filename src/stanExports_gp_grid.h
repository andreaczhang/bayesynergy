// Generated by rstantools.  Do not edit by hand.

/*
    BayesIntComp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesIntComp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesIntComp.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_gp_grid_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_gp_grid");
    reader.add_event(308, 306, "end", "model_gp_grid");
    return reader;
}
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
kron_mvprod(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& A,
                const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& B,
                const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& V, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 6;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(multiply(A, transpose(multiply(B, V)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct kron_mvprod_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& A,
                const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& B,
                const Eigen::Matrix<T2__, Eigen::Dynamic, Eigen::Dynamic>& V, std::ostream* pstream__) const {
        return kron_mvprod(A, B, V, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_gp_grid
  : public stan::model::model_base_crtp<model_gp_grid> {
private:
        int n1;
        int n2;
        int nmissing;
        int nrep;
        vector_d y;
        std::vector<int> ii_obs;
        std::vector<double> x1;
        std::vector<double> x2;
        int est_la;
        int heteroscedastic;
        vector_d noise_hypers;
        double lambda;
        int kernel;
        int nu_matern;
        int est_alpha;
        int N;
        matrix_d x1dist;
        matrix_d x2dist;
        matrix_d x1dist_squared;
        matrix_d x2dist_squared;
public:
    model_gp_grid(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_gp_grid(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_gp_grid_namespace::model_gp_grid";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "n1", "int", context__.to_vec());
            n1 = int(0);
            vals_i__ = context__.vals_i("n1");
            pos__ = 0;
            n1 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n1", n1, 1);
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "n2", "int", context__.to_vec());
            n2 = int(0);
            vals_i__ = context__.vals_i("n2");
            pos__ = 0;
            n2 = vals_i__[pos__++];
            check_greater_or_equal(function__, "n2", n2, 1);
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "nmissing", "int", context__.to_vec());
            nmissing = int(0);
            vals_i__ = context__.vals_i("nmissing");
            pos__ = 0;
            nmissing = vals_i__[pos__++];
            check_greater_or_equal(function__, "nmissing", nmissing, 0);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "nrep", "int", context__.to_vec());
            nrep = int(0);
            vals_i__ = context__.vals_i("nrep");
            pos__ = 0;
            nrep = vals_i__[pos__++];
            check_greater_or_equal(function__, "nrep", nrep, 1);
            current_statement_begin__ = 14;
            validate_non_negative_index("y", "(((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)", (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("ii_obs", "(((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)", (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            context__.validate_dims("data initialization", "ii_obs", "int", context__.to_vec((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
            ii_obs = std::vector<int>((((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing), int(0));
            vals_i__ = context__.vals_i("ii_obs");
            pos__ = 0;
            size_t ii_obs_k_0_max__ = (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
            for (size_t k_0__ = 0; k_0__ < ii_obs_k_0_max__; ++k_0__) {
                ii_obs[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("x1", "n1", n1);
            context__.validate_dims("data initialization", "x1", "double", context__.to_vec(n1));
            x1 = std::vector<double>(n1, double(0));
            vals_r__ = context__.vals_r("x1");
            pos__ = 0;
            size_t x1_k_0_max__ = n1;
            for (size_t k_0__ = 0; k_0__ < x1_k_0_max__; ++k_0__) {
                x1[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("x2", "n2", n2);
            context__.validate_dims("data initialization", "x2", "double", context__.to_vec(n2));
            x2 = std::vector<double>(n2, double(0));
            vals_r__ = context__.vals_r("x2");
            pos__ = 0;
            size_t x2_k_0_max__ = n2;
            for (size_t k_0__ = 0; k_0__ < x2_k_0_max__; ++k_0__) {
                x2[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "est_la", "int", context__.to_vec());
            est_la = int(0);
            vals_i__ = context__.vals_i("est_la");
            pos__ = 0;
            est_la = vals_i__[pos__++];
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "heteroscedastic", "int", context__.to_vec());
            heteroscedastic = int(0);
            vals_i__ = context__.vals_i("heteroscedastic");
            pos__ = 0;
            heteroscedastic = vals_i__[pos__++];
            current_statement_begin__ = 21;
            validate_non_negative_index("noise_hypers", "2", 2);
            context__.validate_dims("data initialization", "noise_hypers", "vector_d", context__.to_vec(2));
            noise_hypers = Eigen::Matrix<double, Eigen::Dynamic, 1>(2);
            vals_r__ = context__.vals_r("noise_hypers");
            pos__ = 0;
            size_t noise_hypers_j_1_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < noise_hypers_j_1_max__; ++j_1__) {
                noise_hypers(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "lambda", "double", context__.to_vec());
            lambda = double(0);
            vals_r__ = context__.vals_r("lambda");
            pos__ = 0;
            lambda = vals_r__[pos__++];
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "kernel", "int", context__.to_vec());
            kernel = int(0);
            vals_i__ = context__.vals_i("kernel");
            pos__ = 0;
            kernel = vals_i__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "nu_matern", "int", context__.to_vec());
            nu_matern = int(0);
            vals_i__ = context__.vals_i("nu_matern");
            pos__ = 0;
            nu_matern = vals_i__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "est_alpha", "int", context__.to_vec());
            est_alpha = int(0);
            vals_i__ = context__.vals_i("est_alpha");
            pos__ = 0;
            est_alpha = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 28;
            N = int(0);
            stan::math::fill(N, std::numeric_limits<int>::min());
            stan::math::assign(N,(((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing));
            current_statement_begin__ = 29;
            validate_non_negative_index("x1dist", "n1", n1);
            validate_non_negative_index("x1dist", "n1", n1);
            x1dist = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n1, n1);
            stan::math::fill(x1dist, DUMMY_VAR__);
            current_statement_begin__ = 30;
            validate_non_negative_index("x2dist", "n2", n2);
            validate_non_negative_index("x2dist", "n2", n2);
            x2dist = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n2, n2);
            stan::math::fill(x2dist, DUMMY_VAR__);
            current_statement_begin__ = 31;
            validate_non_negative_index("x1dist_squared", "n1", n1);
            validate_non_negative_index("x1dist_squared", "n1", n1);
            x1dist_squared = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n1, n1);
            stan::math::fill(x1dist_squared, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("x2dist_squared", "n2", n2);
            validate_non_negative_index("x2dist_squared", "n2", n2);
            x2dist_squared = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n2, n2);
            stan::math::fill(x2dist_squared, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 35;
            for (int i = 1; i <= n1; ++i) {
                current_statement_begin__ = 36;
                for (int j = i; j <= n1; ++j) {
                    current_statement_begin__ = 37;
                    stan::model::assign(x1dist, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                stan::math::sqrt(pow((get_base1(x1, i, "x1", 1) - get_base1(x1, j, "x1", 1)), 2)), 
                                "assigning variable x1dist");
                    current_statement_begin__ = 38;
                    stan::model::assign(x1dist, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(x1dist, i, j, "x1dist", 1), 
                                "assigning variable x1dist");
                    current_statement_begin__ = 39;
                    stan::model::assign(x1dist_squared, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                pow(get_base1(x1dist, i, j, "x1dist", 1), 2), 
                                "assigning variable x1dist_squared");
                    current_statement_begin__ = 40;
                    stan::model::assign(x1dist_squared, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(x1dist_squared, i, j, "x1dist_squared", 1), 
                                "assigning variable x1dist_squared");
                }
            }
            current_statement_begin__ = 43;
            for (int i = 1; i <= n2; ++i) {
                current_statement_begin__ = 44;
                for (int j = i; j <= n2; ++j) {
                    current_statement_begin__ = 45;
                    stan::model::assign(x2dist, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                stan::math::sqrt(pow((get_base1(x2, i, "x2", 1) - get_base1(x2, j, "x2", 1)), 2)), 
                                "assigning variable x2dist");
                    current_statement_begin__ = 46;
                    stan::model::assign(x2dist, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(x2dist, i, j, "x2dist", 1), 
                                "assigning variable x2dist");
                    current_statement_begin__ = 47;
                    stan::model::assign(x2dist_squared, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                pow(get_base1(x2dist, i, j, "x2dist", 1), 2), 
                                "assigning variable x2dist_squared");
                    current_statement_begin__ = 48;
                    stan::model::assign(x2dist_squared, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), 
                                get_base1(x2dist_squared, i, j, "x2dist_squared", 1), 
                                "assigning variable x2dist_squared");
                }
            }
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 54;
            validate_non_negative_index("la_1", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
            num_params_r__ += (1 * (est_la ? 1 : 0 ));
            current_statement_begin__ = 55;
            validate_non_negative_index("la_2", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
            num_params_r__ += (1 * (est_la ? 1 : 0 ));
            current_statement_begin__ = 56;
            num_params_r__ += 1;
            current_statement_begin__ = 57;
            num_params_r__ += 1;
            current_statement_begin__ = 58;
            num_params_r__ += 1;
            current_statement_begin__ = 59;
            num_params_r__ += 1;
            current_statement_begin__ = 60;
            num_params_r__ += 1;
            current_statement_begin__ = 61;
            num_params_r__ += 1;
            current_statement_begin__ = 64;
            num_params_r__ += 1;
            current_statement_begin__ = 65;
            num_params_r__ += 1;
            current_statement_begin__ = 68;
            num_params_r__ += 1;
            current_statement_begin__ = 69;
            num_params_r__ += 1;
            current_statement_begin__ = 70;
            validate_non_negative_index("alpha", "(est_alpha ? 1 : 0 )", (est_alpha ? 1 : 0 ));
            num_params_r__ += (1 * (est_alpha ? 1 : 0 ));
            current_statement_begin__ = 71;
            validate_non_negative_index("z", "n2", n2);
            validate_non_negative_index("z", "n1", n1);
            num_params_r__ += (n2 * n1);
            current_statement_begin__ = 75;
            num_params_r__ += 1;
            current_statement_begin__ = 76;
            num_params_r__ += 1;
            current_statement_begin__ = 77;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_gp_grid() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 54;
        if (!(context__.contains_r("la_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable la_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("la_1");
        pos__ = 0U;
        validate_non_negative_index("la_1", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "la_1", "double", context__.to_vec((est_la ? 1 : 0 )));
        std::vector<double> la_1((est_la ? 1 : 0 ), double(0));
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            la_1[k_0__] = vals_r__[pos__++];
        }
        size_t la_1_i_0_max__ = (est_la ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < la_1_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, la_1[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable la_1: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 55;
        if (!(context__.contains_r("la_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable la_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("la_2");
        pos__ = 0U;
        validate_non_negative_index("la_2", "(est_la ? 1 : 0 )", (est_la ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "la_2", "double", context__.to_vec((est_la ? 1 : 0 )));
        std::vector<double> la_2((est_la ? 1 : 0 ), double(0));
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            la_2[k_0__] = vals_r__[pos__++];
        }
        size_t la_2_i_0_max__ = (est_la ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < la_2_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, la_2[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable la_2: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 56;
        if (!(context__.contains_r("log10_ec50_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10_ec50_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10_ec50_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log10_ec50_1", "double", context__.to_vec());
        double log10_ec50_1(0);
        log10_ec50_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(log10_ec50_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10_ec50_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 57;
        if (!(context__.contains_r("log10_ec50_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable log10_ec50_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("log10_ec50_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "log10_ec50_2", "double", context__.to_vec());
        double log10_ec50_2(0);
        log10_ec50_2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(log10_ec50_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable log10_ec50_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 58;
        if (!(context__.contains_r("theta_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_1", "double", context__.to_vec());
        double theta_1(0);
        theta_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 59;
        if (!(context__.contains_r("theta_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_2", "double", context__.to_vec());
        double theta_2(0);
        theta_2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 60;
        if (!(context__.contains_r("slope_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable slope_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("slope_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "slope_1", "double", context__.to_vec());
        double slope_1(0);
        slope_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, slope_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable slope_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 61;
        if (!(context__.contains_r("slope_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable slope_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("slope_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "slope_2", "double", context__.to_vec());
        double slope_2(0);
        slope_2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, slope_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable slope_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 64;
        if (!(context__.contains_r("b1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b1", "double", context__.to_vec());
        double b1(0);
        b1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, b1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 65;
        if (!(context__.contains_r("b2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "b2", "double", context__.to_vec());
        double b2(0);
        b2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, b2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 68;
        if (!(context__.contains_r("ell")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ell missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ell");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "ell", "double", context__.to_vec());
        double ell(0);
        ell = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, ell);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ell: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 69;
        if (!(context__.contains_r("sigma_f")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_f missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_f");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_f", "double", context__.to_vec());
        double sigma_f(0);
        sigma_f = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_f);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_f: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 70;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "(est_alpha ? 1 : 0 )", (est_alpha ? 1 : 0 ));
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec((est_alpha ? 1 : 0 )));
        std::vector<double> alpha((est_alpha ? 1 : 0 ), double(0));
        size_t alpha_k_0_max__ = (est_alpha ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = (est_alpha ? 1 : 0 );
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 71;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "n2", n2);
        validate_non_negative_index("z", "n1", n1);
        context__.validate_dims("parameter initialization", "z", "matrix_d", context__.to_vec(n2,n1));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z(n2, n1);
        size_t z_j_2_max__ = n1;
        size_t z_j_1_max__ = n2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                z(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 75;
        if (!(context__.contains_r("s")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s", "double", context__.to_vec());
        double s(0);
        s = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 76;
        if (!(context__.contains_r("s2_log10_ec50_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s2_log10_ec50_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s2_log10_ec50_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s2_log10_ec50_1", "double", context__.to_vec());
        double s2_log10_ec50_1(0);
        s2_log10_ec50_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s2_log10_ec50_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s2_log10_ec50_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 77;
        if (!(context__.contains_r("s2_log10_ec50_2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable s2_log10_ec50_2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("s2_log10_ec50_2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "s2_log10_ec50_2", "double", context__.to_vec());
        double s2_log10_ec50_2(0);
        s2_log10_ec50_2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, s2_log10_ec50_2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable s2_log10_ec50_2: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 54;
            std::vector<local_scalar_t__> la_1;
            size_t la_1_d_0_max__ = (est_la ? 1 : 0 );
            la_1.reserve(la_1_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < la_1_d_0_max__; ++d_0__) {
                if (jacobian__)
                    la_1.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    la_1.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 55;
            std::vector<local_scalar_t__> la_2;
            size_t la_2_d_0_max__ = (est_la ? 1 : 0 );
            la_2.reserve(la_2_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < la_2_d_0_max__; ++d_0__) {
                if (jacobian__)
                    la_2.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    la_2.push_back(in__.scalar_lub_constrain(0, 1));
            }
            current_statement_begin__ = 56;
            local_scalar_t__ log10_ec50_1;
            (void) log10_ec50_1;  // dummy to suppress unused var warning
            if (jacobian__)
                log10_ec50_1 = in__.scalar_constrain(lp__);
            else
                log10_ec50_1 = in__.scalar_constrain();
            current_statement_begin__ = 57;
            local_scalar_t__ log10_ec50_2;
            (void) log10_ec50_2;  // dummy to suppress unused var warning
            if (jacobian__)
                log10_ec50_2 = in__.scalar_constrain(lp__);
            else
                log10_ec50_2 = in__.scalar_constrain();
            current_statement_begin__ = 58;
            local_scalar_t__ theta_1;
            (void) theta_1;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_1 = in__.scalar_constrain(lp__);
            else
                theta_1 = in__.scalar_constrain();
            current_statement_begin__ = 59;
            local_scalar_t__ theta_2;
            (void) theta_2;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_2 = in__.scalar_constrain(lp__);
            else
                theta_2 = in__.scalar_constrain();
            current_statement_begin__ = 60;
            local_scalar_t__ slope_1;
            (void) slope_1;  // dummy to suppress unused var warning
            if (jacobian__)
                slope_1 = in__.scalar_lb_constrain(0, lp__);
            else
                slope_1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 61;
            local_scalar_t__ slope_2;
            (void) slope_2;  // dummy to suppress unused var warning
            if (jacobian__)
                slope_2 = in__.scalar_lb_constrain(0, lp__);
            else
                slope_2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 64;
            local_scalar_t__ b1;
            (void) b1;  // dummy to suppress unused var warning
            if (jacobian__)
                b1 = in__.scalar_lb_constrain(0, lp__);
            else
                b1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 65;
            local_scalar_t__ b2;
            (void) b2;  // dummy to suppress unused var warning
            if (jacobian__)
                b2 = in__.scalar_lb_constrain(0, lp__);
            else
                b2 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 68;
            local_scalar_t__ ell;
            (void) ell;  // dummy to suppress unused var warning
            if (jacobian__)
                ell = in__.scalar_lb_constrain(0, lp__);
            else
                ell = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 69;
            local_scalar_t__ sigma_f;
            (void) sigma_f;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_f = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_f = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 70;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = (est_alpha ? 1 : 0 );
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    alpha.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 71;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> z;
            (void) z;  // dummy to suppress unused var warning
            if (jacobian__)
                z = in__.matrix_constrain(n2, n1, lp__);
            else
                z = in__.matrix_constrain(n2, n1);
            current_statement_begin__ = 75;
            local_scalar_t__ s;
            (void) s;  // dummy to suppress unused var warning
            if (jacobian__)
                s = in__.scalar_lb_constrain(0, lp__);
            else
                s = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 76;
            local_scalar_t__ s2_log10_ec50_1;
            (void) s2_log10_ec50_1;  // dummy to suppress unused var warning
            if (jacobian__)
                s2_log10_ec50_1 = in__.scalar_lb_constrain(0, lp__);
            else
                s2_log10_ec50_1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 77;
            local_scalar_t__ s2_log10_ec50_2;
            (void) s2_log10_ec50_2;  // dummy to suppress unused var warning
            if (jacobian__)
                s2_log10_ec50_2 = in__.scalar_lb_constrain(0, lp__);
            else
                s2_log10_ec50_2 = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 81;
            validate_non_negative_index("p0", "n2", n2);
            validate_non_negative_index("p0", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> p0(n2, n1);
            stan::math::initialize(p0, DUMMY_VAR__);
            stan::math::fill(p0, DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("p01", "n1", n1);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> p01(n1);
            stan::math::initialize(p01, DUMMY_VAR__);
            stan::math::fill(p01, DUMMY_VAR__);
            current_statement_begin__ = 83;
            validate_non_negative_index("p02", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p02(n2);
            stan::math::initialize(p02, DUMMY_VAR__);
            stan::math::fill(p02, DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("Delta", "n2", n2);
            validate_non_negative_index("Delta", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Delta(n2, n1);
            stan::math::initialize(Delta, DUMMY_VAR__);
            stan::math::fill(Delta, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("GP", "n2", n2);
            validate_non_negative_index("GP", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> GP(n2, n1);
            stan::math::initialize(GP, DUMMY_VAR__);
            stan::math::fill(GP, DUMMY_VAR__);
            // transformed parameters block statements
            {
            current_statement_begin__ = 88;
            local_scalar_t__ la_1_param(DUMMY_VAR__);
            (void) la_1_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_1_param, DUMMY_VAR__);
            stan::math::fill(la_1_param, DUMMY_VAR__);
            current_statement_begin__ = 89;
            local_scalar_t__ la_2_param(DUMMY_VAR__);
            (void) la_2_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_2_param, DUMMY_VAR__);
            stan::math::fill(la_2_param, DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("B", "n2", n2);
            validate_non_negative_index("B", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> B(n2, n1);
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);
            current_statement_begin__ = 97;
            validate_non_negative_index("cov1", "n1", n1);
            validate_non_negative_index("cov1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov1(n1, n1);
            stan::math::initialize(cov1, DUMMY_VAR__);
            stan::math::fill(cov1, DUMMY_VAR__);
            current_statement_begin__ = 98;
            validate_non_negative_index("cov2", "n2", n2);
            validate_non_negative_index("cov2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov2(n2, n2);
            stan::math::initialize(cov2, DUMMY_VAR__);
            stan::math::fill(cov2, DUMMY_VAR__);
            current_statement_begin__ = 99;
            validate_non_negative_index("L_cov1", "n1", n1);
            validate_non_negative_index("L_cov1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_cov1(n1, n1);
            stan::math::initialize(L_cov1, DUMMY_VAR__);
            stan::math::fill(L_cov1, DUMMY_VAR__);
            current_statement_begin__ = 100;
            validate_non_negative_index("L_cov2", "n2", n2);
            validate_non_negative_index("L_cov2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_cov2(n2, n2);
            stan::math::initialize(L_cov2, DUMMY_VAR__);
            stan::math::fill(L_cov2, DUMMY_VAR__);
            current_statement_begin__ = 101;
            if (as_bool(logical_eq(kernel, 1))) {
                current_statement_begin__ = 102;
                stan::math::assign(cov1, add(multiply(sigma_f, stan::math::exp(elt_divide(minus(x1dist_squared), (2 * pow(ell, 2))))), diag_matrix(rep_vector(1e-10, n1))));
                current_statement_begin__ = 103;
                stan::math::assign(cov2, add(stan::math::exp(elt_divide(minus(x2dist_squared), (2 * pow(ell, 2)))), diag_matrix(rep_vector(1e-10, n2))));
            } else if (as_bool(logical_eq(kernel, 2))) {
                {
                current_statement_begin__ = 106;
                validate_non_negative_index("poly1", "n1", n1);
                validate_non_negative_index("poly1", "n1", n1);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> poly1(n1, n1);
                stan::math::initialize(poly1, DUMMY_VAR__);
                stan::math::fill(poly1, DUMMY_VAR__);
                current_statement_begin__ = 107;
                validate_non_negative_index("poly2", "n2", n2);
                validate_non_negative_index("poly2", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> poly2(n2, n2);
                stan::math::initialize(poly2, DUMMY_VAR__);
                stan::math::fill(poly2, DUMMY_VAR__);
                current_statement_begin__ = 108;
                if (as_bool(logical_eq(nu_matern, 1))) {
                    current_statement_begin__ = 109;
                    stan::math::assign(poly1, rep_matrix(1, n1, n1));
                    current_statement_begin__ = 110;
                    stan::math::assign(poly2, rep_matrix(1, n2, n2));
                    current_statement_begin__ = 111;
                    stan::math::assign(cov1, add(multiply(sigma_f, elt_multiply(poly1, stan::math::exp(elt_divide(minus(x1dist), ell)))), diag_matrix(rep_vector(1e-10, n1))));
                    current_statement_begin__ = 112;
                    stan::math::assign(cov2, add(elt_multiply(poly2, stan::math::exp(elt_divide(minus(x2dist), ell))), diag_matrix(rep_vector(1e-10, n2))));
                } else if (as_bool(logical_eq(nu_matern, 2))) {
                    current_statement_begin__ = 115;
                    stan::math::assign(poly1, add(1, multiply(stan::math::sqrt(3), elt_divide(x1dist, ell))));
                    current_statement_begin__ = 116;
                    stan::math::assign(poly2, add(1, multiply(stan::math::sqrt(3), elt_divide(x2dist, ell))));
                    current_statement_begin__ = 117;
                    stan::math::assign(cov1, add(multiply(sigma_f, elt_multiply(poly1, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(3)), x1dist), ell)))), diag_matrix(rep_vector(1e-10, n1))));
                    current_statement_begin__ = 118;
                    stan::math::assign(cov2, add(elt_multiply(poly2, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(3)), x2dist), ell))), diag_matrix(rep_vector(1e-10, n2))));
                } else if (as_bool(logical_eq(nu_matern, 3))) {
                    current_statement_begin__ = 121;
                    stan::math::assign(poly1, add(add(1, multiply(stan::math::sqrt(5), elt_divide(x1dist, ell))), multiply((5. / 3.), elt_divide(x1dist_squared, pow(ell, 2)))));
                    current_statement_begin__ = 122;
                    stan::math::assign(poly2, add(add(1, multiply(stan::math::sqrt(5), elt_divide(x2dist, ell))), multiply((5. / 3.), elt_divide(x2dist_squared, pow(ell, 2)))));
                    current_statement_begin__ = 123;
                    stan::math::assign(cov1, add(multiply(sigma_f, elt_multiply(poly1, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(5)), x1dist), ell)))), diag_matrix(rep_vector(1e-10, n1))));
                    current_statement_begin__ = 124;
                    stan::math::assign(cov2, add(elt_multiply(poly2, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(5)), x2dist), ell))), diag_matrix(rep_vector(1e-10, n2))));
                }
                }
            } else if (as_bool(logical_eq(kernel, 3))) {
                current_statement_begin__ = 128;
                stan::math::assign(cov1, add(multiply(sigma_f, stan::math::exp(multiply(-(get_base1(alpha, 1, "alpha", 1)), stan::math::log(add(1, elt_divide(x1dist_squared, ((2 * get_base1(alpha, 1, "alpha", 1)) * pow(ell, 2)))))))), diag_matrix(rep_vector(1e-10, n1))));
                current_statement_begin__ = 129;
                stan::math::assign(cov2, add(stan::math::exp(multiply(-(get_base1(alpha, 1, "alpha", 1)), stan::math::log(add(1, elt_divide(x2dist_squared, ((2 * get_base1(alpha, 1, "alpha", 1)) * pow(ell, 2))))))), diag_matrix(rep_vector(1e-10, n2))));
            }
            current_statement_begin__ = 131;
            stan::math::assign(L_cov1, cholesky_decompose(cov1));
            current_statement_begin__ = 132;
            stan::math::assign(L_cov2, cholesky_decompose(cov2));
            current_statement_begin__ = 133;
            stan::math::assign(GP, kron_mvprod(L_cov1, L_cov2, z, pstream__));
            current_statement_begin__ = 135;
            if (as_bool(est_la)) {
                current_statement_begin__ = 136;
                stan::math::assign(la_1_param, get_base1(la_1, 1, "la_1", 1));
                current_statement_begin__ = 137;
                stan::math::assign(la_2_param, get_base1(la_2, 1, "la_2", 1));
            } else {
                current_statement_begin__ = 139;
                stan::math::assign(la_1_param, 0);
                current_statement_begin__ = 140;
                stan::math::assign(la_2_param, 0);
            }
            current_statement_begin__ = 143;
            for (int j = 1; j <= n1; ++j) {
                current_statement_begin__ = 144;
                stan::model::assign(p01, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (la_1_param + ((1 - la_1_param) / (1 + pow(10, (slope_1 * (get_base1(x1, j, "x1", 1) - log10_ec50_1)))))), 
                            "assigning variable p01");
                current_statement_begin__ = 145;
                for (int i = 1; i <= n2; ++i) {
                    current_statement_begin__ = 146;
                    stan::model::assign(p02, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (la_2_param + ((1 - la_2_param) / (1 + pow(10, (slope_2 * (get_base1(x2, i, "x2", 1) - log10_ec50_2)))))), 
                                "assigning variable p02");
                    current_statement_begin__ = 147;
                    stan::model::assign(p0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(p01, j, "p01", 1) * get_base1(p02, i, "p02", 1)), 
                                "assigning variable p0");
                    current_statement_begin__ = 148;
                    stan::model::assign(B, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(GP, i, j, "GP", 1), 
                                "assigning variable B");
                    current_statement_begin__ = 149;
                    stan::model::assign(Delta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((-(get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp(((b1 * get_base1(B, i, j, "B", 1)) + stan::math::log((get_base1(p0, i, j, "p0", 1) / (1 - get_base1(p0, i, j, "p0", 1)))))))) + ((1 - get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp(((-(b2) * get_base1(B, i, j, "B", 1)) - stan::math::log((get_base1(p0, i, j, "p0", 1) / (1 - get_base1(p0, i, j, "p0", 1))))))))), 
                                "assigning variable Delta");
                }
            }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 81;
            size_t p0_j_1_max__ = n2;
            size_t p0_j_2_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(p0(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: p0" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "p0", p0, 0);
            check_less_or_equal(function__, "p0", p0, 1);
            current_statement_begin__ = 82;
            size_t p01_j_1_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p01(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p01" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p01: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p01", p01, 0);
            check_less_or_equal(function__, "p01", p01, 1);
            current_statement_begin__ = 83;
            size_t p02_j_1_max__ = n2;
            for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(p02(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: p02" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p02: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            check_greater_or_equal(function__, "p02", p02, 0);
            check_less_or_equal(function__, "p02", p02, 1);
            current_statement_begin__ = 84;
            size_t Delta_j_1_max__ = n2;
            size_t Delta_j_2_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(Delta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: Delta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable Delta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "Delta", Delta, -(1));
            check_less_or_equal(function__, "Delta", Delta, 1);
            current_statement_begin__ = 85;
            size_t GP_j_1_max__ = n2;
            size_t GP_j_2_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < GP_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < GP_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(GP(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: GP" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable GP: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 156;
            validate_non_negative_index("f", "(n2 + 1)", (n2 + 1));
            validate_non_negative_index("f", "(n1 + 1)", (n1 + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> f((n2 + 1), (n1 + 1));
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            current_statement_begin__ = 157;
            validate_non_negative_index("fobs", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fobs(N);
            stan::math::initialize(fobs, DUMMY_VAR__);
            stan::math::fill(fobs, DUMMY_VAR__);
            current_statement_begin__ = 158;
            validate_non_negative_index("noise", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> noise(N);
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 159;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable f");
            current_statement_begin__ = 160;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                        p01, 
                        "assigning variable f");
            current_statement_begin__ = 161;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        p02, 
                        "assigning variable f");
            current_statement_begin__ = 162;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                        add(p0, Delta), 
                        "assigning variable f");
            current_statement_begin__ = 167;
            lp_accum__.add(inv_gamma_log(s, get_base1(noise_hypers, 1, "noise_hypers", 1), get_base1(noise_hypers, 2, "noise_hypers", 1)));
            current_statement_begin__ = 168;
            lp_accum__.add(inv_gamma_log(s2_log10_ec50_1, 3, 2));
            current_statement_begin__ = 169;
            lp_accum__.add(inv_gamma_log(s2_log10_ec50_2, 3, 2));
            current_statement_begin__ = 173;
            lp_accum__.add(beta_log(la_1, 1, 1.25));
            current_statement_begin__ = 174;
            lp_accum__.add(beta_log(la_2, 1, 1.25));
            current_statement_begin__ = 175;
            lp_accum__.add(gamma_log(slope_1, 1, 1));
            current_statement_begin__ = 176;
            lp_accum__.add(gamma_log(slope_2, 1, 1));
            current_statement_begin__ = 177;
            lp_accum__.add(std_normal_log(theta_1));
            current_statement_begin__ = 178;
            lp_accum__.add(std_normal_log(theta_2));
            current_statement_begin__ = 179;
            lp_accum__.add(normal_log(log10_ec50_1, theta_1, stan::math::sqrt(s2_log10_ec50_1)));
            current_statement_begin__ = 180;
            lp_accum__.add(normal_log(log10_ec50_2, theta_2, stan::math::sqrt(s2_log10_ec50_2)));
            current_statement_begin__ = 183;
            lp_accum__.add(normal_log(b1, 1, 0.1));
            current_statement_begin__ = 184;
            lp_accum__.add(normal_log(b2, 1, 0.1));
            current_statement_begin__ = 187;
            lp_accum__.add(inv_gamma_log(ell, 5, 5));
            current_statement_begin__ = 188;
            lp_accum__.add(lognormal_log(sigma_f, 1, 1));
            current_statement_begin__ = 189;
            if (as_bool(est_alpha)) {
                current_statement_begin__ = 190;
                lp_accum__.add(gamma_log(alpha, 1, 1));
            }
            current_statement_begin__ = 192;
            lp_accum__.add(std_normal_log(to_vector(z)));
            current_statement_begin__ = 195;
            stan::math::assign(fobs, stan::model::rvalue(to_vector(f), stan::model::cons_list(stan::model::index_multi(ii_obs), stan::model::nil_index_list()), "to_vector(f)"));
            current_statement_begin__ = 196;
            stan::math::assign(noise, multiply(s, stan::math::sqrt(add(fobs, lambda))));
            current_statement_begin__ = 197;
            if (as_bool(heteroscedastic)) {
                current_statement_begin__ = 198;
                lp_accum__.add(normal_log(y, fobs, noise));
            } else {
                current_statement_begin__ = 200;
                lp_accum__.add(normal_log(y, fobs, s));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("la_1");
        names__.push_back("la_2");
        names__.push_back("log10_ec50_1");
        names__.push_back("log10_ec50_2");
        names__.push_back("theta_1");
        names__.push_back("theta_2");
        names__.push_back("slope_1");
        names__.push_back("slope_2");
        names__.push_back("b1");
        names__.push_back("b2");
        names__.push_back("ell");
        names__.push_back("sigma_f");
        names__.push_back("alpha");
        names__.push_back("z");
        names__.push_back("s");
        names__.push_back("s2_log10_ec50_1");
        names__.push_back("s2_log10_ec50_2");
        names__.push_back("p0");
        names__.push_back("p01");
        names__.push_back("p02");
        names__.push_back("Delta");
        names__.push_back("GP");
        names__.push_back("ec50_1");
        names__.push_back("ec50_2");
        names__.push_back("CPO");
        names__.push_back("dss_1");
        names__.push_back("dss_2");
        names__.push_back("rVUS_f");
        names__.push_back("rVUS_p0");
        names__.push_back("VUS_Delta");
        names__.push_back("VUS_syn");
        names__.push_back("VUS_ant");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((est_la ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((est_la ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((est_alpha ? 1 : 0 ));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n2);
        dims__.push_back(n1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_gp_grid_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        std::vector<double> la_1;
        size_t la_1_d_0_max__ = (est_la ? 1 : 0 );
        la_1.reserve(la_1_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < la_1_d_0_max__; ++d_0__) {
            la_1.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            vars__.push_back(la_1[k_0__]);
        }
        std::vector<double> la_2;
        size_t la_2_d_0_max__ = (est_la ? 1 : 0 );
        la_2.reserve(la_2_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < la_2_d_0_max__; ++d_0__) {
            la_2.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            vars__.push_back(la_2[k_0__]);
        }
        double log10_ec50_1 = in__.scalar_constrain();
        vars__.push_back(log10_ec50_1);
        double log10_ec50_2 = in__.scalar_constrain();
        vars__.push_back(log10_ec50_2);
        double theta_1 = in__.scalar_constrain();
        vars__.push_back(theta_1);
        double theta_2 = in__.scalar_constrain();
        vars__.push_back(theta_2);
        double slope_1 = in__.scalar_lb_constrain(0);
        vars__.push_back(slope_1);
        double slope_2 = in__.scalar_lb_constrain(0);
        vars__.push_back(slope_2);
        double b1 = in__.scalar_lb_constrain(0);
        vars__.push_back(b1);
        double b2 = in__.scalar_lb_constrain(0);
        vars__.push_back(b2);
        double ell = in__.scalar_lb_constrain(0);
        vars__.push_back(ell);
        double sigma_f = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_f);
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = (est_alpha ? 1 : 0 );
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_lb_constrain(0));
        }
        size_t alpha_k_0_max__ = (est_alpha ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> z = in__.matrix_constrain(n2, n1);
        size_t z_j_2_max__ = n1;
        size_t z_j_1_max__ = n2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                vars__.push_back(z(j_1__, j_2__));
            }
        }
        double s = in__.scalar_lb_constrain(0);
        vars__.push_back(s);
        double s2_log10_ec50_1 = in__.scalar_lb_constrain(0);
        vars__.push_back(s2_log10_ec50_1);
        double s2_log10_ec50_2 = in__.scalar_lb_constrain(0);
        vars__.push_back(s2_log10_ec50_2);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 81;
            validate_non_negative_index("p0", "n2", n2);
            validate_non_negative_index("p0", "n1", n1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> p0(n2, n1);
            stan::math::initialize(p0, DUMMY_VAR__);
            stan::math::fill(p0, DUMMY_VAR__);
            current_statement_begin__ = 82;
            validate_non_negative_index("p01", "n1", n1);
            Eigen::Matrix<double, 1, Eigen::Dynamic> p01(n1);
            stan::math::initialize(p01, DUMMY_VAR__);
            stan::math::fill(p01, DUMMY_VAR__);
            current_statement_begin__ = 83;
            validate_non_negative_index("p02", "n2", n2);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p02(n2);
            stan::math::initialize(p02, DUMMY_VAR__);
            stan::math::fill(p02, DUMMY_VAR__);
            current_statement_begin__ = 84;
            validate_non_negative_index("Delta", "n2", n2);
            validate_non_negative_index("Delta", "n1", n1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Delta(n2, n1);
            stan::math::initialize(Delta, DUMMY_VAR__);
            stan::math::fill(Delta, DUMMY_VAR__);
            current_statement_begin__ = 85;
            validate_non_negative_index("GP", "n2", n2);
            validate_non_negative_index("GP", "n1", n1);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> GP(n2, n1);
            stan::math::initialize(GP, DUMMY_VAR__);
            stan::math::fill(GP, DUMMY_VAR__);
            // do transformed parameters statements
            {
            current_statement_begin__ = 88;
            local_scalar_t__ la_1_param(DUMMY_VAR__);
            (void) la_1_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_1_param, DUMMY_VAR__);
            stan::math::fill(la_1_param, DUMMY_VAR__);
            current_statement_begin__ = 89;
            local_scalar_t__ la_2_param(DUMMY_VAR__);
            (void) la_2_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_2_param, DUMMY_VAR__);
            stan::math::fill(la_2_param, DUMMY_VAR__);
            current_statement_begin__ = 94;
            validate_non_negative_index("B", "n2", n2);
            validate_non_negative_index("B", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> B(n2, n1);
            stan::math::initialize(B, DUMMY_VAR__);
            stan::math::fill(B, DUMMY_VAR__);
            current_statement_begin__ = 97;
            validate_non_negative_index("cov1", "n1", n1);
            validate_non_negative_index("cov1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov1(n1, n1);
            stan::math::initialize(cov1, DUMMY_VAR__);
            stan::math::fill(cov1, DUMMY_VAR__);
            current_statement_begin__ = 98;
            validate_non_negative_index("cov2", "n2", n2);
            validate_non_negative_index("cov2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> cov2(n2, n2);
            stan::math::initialize(cov2, DUMMY_VAR__);
            stan::math::fill(cov2, DUMMY_VAR__);
            current_statement_begin__ = 99;
            validate_non_negative_index("L_cov1", "n1", n1);
            validate_non_negative_index("L_cov1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_cov1(n1, n1);
            stan::math::initialize(L_cov1, DUMMY_VAR__);
            stan::math::fill(L_cov1, DUMMY_VAR__);
            current_statement_begin__ = 100;
            validate_non_negative_index("L_cov2", "n2", n2);
            validate_non_negative_index("L_cov2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> L_cov2(n2, n2);
            stan::math::initialize(L_cov2, DUMMY_VAR__);
            stan::math::fill(L_cov2, DUMMY_VAR__);
            current_statement_begin__ = 101;
            if (as_bool(logical_eq(kernel, 1))) {
                current_statement_begin__ = 102;
                stan::math::assign(cov1, add(multiply(sigma_f, stan::math::exp(elt_divide(minus(x1dist_squared), (2 * pow(ell, 2))))), diag_matrix(rep_vector(1e-10, n1))));
                current_statement_begin__ = 103;
                stan::math::assign(cov2, add(stan::math::exp(elt_divide(minus(x2dist_squared), (2 * pow(ell, 2)))), diag_matrix(rep_vector(1e-10, n2))));
            } else if (as_bool(logical_eq(kernel, 2))) {
                {
                current_statement_begin__ = 106;
                validate_non_negative_index("poly1", "n1", n1);
                validate_non_negative_index("poly1", "n1", n1);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> poly1(n1, n1);
                stan::math::initialize(poly1, DUMMY_VAR__);
                stan::math::fill(poly1, DUMMY_VAR__);
                current_statement_begin__ = 107;
                validate_non_negative_index("poly2", "n2", n2);
                validate_non_negative_index("poly2", "n2", n2);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> poly2(n2, n2);
                stan::math::initialize(poly2, DUMMY_VAR__);
                stan::math::fill(poly2, DUMMY_VAR__);
                current_statement_begin__ = 108;
                if (as_bool(logical_eq(nu_matern, 1))) {
                    current_statement_begin__ = 109;
                    stan::math::assign(poly1, rep_matrix(1, n1, n1));
                    current_statement_begin__ = 110;
                    stan::math::assign(poly2, rep_matrix(1, n2, n2));
                    current_statement_begin__ = 111;
                    stan::math::assign(cov1, add(multiply(sigma_f, elt_multiply(poly1, stan::math::exp(elt_divide(minus(x1dist), ell)))), diag_matrix(rep_vector(1e-10, n1))));
                    current_statement_begin__ = 112;
                    stan::math::assign(cov2, add(elt_multiply(poly2, stan::math::exp(elt_divide(minus(x2dist), ell))), diag_matrix(rep_vector(1e-10, n2))));
                } else if (as_bool(logical_eq(nu_matern, 2))) {
                    current_statement_begin__ = 115;
                    stan::math::assign(poly1, add(1, multiply(stan::math::sqrt(3), elt_divide(x1dist, ell))));
                    current_statement_begin__ = 116;
                    stan::math::assign(poly2, add(1, multiply(stan::math::sqrt(3), elt_divide(x2dist, ell))));
                    current_statement_begin__ = 117;
                    stan::math::assign(cov1, add(multiply(sigma_f, elt_multiply(poly1, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(3)), x1dist), ell)))), diag_matrix(rep_vector(1e-10, n1))));
                    current_statement_begin__ = 118;
                    stan::math::assign(cov2, add(elt_multiply(poly2, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(3)), x2dist), ell))), diag_matrix(rep_vector(1e-10, n2))));
                } else if (as_bool(logical_eq(nu_matern, 3))) {
                    current_statement_begin__ = 121;
                    stan::math::assign(poly1, add(add(1, multiply(stan::math::sqrt(5), elt_divide(x1dist, ell))), multiply((5. / 3.), elt_divide(x1dist_squared, pow(ell, 2)))));
                    current_statement_begin__ = 122;
                    stan::math::assign(poly2, add(add(1, multiply(stan::math::sqrt(5), elt_divide(x2dist, ell))), multiply((5. / 3.), elt_divide(x2dist_squared, pow(ell, 2)))));
                    current_statement_begin__ = 123;
                    stan::math::assign(cov1, add(multiply(sigma_f, elt_multiply(poly1, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(5)), x1dist), ell)))), diag_matrix(rep_vector(1e-10, n1))));
                    current_statement_begin__ = 124;
                    stan::math::assign(cov2, add(elt_multiply(poly2, stan::math::exp(elt_divide(multiply(-(stan::math::sqrt(5)), x2dist), ell))), diag_matrix(rep_vector(1e-10, n2))));
                }
                }
            } else if (as_bool(logical_eq(kernel, 3))) {
                current_statement_begin__ = 128;
                stan::math::assign(cov1, add(multiply(sigma_f, stan::math::exp(multiply(-(get_base1(alpha, 1, "alpha", 1)), stan::math::log(add(1, elt_divide(x1dist_squared, ((2 * get_base1(alpha, 1, "alpha", 1)) * pow(ell, 2)))))))), diag_matrix(rep_vector(1e-10, n1))));
                current_statement_begin__ = 129;
                stan::math::assign(cov2, add(stan::math::exp(multiply(-(get_base1(alpha, 1, "alpha", 1)), stan::math::log(add(1, elt_divide(x2dist_squared, ((2 * get_base1(alpha, 1, "alpha", 1)) * pow(ell, 2))))))), diag_matrix(rep_vector(1e-10, n2))));
            }
            current_statement_begin__ = 131;
            stan::math::assign(L_cov1, cholesky_decompose(cov1));
            current_statement_begin__ = 132;
            stan::math::assign(L_cov2, cholesky_decompose(cov2));
            current_statement_begin__ = 133;
            stan::math::assign(GP, kron_mvprod(L_cov1, L_cov2, z, pstream__));
            current_statement_begin__ = 135;
            if (as_bool(est_la)) {
                current_statement_begin__ = 136;
                stan::math::assign(la_1_param, get_base1(la_1, 1, "la_1", 1));
                current_statement_begin__ = 137;
                stan::math::assign(la_2_param, get_base1(la_2, 1, "la_2", 1));
            } else {
                current_statement_begin__ = 139;
                stan::math::assign(la_1_param, 0);
                current_statement_begin__ = 140;
                stan::math::assign(la_2_param, 0);
            }
            current_statement_begin__ = 143;
            for (int j = 1; j <= n1; ++j) {
                current_statement_begin__ = 144;
                stan::model::assign(p01, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (la_1_param + ((1 - la_1_param) / (1 + pow(10, (slope_1 * (get_base1(x1, j, "x1", 1) - log10_ec50_1)))))), 
                            "assigning variable p01");
                current_statement_begin__ = 145;
                for (int i = 1; i <= n2; ++i) {
                    current_statement_begin__ = 146;
                    stan::model::assign(p02, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                (la_2_param + ((1 - la_2_param) / (1 + pow(10, (slope_2 * (get_base1(x2, i, "x2", 1) - log10_ec50_2)))))), 
                                "assigning variable p02");
                    current_statement_begin__ = 147;
                    stan::model::assign(p0, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(p01, j, "p01", 1) * get_base1(p02, i, "p02", 1)), 
                                "assigning variable p0");
                    current_statement_begin__ = 148;
                    stan::model::assign(B, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(GP, i, j, "GP", 1), 
                                "assigning variable B");
                    current_statement_begin__ = 149;
                    stan::model::assign(Delta, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                ((-(get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp(((b1 * get_base1(B, i, j, "B", 1)) + stan::math::log((get_base1(p0, i, j, "p0", 1) / (1 - get_base1(p0, i, j, "p0", 1)))))))) + ((1 - get_base1(p0, i, j, "p0", 1)) / (1 + stan::math::exp(((-(b2) * get_base1(B, i, j, "B", 1)) - stan::math::log((get_base1(p0, i, j, "p0", 1) / (1 - get_base1(p0, i, j, "p0", 1))))))))), 
                                "assigning variable Delta");
                }
            }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 81;
            check_greater_or_equal(function__, "p0", p0, 0);
            check_less_or_equal(function__, "p0", p0, 1);
            current_statement_begin__ = 82;
            check_greater_or_equal(function__, "p01", p01, 0);
            check_less_or_equal(function__, "p01", p01, 1);
            current_statement_begin__ = 83;
            check_greater_or_equal(function__, "p02", p02, 0);
            check_less_or_equal(function__, "p02", p02, 1);
            current_statement_begin__ = 84;
            check_greater_or_equal(function__, "Delta", Delta, -(1));
            check_less_or_equal(function__, "Delta", Delta, 1);
            // write transformed parameters
            if (include_tparams__) {
                size_t p0_j_2_max__ = n1;
                size_t p0_j_1_max__ = n2;
                for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                        vars__.push_back(p0(j_1__, j_2__));
                    }
                }
                size_t p01_j_1_max__ = n1;
                for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                    vars__.push_back(p01(j_1__));
                }
                size_t p02_j_1_max__ = n2;
                for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                    vars__.push_back(p02(j_1__));
                }
                size_t Delta_j_2_max__ = n1;
                size_t Delta_j_1_max__ = n2;
                for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                        vars__.push_back(Delta(j_1__, j_2__));
                    }
                }
                size_t GP_j_2_max__ = n1;
                size_t GP_j_1_max__ = n2;
                for (size_t j_2__ = 0; j_2__ < GP_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < GP_j_1_max__; ++j_1__) {
                        vars__.push_back(GP(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 204;
            double ec50_1;
            (void) ec50_1;  // dummy to suppress unused var warning
            stan::math::initialize(ec50_1, DUMMY_VAR__);
            stan::math::fill(ec50_1, DUMMY_VAR__);
            current_statement_begin__ = 205;
            double ec50_2;
            (void) ec50_2;  // dummy to suppress unused var warning
            stan::math::initialize(ec50_2, DUMMY_VAR__);
            stan::math::fill(ec50_2, DUMMY_VAR__);
            current_statement_begin__ = 206;
            validate_non_negative_index("CPO", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> CPO(N);
            stan::math::initialize(CPO, DUMMY_VAR__);
            stan::math::fill(CPO, DUMMY_VAR__);
            stan::math::assign(CPO,rep_vector(0, N));
            current_statement_begin__ = 207;
            double dss_1;
            (void) dss_1;  // dummy to suppress unused var warning
            stan::math::initialize(dss_1, DUMMY_VAR__);
            stan::math::fill(dss_1, DUMMY_VAR__);
            stan::math::assign(dss_1,0);
            current_statement_begin__ = 208;
            double dss_2;
            (void) dss_2;  // dummy to suppress unused var warning
            stan::math::initialize(dss_2, DUMMY_VAR__);
            stan::math::fill(dss_2, DUMMY_VAR__);
            stan::math::assign(dss_2,0);
            current_statement_begin__ = 209;
            double rVUS_f;
            (void) rVUS_f;  // dummy to suppress unused var warning
            stan::math::initialize(rVUS_f, DUMMY_VAR__);
            stan::math::fill(rVUS_f, DUMMY_VAR__);
            stan::math::assign(rVUS_f,0);
            current_statement_begin__ = 210;
            double rVUS_p0;
            (void) rVUS_p0;  // dummy to suppress unused var warning
            stan::math::initialize(rVUS_p0, DUMMY_VAR__);
            stan::math::fill(rVUS_p0, DUMMY_VAR__);
            stan::math::assign(rVUS_p0,0);
            current_statement_begin__ = 211;
            double VUS_Delta;
            (void) VUS_Delta;  // dummy to suppress unused var warning
            stan::math::initialize(VUS_Delta, DUMMY_VAR__);
            stan::math::fill(VUS_Delta, DUMMY_VAR__);
            stan::math::assign(VUS_Delta,0);
            current_statement_begin__ = 212;
            double VUS_syn;
            (void) VUS_syn;  // dummy to suppress unused var warning
            stan::math::initialize(VUS_syn, DUMMY_VAR__);
            stan::math::fill(VUS_syn, DUMMY_VAR__);
            stan::math::assign(VUS_syn,0);
            current_statement_begin__ = 213;
            double VUS_ant;
            (void) VUS_ant;  // dummy to suppress unused var warning
            stan::math::initialize(VUS_ant, DUMMY_VAR__);
            stan::math::fill(VUS_ant, DUMMY_VAR__);
            stan::math::assign(VUS_ant,0);
            // generated quantities statements
            {
            current_statement_begin__ = 217;
            validate_non_negative_index("f", "(n2 + 1)", (n2 + 1));
            validate_non_negative_index("f", "(n1 + 1)", (n1 + 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> f((n2 + 1), (n1 + 1));
            stan::math::initialize(f, DUMMY_VAR__);
            stan::math::fill(f, DUMMY_VAR__);
            current_statement_begin__ = 218;
            validate_non_negative_index("fc_interior", "n2", n2);
            validate_non_negative_index("fc_interior", "n1", n1);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> fc_interior(n2, n1);
            stan::math::initialize(fc_interior, DUMMY_VAR__);
            stan::math::fill(fc_interior, DUMMY_VAR__);
            current_statement_begin__ = 219;
            validate_non_negative_index("fobs", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> fobs(N);
            stan::math::initialize(fobs, DUMMY_VAR__);
            stan::math::fill(fobs, DUMMY_VAR__);
            current_statement_begin__ = 220;
            validate_non_negative_index("noise", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> noise(N);
            stan::math::initialize(noise, DUMMY_VAR__);
            stan::math::fill(noise, DUMMY_VAR__);
            current_statement_begin__ = 221;
            local_scalar_t__ la_1_param(DUMMY_VAR__);
            (void) la_1_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_1_param, DUMMY_VAR__);
            stan::math::fill(la_1_param, DUMMY_VAR__);
            current_statement_begin__ = 222;
            local_scalar_t__ la_2_param(DUMMY_VAR__);
            (void) la_2_param;  // dummy to suppress unused var warning
            stan::math::initialize(la_2_param, DUMMY_VAR__);
            stan::math::fill(la_2_param, DUMMY_VAR__);
            current_statement_begin__ = 223;
            local_scalar_t__ c11(DUMMY_VAR__);
            (void) c11;  // dummy to suppress unused var warning
            stan::math::initialize(c11, DUMMY_VAR__);
            stan::math::fill(c11, DUMMY_VAR__);
            stan::math::assign(c11,min(x1));
            current_statement_begin__ = 224;
            local_scalar_t__ c12(DUMMY_VAR__);
            (void) c12;  // dummy to suppress unused var warning
            stan::math::initialize(c12, DUMMY_VAR__);
            stan::math::fill(c12, DUMMY_VAR__);
            stan::math::assign(c12,max(x1));
            current_statement_begin__ = 225;
            local_scalar_t__ c21(DUMMY_VAR__);
            (void) c21;  // dummy to suppress unused var warning
            stan::math::initialize(c21, DUMMY_VAR__);
            stan::math::fill(c21, DUMMY_VAR__);
            stan::math::assign(c21,min(x2));
            current_statement_begin__ = 226;
            local_scalar_t__ c22(DUMMY_VAR__);
            (void) c22;  // dummy to suppress unused var warning
            stan::math::initialize(c22, DUMMY_VAR__);
            stan::math::fill(c22, DUMMY_VAR__);
            stan::math::assign(c22,max(x2));
            current_statement_begin__ = 227;
            validate_non_negative_index("B_rVUS", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rVUS(n2);
            stan::math::initialize(B_rVUS, DUMMY_VAR__);
            stan::math::fill(B_rVUS, DUMMY_VAR__);
            current_statement_begin__ = 228;
            validate_non_negative_index("B_rVUS_p0", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_rVUS_p0(n2);
            stan::math::initialize(B_rVUS_p0, DUMMY_VAR__);
            stan::math::fill(B_rVUS_p0, DUMMY_VAR__);
            current_statement_begin__ = 229;
            validate_non_negative_index("B_Delta", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_Delta(n2);
            stan::math::initialize(B_Delta, DUMMY_VAR__);
            stan::math::fill(B_Delta, DUMMY_VAR__);
            current_statement_begin__ = 230;
            validate_non_negative_index("B_syn", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_syn(n2);
            stan::math::initialize(B_syn, DUMMY_VAR__);
            stan::math::fill(B_syn, DUMMY_VAR__);
            current_statement_begin__ = 231;
            validate_non_negative_index("B_ant", "n2", n2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> B_ant(n2);
            stan::math::initialize(B_ant, DUMMY_VAR__);
            stan::math::fill(B_ant, DUMMY_VAR__);
            current_statement_begin__ = 233;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        1, 
                        "assigning variable f");
            current_statement_begin__ = 234;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                        p01, 
                        "assigning variable f");
            current_statement_begin__ = 235;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        p02, 
                        "assigning variable f");
            current_statement_begin__ = 236;
            stan::model::assign(f, 
                        stan::model::cons_list(stan::model::index_min_max(2, (n2 + 1)), stan::model::cons_list(stan::model::index_min_max(2, (n1 + 1)), stan::model::nil_index_list())), 
                        add(p0, Delta), 
                        "assigning variable f");
            current_statement_begin__ = 237;
            stan::model::assign(fc_interior, 
                        stan::model::cons_list(stan::model::index_min_max(1, n2), stan::model::cons_list(stan::model::index_min_max(1, n1), stan::model::nil_index_list())), 
                        subtract(1, add(p0, Delta)), 
                        "assigning variable fc_interior");
            current_statement_begin__ = 241;
            stan::math::assign(fobs, stan::model::rvalue(to_vector(f), stan::model::cons_list(stan::model::index_multi(ii_obs), stan::model::nil_index_list()), "to_vector(f)"));
            current_statement_begin__ = 242;
            stan::math::assign(noise, multiply(s, stan::math::sqrt(add(fobs, lambda))));
            current_statement_begin__ = 243;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 244;
                if (as_bool(heteroscedastic)) {
                    current_statement_begin__ = 245;
                    stan::model::assign(CPO, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::exp(-(normal_log(get_base1(y, i, "y", 1), get_base1(fobs, i, "fobs", 1), get_base1(noise, i, "noise", 1)))), 
                                "assigning variable CPO");
                } else {
                    current_statement_begin__ = 247;
                    stan::model::assign(CPO, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                                stan::math::exp(-(normal_log(get_base1(y, i, "y", 1), get_base1(fobs, i, "fobs", 1), s))), 
                                "assigning variable CPO");
                }
            }
            current_statement_begin__ = 251;
            stan::math::assign(ec50_1, pow(10, log10_ec50_1));
            current_statement_begin__ = 252;
            stan::math::assign(ec50_2, pow(10, log10_ec50_2));
            current_statement_begin__ = 254;
            if (as_bool(est_la)) {
                current_statement_begin__ = 255;
                stan::math::assign(la_1_param, get_base1(la_1, 1, "la_1", 1));
                current_statement_begin__ = 256;
                stan::math::assign(la_2_param, get_base1(la_2, 1, "la_2", 1));
            } else {
                current_statement_begin__ = 258;
                stan::math::assign(la_1_param, 0);
                current_statement_begin__ = 259;
                stan::math::assign(la_2_param, 0);
            }
            current_statement_begin__ = 261;
            stan::math::assign(dss_1, ((c12 - c11) + (((la_1_param - 1) / slope_1) * (stan::math::log10((1 + pow(10, (slope_1 * (c12 - log10_ec50_1))))) - stan::math::log10((1 + pow(10, (slope_1 * (c11 - log10_ec50_1)))))))));
            current_statement_begin__ = 262;
            stan::math::assign(dss_1, (100 * (1 - (dss_1 / (c12 - c11)))));
            current_statement_begin__ = 263;
            stan::math::assign(dss_2, ((c22 - c21) + (((la_2_param - 1) / slope_2) * (stan::math::log10((1 + pow(10, (slope_2 * (c22 - log10_ec50_2))))) - stan::math::log10((1 + pow(10, (slope_2 * (c21 - log10_ec50_2)))))))));
            current_statement_begin__ = 264;
            stan::math::assign(dss_2, (100 * (1 - (dss_2 / (c22 - c21)))));
            current_statement_begin__ = 267;
            for (int i = 1; i <= n2; ++i) {
                {
                current_statement_begin__ = 268;
                local_scalar_t__ b_rVUS(DUMMY_VAR__);
                (void) b_rVUS;  // dummy to suppress unused var warning
                stan::math::initialize(b_rVUS, DUMMY_VAR__);
                stan::math::fill(b_rVUS, DUMMY_VAR__);
                stan::math::assign(b_rVUS,0);
                current_statement_begin__ = 269;
                local_scalar_t__ b_rVUS_p0(DUMMY_VAR__);
                (void) b_rVUS_p0;  // dummy to suppress unused var warning
                stan::math::initialize(b_rVUS_p0, DUMMY_VAR__);
                stan::math::fill(b_rVUS_p0, DUMMY_VAR__);
                stan::math::assign(b_rVUS_p0,0);
                current_statement_begin__ = 270;
                local_scalar_t__ b_Delta(DUMMY_VAR__);
                (void) b_Delta;  // dummy to suppress unused var warning
                stan::math::initialize(b_Delta, DUMMY_VAR__);
                stan::math::fill(b_Delta, DUMMY_VAR__);
                stan::math::assign(b_Delta,0);
                current_statement_begin__ = 271;
                local_scalar_t__ b_syn(DUMMY_VAR__);
                (void) b_syn;  // dummy to suppress unused var warning
                stan::math::initialize(b_syn, DUMMY_VAR__);
                stan::math::fill(b_syn, DUMMY_VAR__);
                stan::math::assign(b_syn,0);
                current_statement_begin__ = 272;
                local_scalar_t__ b_ant(DUMMY_VAR__);
                (void) b_ant;  // dummy to suppress unused var warning
                stan::math::initialize(b_ant, DUMMY_VAR__);
                stan::math::fill(b_ant, DUMMY_VAR__);
                stan::math::assign(b_ant,0);
                current_statement_begin__ = 273;
                for (int j = 2; j <= n1; ++j) {
                    current_statement_begin__ = 274;
                    stan::math::assign(b_rVUS, (b_rVUS + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (get_base1(fc_interior, i, j, "fc_interior", 1) + get_base1(fc_interior, i, (j - 1), "fc_interior", 1))) / 2)));
                    current_statement_begin__ = 275;
                    stan::math::assign(b_rVUS_p0, (b_rVUS_p0 + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * ((1 - get_base1(p0, i, j, "p0", 1)) + (1 - get_base1(p0, i, (j - 1), "p0", 1)))) / 2)));
                    current_statement_begin__ = 276;
                    stan::math::assign(b_Delta, (b_Delta + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (get_base1(Delta, i, j, "Delta", 1) + get_base1(Delta, i, (j - 1), "Delta", 1))) / 2)));
                    current_statement_begin__ = 277;
                    stan::math::assign(b_syn, (b_syn + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (stan::math::fmin(get_base1(Delta, i, j, "Delta", 1), 0) + stan::math::fmin(get_base1(Delta, i, (j - 1), "Delta", 1), 0))) / 2)));
                    current_statement_begin__ = 278;
                    stan::math::assign(b_ant, (b_ant + (((get_base1(x1, j, "x1", 1) - get_base1(x1, (j - 1), "x1", 1)) * (stan::math::fmax(get_base1(Delta, i, j, "Delta", 1), 0) + stan::math::fmax(get_base1(Delta, i, (j - 1), "Delta", 1), 0))) / 2)));
                }
                current_statement_begin__ = 280;
                stan::model::assign(B_rVUS, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_rVUS, 
                            "assigning variable B_rVUS");
                current_statement_begin__ = 281;
                stan::model::assign(B_rVUS_p0, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_rVUS_p0, 
                            "assigning variable B_rVUS_p0");
                current_statement_begin__ = 282;
                stan::model::assign(B_Delta, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_Delta, 
                            "assigning variable B_Delta");
                current_statement_begin__ = 283;
                stan::model::assign(B_syn, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_syn, 
                            "assigning variable B_syn");
                current_statement_begin__ = 284;
                stan::model::assign(B_ant, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            b_ant, 
                            "assigning variable B_ant");
                current_statement_begin__ = 285;
                if (as_bool(logical_gt(i, 1))) {
                    current_statement_begin__ = 286;
                    stan::math::assign(rVUS_f, (rVUS_f + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_rVUS, i, "B_rVUS", 1) + get_base1(B_rVUS, (i - 1), "B_rVUS", 1))) / 2)));
                    current_statement_begin__ = 287;
                    stan::math::assign(rVUS_p0, (rVUS_p0 + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_rVUS_p0, i, "B_rVUS_p0", 1) + get_base1(B_rVUS_p0, (i - 1), "B_rVUS_p0", 1))) / 2)));
                    current_statement_begin__ = 288;
                    stan::math::assign(VUS_Delta, (VUS_Delta + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_Delta, i, "B_Delta", 1) + get_base1(B_Delta, (i - 1), "B_Delta", 1))) / 2)));
                    current_statement_begin__ = 289;
                    stan::math::assign(VUS_syn, (VUS_syn + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_syn, i, "B_syn", 1) + get_base1(B_syn, (i - 1), "B_syn", 1))) / 2)));
                    current_statement_begin__ = 290;
                    stan::math::assign(VUS_ant, (VUS_ant + (((get_base1(x2, i, "x2", 1) - get_base1(x2, (i - 1), "x2", 1)) * (get_base1(B_ant, i, "B_ant", 1) + get_base1(B_ant, (i - 1), "B_ant", 1))) / 2)));
                }
                }
            }
            current_statement_begin__ = 294;
            stan::math::assign(rVUS_f, ((100 * rVUS_f) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 295;
            stan::math::assign(rVUS_p0, ((100 * rVUS_p0) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 296;
            stan::math::assign(VUS_Delta, ((100 * VUS_Delta) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 297;
            stan::math::assign(VUS_syn, ((100 * VUS_syn) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 298;
            stan::math::assign(VUS_ant, ((100 * VUS_ant) / ((max(x1) - min(x1)) * (max(x2) - min(x2)))));
            current_statement_begin__ = 300;
            if (as_bool(logical_eq(rVUS_f, 0))) {
                current_statement_begin__ = 300;
                stan::math::assign(rVUS_f, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            current_statement_begin__ = 301;
            if (as_bool(logical_eq(rVUS_p0, 0))) {
                current_statement_begin__ = 301;
                stan::math::assign(rVUS_p0, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            current_statement_begin__ = 302;
            if (as_bool(logical_eq(VUS_syn, 0))) {
                current_statement_begin__ = 302;
                stan::math::assign(VUS_syn, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            current_statement_begin__ = 303;
            if (as_bool(logical_eq(VUS_ant, 0))) {
                current_statement_begin__ = 303;
                stan::math::assign(VUS_ant, uniform_rng(1e-6, 1e-4, base_rng__));
            }
            }
            // validate, write generated quantities
            current_statement_begin__ = 204;
            vars__.push_back(ec50_1);
            current_statement_begin__ = 205;
            vars__.push_back(ec50_2);
            current_statement_begin__ = 206;
            size_t CPO_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < CPO_j_1_max__; ++j_1__) {
                vars__.push_back(CPO(j_1__));
            }
            current_statement_begin__ = 207;
            vars__.push_back(dss_1);
            current_statement_begin__ = 208;
            vars__.push_back(dss_2);
            current_statement_begin__ = 209;
            vars__.push_back(rVUS_f);
            current_statement_begin__ = 210;
            vars__.push_back(rVUS_p0);
            current_statement_begin__ = 211;
            vars__.push_back(VUS_Delta);
            current_statement_begin__ = 212;
            vars__.push_back(VUS_syn);
            current_statement_begin__ = 213;
            vars__.push_back(VUS_ant);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_gp_grid";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ell";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_f";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_k_0_max__ = (est_alpha ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_2_max__ = n1;
        size_t z_j_1_max__ = n2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p0_j_2_max__ = n1;
            size_t p0_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p01_j_1_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p01" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p02_j_1_max__ = n2;
            for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p02" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Delta_j_2_max__ = n1;
            size_t Delta_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Delta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t GP_j_2_max__ = n1;
            size_t GP_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < GP_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < GP_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "GP" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_2";
        param_names__.push_back(param_name_stream__.str());
        size_t CPO_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < CPO_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CPO" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_p0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_Delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_ant";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t la_1_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_1_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_1" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t la_2_k_0_max__ = (est_la ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < la_2_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "la_2" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "slope_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ell";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_f";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_k_0_max__ = (est_alpha ? 1 : 0 );
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_j_2_max__ = n1;
        size_t z_j_1_max__ = n2;
        for (size_t j_2__ = 0; j_2__ < z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "s";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "s2_log10_ec50_2";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t p0_j_2_max__ = n1;
            size_t p0_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < p0_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < p0_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p0" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p01_j_1_max__ = n1;
            for (size_t j_1__ = 0; j_1__ < p01_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p01" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t p02_j_1_max__ = n2;
            for (size_t j_1__ = 0; j_1__ < p02_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "p02" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t Delta_j_2_max__ = n1;
            size_t Delta_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < Delta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Delta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "Delta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t GP_j_2_max__ = n1;
            size_t GP_j_1_max__ = n2;
            for (size_t j_2__ = 0; j_2__ < GP_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < GP_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "GP" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "ec50_2";
        param_names__.push_back(param_name_stream__.str());
        size_t CPO_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < CPO_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "CPO" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "dss_2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_f";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "rVUS_p0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_Delta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_syn";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "VUS_ant";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_gp_grid_namespace::model_gp_grid stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
