// Generated by rstantools.  Do not edit by hand.

/*
    BayesIntComp is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesIntComp is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesIntComp.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_gp_grid_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'gp_grid', line 138, column 2 to column 45)",
                                                      " (in 'gp_grid', line 139, column 2 to column 45)",
                                                      " (in 'gp_grid', line 140, column 2 to column 20)",
                                                      " (in 'gp_grid', line 141, column 2 to column 20)",
                                                      " (in 'gp_grid', line 142, column 2 to column 15)",
                                                      " (in 'gp_grid', line 143, column 2 to column 15)",
                                                      " (in 'gp_grid', line 144, column 2 to column 24)",
                                                      " (in 'gp_grid', line 145, column 2 to column 24)",
                                                      " (in 'gp_grid', line 147, column 2 to column 19)",
                                                      " (in 'gp_grid', line 148, column 2 to column 19)",
                                                      " (in 'gp_grid', line 150, column 2 to column 20)",
                                                      " (in 'gp_grid', line 151, column 2 to column 24)",
                                                      " (in 'gp_grid', line 152, column 2 to column 41)",
                                                      " (in 'gp_grid', line 153, column 2 to column 18)",
                                                      " (in 'gp_grid', line 155, column 2 to column 18)",
                                                      " (in 'gp_grid', line 156, column 2 to column 32)",
                                                      " (in 'gp_grid', line 157, column 2 to column 32)",
                                                      " (in 'gp_grid', line 160, column 2 to column 37)",
                                                      " (in 'gp_grid', line 161, column 2 to column 39)",
                                                      " (in 'gp_grid', line 162, column 2 to column 35)",
                                                      " (in 'gp_grid', line 163, column 2 to column 40)",
                                                      " (in 'gp_grid', line 164, column 2 to column 19)",
                                                      " (in 'gp_grid', line 166, column 4 to column 20)",
                                                      " (in 'gp_grid', line 167, column 4 to column 20)",
                                                      " (in 'gp_grid', line 168, column 11 to column 13)",
                                                      " (in 'gp_grid', line 168, column 14 to column 16)",
                                                      " (in 'gp_grid', line 168, column 4 to column 20)",
                                                      " (in 'gp_grid', line 170, column 11 to column 13)",
                                                      " (in 'gp_grid', line 170, column 14 to column 16)",
                                                      " (in 'gp_grid', line 170, column 4 to column 23)",
                                                      " (in 'gp_grid', line 171, column 11 to column 13)",
                                                      " (in 'gp_grid', line 171, column 14 to column 16)",
                                                      " (in 'gp_grid', line 171, column 4 to column 23)",
                                                      " (in 'gp_grid', line 172, column 11 to column 13)",
                                                      " (in 'gp_grid', line 172, column 14 to column 16)",
                                                      " (in 'gp_grid', line 172, column 4 to column 25)",
                                                      " (in 'gp_grid', line 173, column 11 to column 13)",
                                                      " (in 'gp_grid', line 173, column 14 to column 16)",
                                                      " (in 'gp_grid', line 173, column 4 to column 25)",
                                                      " (in 'gp_grid', line 201, column 4 to column 121)",
                                                      " (in 'gp_grid', line 202, column 4 to column 111)",
                                                      " (in 'gp_grid', line 200, column 23 to line 203, column 5)",
                                                      " (in 'gp_grid', line 200, column 9 to line 203, column 5)",
                                                      " (in 'gp_grid', line 179, column 11 to column 13)",
                                                      " (in 'gp_grid', line 179, column 14 to column 16)",
                                                      " (in 'gp_grid', line 179, column 4 to column 24)",
                                                      " (in 'gp_grid', line 180, column 11 to column 13)",
                                                      " (in 'gp_grid', line 180, column 14 to column 16)",
                                                      " (in 'gp_grid', line 180, column 4 to column 24)",
                                                      " (in 'gp_grid', line 194, column 4 to column 76)",
                                                      " (in 'gp_grid', line 195, column 4 to column 76)",
                                                      " (in 'gp_grid', line 196, column 4 to column 95)",
                                                      " (in 'gp_grid', line 197, column 4 to column 85)",
                                                      " (in 'gp_grid', line 193, column 26 to line 198, column 5)",
                                                      " (in 'gp_grid', line 193, column 9 to line 198, column 5)",
                                                      " (in 'gp_grid', line 188, column 4 to column 40)",
                                                      " (in 'gp_grid', line 189, column 4 to column 40)",
                                                      " (in 'gp_grid', line 190, column 4 to column 95)",
                                                      " (in 'gp_grid', line 191, column 4 to column 85)",
                                                      " (in 'gp_grid', line 187, column 26 to line 192, column 5)",
                                                      " (in 'gp_grid', line 187, column 9 to line 198, column 5)",
                                                      " (in 'gp_grid', line 182, column 4 to column 32)",
                                                      " (in 'gp_grid', line 183, column 4 to column 32)",
                                                      " (in 'gp_grid', line 184, column 4 to column 87)",
                                                      " (in 'gp_grid', line 185, column 4 to column 79)",
                                                      " (in 'gp_grid', line 181, column 21 to line 186, column 5)",
                                                      " (in 'gp_grid', line 181, column 4 to line 198, column 5)",
                                                      " (in 'gp_grid', line 178, column 23 to line 199, column 5)",
                                                      " (in 'gp_grid', line 178, column 9 to line 203, column 5)",
                                                      " (in 'gp_grid', line 175, column 4 to column 93)",
                                                      " (in 'gp_grid', line 176, column 4 to column 84)",
                                                      " (in 'gp_grid', line 174, column 18 to line 177, column 5)",
                                                      " (in 'gp_grid', line 174, column 4 to line 203, column 5)",
                                                      " (in 'gp_grid', line 204, column 4 to column 38)",
                                                      " (in 'gp_grid', line 205, column 4 to column 38)",
                                                      " (in 'gp_grid', line 206, column 4 to column 38)",
                                                      " (in 'gp_grid', line 211, column 6 to column 21)",
                                                      " (in 'gp_grid', line 212, column 6 to column 21)",
                                                      " (in 'gp_grid', line 210, column 11 to line 213, column 5)",
                                                      " (in 'gp_grid', line 208, column 6 to column 27)",
                                                      " (in 'gp_grid', line 209, column 6 to column 27)",
                                                      " (in 'gp_grid', line 207, column 15 to line 210, column 5)",
                                                      " (in 'gp_grid', line 207, column 4 to line 213, column 5)",
                                                      " (in 'gp_grid', line 215, column 6 to column 79)",
                                                      " (in 'gp_grid', line 217, column 8 to column 81)",
                                                      " (in 'gp_grid', line 218, column 8 to column 32)",
                                                      " (in 'gp_grid', line 219, column 8 to column 25)",
                                                      " (in 'gp_grid', line 220, column 8 to column 131)",
                                                      " (in 'gp_grid', line 216, column 21 to line 221, column 7)",
                                                      " (in 'gp_grid', line 216, column 6 to line 221, column 7)",
                                                      " (in 'gp_grid', line 214, column 19 to line 222, column 5)",
                                                      " (in 'gp_grid', line 214, column 4 to line 222, column 5)",
                                                      " (in 'gp_grid', line 165, column 2 to line 223, column 3)",
                                                      " (in 'gp_grid', line 284, column 2 to column 14)",
                                                      " (in 'gp_grid', line 285, column 2 to column 14)",
                                                      " (in 'gp_grid', line 286, column 2 to column 34)",
                                                      " (in 'gp_grid', line 287, column 2 to column 17)",
                                                      " (in 'gp_grid', line 288, column 2 to column 17)",
                                                      " (in 'gp_grid', line 289, column 2 to column 18)",
                                                      " (in 'gp_grid', line 290, column 2 to column 19)",
                                                      " (in 'gp_grid', line 291, column 2 to column 21)",
                                                      " (in 'gp_grid', line 292, column 2 to column 19)",
                                                      " (in 'gp_grid', line 293, column 2 to column 19)",
                                                      " (in 'gp_grid', line 295, column 11 to column 15)",
                                                      " (in 'gp_grid', line 295, column 16 to column 20)",
                                                      " (in 'gp_grid', line 295, column 4 to column 24)",
                                                      " (in 'gp_grid', line 296, column 11 to column 13)",
                                                      " (in 'gp_grid', line 296, column 14 to column 16)",
                                                      " (in 'gp_grid', line 296, column 4 to column 30)",
                                                      " (in 'gp_grid', line 297, column 11 to column 12)",
                                                      " (in 'gp_grid', line 297, column 4 to column 19)",
                                                      " (in 'gp_grid', line 298, column 11 to column 12)",
                                                      " (in 'gp_grid', line 298, column 4 to column 20)",
                                                      " (in 'gp_grid', line 299, column 4 to column 20)",
                                                      " (in 'gp_grid', line 300, column 4 to column 20)",
                                                      " (in 'gp_grid', line 302, column 4 to column 15)",
                                                      " (in 'gp_grid', line 303, column 4 to column 24)",
                                                      " (in 'gp_grid', line 304, column 4 to column 24)",
                                                      " (in 'gp_grid', line 305, column 4 to column 38)",
                                                      " (in 'gp_grid', line 306, column 4 to column 46)",
                                                      " (in 'gp_grid', line 308, column 4 to column 32)",
                                                      " (in 'gp_grid', line 309, column 4 to column 34)",
                                                      " (in 'gp_grid', line 314, column 8 to column 54)",
                                                      " (in 'gp_grid', line 313, column 13 to line 315, column 7)",
                                                      " (in 'gp_grid', line 312, column 8 to column 61)",
                                                      " (in 'gp_grid', line 311, column 26 to line 313, column 7)",
                                                      " (in 'gp_grid', line 311, column 6 to line 315, column 7)",
                                                      " (in 'gp_grid', line 310, column 18 to line 316, column 5)",
                                                      " (in 'gp_grid', line 310, column 4 to line 316, column 5)",
                                                      " (in 'gp_grid', line 318, column 4 to column 29)",
                                                      " (in 'gp_grid', line 319, column 4 to column 29)",
                                                      " (in 'gp_grid', line 325, column 6 to column 21)",
                                                      " (in 'gp_grid', line 326, column 6 to column 21)",
                                                      " (in 'gp_grid', line 324, column 11 to line 327, column 5)",
                                                      " (in 'gp_grid', line 322, column 6 to column 27)",
                                                      " (in 'gp_grid', line 323, column 6 to column 27)",
                                                      " (in 'gp_grid', line 321, column 15 to line 324, column 5)",
                                                      " (in 'gp_grid', line 321, column 4 to line 327, column 5)",
                                                      " (in 'gp_grid', line 328, column 4 to column 57)",
                                                      " (in 'gp_grid', line 329, column 4 to column 57)",
                                                      " (in 'gp_grid', line 331, column 4 to column 36)",
                                                      " (in 'gp_grid', line 332, column 4 to column 30)",
                                                      " (in 'gp_grid', line 333, column 4 to column 33)",
                                                      " (in 'gp_grid', line 334, column 4 to column 45)",
                                                      " (in 'gp_grid', line 335, column 4 to column 45)",
                                                      " (in 'gp_grid', line 337, column 21 to column 53)",
                                                      " (in 'gp_grid', line 337, column 20 to column 54)",
                                                      " (in 'gp_grid', line 337, column 4 to column 54)",
                                                      " (in 'gp_grid', line 338, column 22 to column 55)",
                                                      " (in 'gp_grid', line 338, column 21 to column 56)",
                                                      " (in 'gp_grid', line 338, column 4 to column 56)",
                                                      " (in 'gp_grid', line 339, column 22 to column 55)",
                                                      " (in 'gp_grid', line 339, column 21 to column 56)",
                                                      " (in 'gp_grid', line 339, column 4 to column 56)",
                                                      " (in 'gp_grid', line 340, column 22 to column 55)",
                                                      " (in 'gp_grid', line 340, column 21 to column 56)",
                                                      " (in 'gp_grid', line 340, column 4 to column 56)",
                                                      " (in 'gp_grid', line 294, column 2 to line 341, column 3)",
                                                      " (in 'gp_grid', line 227, column 9 to column 13)",
                                                      " (in 'gp_grid', line 227, column 14 to column 18)",
                                                      " (in 'gp_grid', line 227, column 2 to column 22)",
                                                      " (in 'gp_grid', line 228, column 9 to column 10)",
                                                      " (in 'gp_grid', line 228, column 2 to column 17)",
                                                      " (in 'gp_grid', line 229, column 9 to column 10)",
                                                      " (in 'gp_grid', line 229, column 2 to column 18)",
                                                      " (in 'gp_grid', line 230, column 2 to column 13)",
                                                      " (in 'gp_grid', line 231, column 2 to column 22)",
                                                      " (in 'gp_grid', line 232, column 2 to column 22)",
                                                      " (in 'gp_grid', line 233, column 2 to column 36)",
                                                      " (in 'gp_grid', line 235, column 2 to column 59)",
                                                      " (in 'gp_grid', line 237, column 2 to column 50)",
                                                      " (in 'gp_grid', line 238, column 2 to column 50)",
                                                      " (in 'gp_grid', line 240, column 2 to column 37)",
                                                      " (in 'gp_grid', line 241, column 2 to column 37)",
                                                      " (in 'gp_grid', line 242, column 2 to column 38)",
                                                      " (in 'gp_grid', line 243, column 2 to column 38)",
                                                      " (in 'gp_grid', line 244, column 2 to column 37)",
                                                      " (in 'gp_grid', line 245, column 2 to column 37)",
                                                      " (in 'gp_grid', line 246, column 2 to column 70)",
                                                      " (in 'gp_grid', line 247, column 2 to column 70)",
                                                      " (in 'gp_grid', line 249, column 2 to column 36)",
                                                      " (in 'gp_grid', line 250, column 2 to column 36)",
                                                      " (in 'gp_grid', line 255, column 4 to column 40)",
                                                      " (in 'gp_grid', line 256, column 4 to column 44)",
                                                      " (in 'gp_grid', line 254, column 8 to line 257, column 3)",
                                                      " (in 'gp_grid', line 253, column 4 to column 52)",
                                                      " (in 'gp_grid', line 252, column 14 to line 254, column 3)",
                                                      " (in 'gp_grid', line 252, column 2 to line 257, column 3)",
                                                      " (in 'gp_grid', line 259, column 4 to column 38)",
                                                      " (in 'gp_grid', line 258, column 16 to line 260, column 3)",
                                                      " (in 'gp_grid', line 258, column 2 to line 260, column 3)",
                                                      " (in 'gp_grid', line 261, column 2 to column 42)",
                                                      " (in 'gp_grid', line 263, column 2 to column 30)",
                                                      " (in 'gp_grid', line 264, column 2 to column 32)",
                                                      " (in 'gp_grid', line 279, column 6 to column 40)",
                                                      " (in 'gp_grid', line 278, column 10 to line 280, column 5)",
                                                      " (in 'gp_grid', line 276, column 8 to column 73)",
                                                      " (in 'gp_grid', line 275, column 21 to line 277, column 7)",
                                                      " (in 'gp_grid', line 275, column 6 to line 277, column 7)",
                                                      " (in 'gp_grid', line 274, column 15 to line 278, column 5)",
                                                      " (in 'gp_grid', line 274, column 4 to line 280, column 5)",
                                                      " (in 'gp_grid', line 273, column 8 to line 281, column 3)",
                                                      " (in 'gp_grid', line 271, column 6 to column 44)",
                                                      " (in 'gp_grid', line 270, column 10 to line 272, column 5)",
                                                      " (in 'gp_grid', line 268, column 8 to column 87)",
                                                      " (in 'gp_grid', line 267, column 21 to line 269, column 7)",
                                                      " (in 'gp_grid', line 267, column 6 to line 269, column 7)",
                                                      " (in 'gp_grid', line 266, column 15 to line 270, column 5)",
                                                      " (in 'gp_grid', line 266, column 4 to line 272, column 5)",
                                                      " (in 'gp_grid', line 265, column 22 to line 273, column 3)",
                                                      " (in 'gp_grid', line 265, column 2 to line 281, column 3)",
                                                      " (in 'gp_grid', line 84, column 2 to column 18)",
                                                      " (in 'gp_grid', line 85, column 2 to column 18)",
                                                      " (in 'gp_grid', line 86, column 2 to column 24)",
                                                      " (in 'gp_grid', line 87, column 2 to column 20)",
                                                      " (in 'gp_grid', line 88, column 9 to column 38)",
                                                      " (in 'gp_grid', line 88, column 2 to column 42)",
                                                      " (in 'gp_grid', line 89, column 13 to column 42)",
                                                      " (in 'gp_grid', line 89, column 2 to column 44)",
                                                      " (in 'gp_grid', line 90, column 10 to column 12)",
                                                      " (in 'gp_grid', line 90, column 2 to column 14)",
                                                      " (in 'gp_grid', line 91, column 10 to column 12)",
                                                      " (in 'gp_grid', line 91, column 2 to column 14)",
                                                      " (in 'gp_grid', line 92, column 2 to column 13)",
                                                      " (in 'gp_grid', line 93, column 2 to column 13)",
                                                      " (in 'gp_grid', line 94, column 2 to column 14)",
                                                      " (in 'gp_grid', line 95, column 2 to column 22)",
                                                      " (in 'gp_grid', line 96, column 2 to column 27)",
                                                      " (in 'gp_grid', line 97, column 2 to column 11)",
                                                      " (in 'gp_grid', line 98, column 2 to column 14)",
                                                      " (in 'gp_grid', line 99, column 2 to column 13)",
                                                      " (in 'gp_grid', line 100, column 2 to column 16)",
                                                      " (in 'gp_grid', line 101, column 2 to column 16)",
                                                      " (in 'gp_grid', line 104, column 2 to column 40)",
                                                      " (in 'gp_grid', line 105, column 2 to column 21)",
                                                      " (in 'gp_grid', line 106, column 2 to column 21)",
                                                      " (in 'gp_grid', line 107, column 2 to column 21)",
                                                      " (in 'gp_grid', line 108, column 2 to column 21)",
                                                      " (in 'gp_grid', line 109, column 2 to column 24)",
                                                      " (in 'gp_grid', line 110, column 2 to column 36)",
                                                      " (in 'gp_grid', line 111, column 2 to column 86)",
                                                      " (in 'gp_grid', line 112, column 9 to column 11)",
                                                      " (in 'gp_grid', line 112, column 12 to column 14)",
                                                      " (in 'gp_grid', line 112, column 2 to column 23)",
                                                      " (in 'gp_grid', line 113, column 9 to column 11)",
                                                      " (in 'gp_grid', line 113, column 12 to column 14)",
                                                      " (in 'gp_grid', line 113, column 2 to column 23)",
                                                      " (in 'gp_grid', line 114, column 9 to column 11)",
                                                      " (in 'gp_grid', line 114, column 12 to column 14)",
                                                      " (in 'gp_grid', line 114, column 2 to column 31)",
                                                      " (in 'gp_grid', line 115, column 9 to column 11)",
                                                      " (in 'gp_grid', line 115, column 12 to column 14)",
                                                      " (in 'gp_grid', line 115, column 2 to column 31)",
                                                      " (in 'gp_grid', line 116, column 2 to column 71)",
                                                      " (in 'gp_grid', line 117, column 2 to column 67)",
                                                      " (in 'gp_grid', line 121, column 6 to column 42)",
                                                      " (in 'gp_grid', line 122, column 6 to column 32)",
                                                      " (in 'gp_grid', line 123, column 6 to column 42)",
                                                      " (in 'gp_grid', line 124, column 6 to column 48)",
                                                      " (in 'gp_grid', line 120, column 19 to line 125, column 5)",
                                                      " (in 'gp_grid', line 120, column 4 to line 125, column 5)",
                                                      " (in 'gp_grid', line 119, column 17 to line 126, column 3)",
                                                      " (in 'gp_grid', line 119, column 2 to line 126, column 3)",
                                                      " (in 'gp_grid', line 129, column 6 to column 42)",
                                                      " (in 'gp_grid', line 130, column 6 to column 32)",
                                                      " (in 'gp_grid', line 131, column 6 to column 42)",
                                                      " (in 'gp_grid', line 132, column 6 to column 48)",
                                                      " (in 'gp_grid', line 128, column 19 to line 133, column 5)",
                                                      " (in 'gp_grid', line 128, column 4 to line 133, column 5)",
                                                      " (in 'gp_grid', line 127, column 17 to line 134, column 3)",
                                                      " (in 'gp_grid', line 127, column 2 to line 134, column 3)",
                                                      " (in 'gp_grid', line 138, column 29 to column 43)",
                                                      " (in 'gp_grid', line 139, column 29 to column 43)",
                                                      " (in 'gp_grid', line 152, column 22 to column 39)",
                                                      " (in 'gp_grid', line 153, column 9 to column 11)",
                                                      " (in 'gp_grid', line 153, column 12 to column 14)",
                                                      " (in 'gp_grid', line 160, column 27 to column 29)",
                                                      " (in 'gp_grid', line 160, column 30 to column 32)",
                                                      " (in 'gp_grid', line 161, column 31 to column 33)",
                                                      " (in 'gp_grid', line 162, column 27 to column 29)",
                                                      " (in 'gp_grid', line 163, column 27 to column 29)",
                                                      " (in 'gp_grid', line 163, column 30 to column 32)",
                                                      " (in 'gp_grid', line 164, column 9 to column 11)",
                                                      " (in 'gp_grid', line 164, column 12 to column 14)",
                                                      " (in 'gp_grid', line 286, column 9 to column 10)",
                                                      " (in 'gp_grid', line 6, column 4 to column 43)",
                                                      " (in 'gp_grid', line 3, column 49 to line 7, column 3)",
                                                      " (in 'gp_grid', line 11, column 4 to column 23)",
                                                      " (in 'gp_grid', line 12, column 4 to column 18)",
                                                      " (in 'gp_grid', line 13, column 4 to column 18)",
                                                      " (in 'gp_grid', line 14, column 4 to column 18)",
                                                      " (in 'gp_grid', line 15, column 11 to column 13)",
                                                      " (in 'gp_grid', line 15, column 4 to column 22)",
                                                      " (in 'gp_grid', line 17, column 6 to column 22)",
                                                      " (in 'gp_grid', line 19, column 8 to column 58)",
                                                      " (in 'gp_grid', line 18, column 21 to line 20, column 7)",
                                                      " (in 'gp_grid', line 18, column 6 to line 20, column 7)",
                                                      " (in 'gp_grid', line 21, column 6 to column 25)",
                                                      " (in 'gp_grid', line 23, column 8 to column 64)",
                                                      " (in 'gp_grid', line 22, column 16 to line 24, column 7)",
                                                      " (in 'gp_grid', line 22, column 6 to line 24, column 7)",
                                                      " (in 'gp_grid', line 16, column 19 to line 25, column 5)",
                                                      " (in 'gp_grid', line 16, column 4 to line 25, column 5)",
                                                      " (in 'gp_grid', line 26, column 4 to column 62)",
                                                      " (in 'gp_grid', line 27, column 4 to column 16)",
                                                      " (in 'gp_grid', line 9, column 40 to line 28, column 3)",
                                                      " (in 'gp_grid', line 31, column 2 to column 110)",
                                                      " (in 'gp_grid', line 32, column 2 to column 30)",
                                                      " (in 'gp_grid', line 33, column 2 to column 13)",
                                                      " (in 'gp_grid', line 30, column 60 to line 34, column 1)",
                                                      " (in 'gp_grid', line 38, column 4 to column 23)",
                                                      " (in 'gp_grid', line 39, column 11 to column 15)",
                                                      " (in 'gp_grid', line 39, column 16 to column 20)",
                                                      " (in 'gp_grid', line 39, column 4 to column 24)",
                                                      " (in 'gp_grid', line 42, column 8 to column 32)",
                                                      " (in 'gp_grid', line 41, column 23 to line 43, column 7)",
                                                      " (in 'gp_grid', line 41, column 6 to line 43, column 7)",
                                                      " (in 'gp_grid', line 40, column 21 to line 44, column 5)",
                                                      " (in 'gp_grid', line 40, column 4 to line 44, column 5)",
                                                      " (in 'gp_grid', line 45, column 4 to column 13)",
                                                      " (in 'gp_grid', line 36, column 35 to line 46, column 3)",
                                                      " (in 'gp_grid', line 50, column 4 to column 23)",
                                                      " (in 'gp_grid', line 51, column 11 to column 15)",
                                                      " (in 'gp_grid', line 51, column 16 to column 20)",
                                                      " (in 'gp_grid', line 51, column 4 to column 24)",
                                                      " (in 'gp_grid', line 54, column 8 to column 32)",
                                                      " (in 'gp_grid', line 53, column 23 to line 55, column 7)",
                                                      " (in 'gp_grid', line 53, column 6 to line 55, column 7)",
                                                      " (in 'gp_grid', line 52, column 21 to line 56, column 5)",
                                                      " (in 'gp_grid', line 52, column 4 to line 56, column 5)",
                                                      " (in 'gp_grid', line 57, column 4 to column 13)",
                                                      " (in 'gp_grid', line 48, column 35 to line 58, column 3)",
                                                      " (in 'gp_grid', line 62, column 4 to column 26)",
                                                      " (in 'gp_grid', line 63, column 4 to column 150)",
                                                      " (in 'gp_grid', line 63, column 159 to column 160)",
                                                      " (in 'gp_grid', line 64, column 4 to column 17)",
                                                      " (in 'gp_grid', line 60, column 64 to line 65, column 3)",
                                                      " (in 'gp_grid', line 73, column 4 to column 25)",
                                                      " (in 'gp_grid', line 74, column 4 to column 28)",
                                                      " (in 'gp_grid', line 76, column 4 to column 45)",
                                                      " (in 'gp_grid', line 78, column 4 to column 92)",
                                                      " (in 'gp_grid', line 79, column 4 to column 16)",
                                                      " (in 'gp_grid', line 72, column 7 to line 80, column 3)",
                                                      " (in 'gp_grid', line 70, column 4 to column 30)",
                                                      " (in 'gp_grid', line 69, column 21 to line 71, column 3)",
                                                      " (in 'gp_grid', line 69, column 2 to line 80, column 3)",
                                                      " (in 'gp_grid', line 67, column 50 to line 81, column 1)"};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
kron_mvprod(const T0__& A_arg__, const T1__& B_arg__, const T2__& V_arg__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>>;
  const auto& A = to_ref(A_arg__);
  const auto& B = to_ref(B_arg__);
  const auto& V = to_ref(V_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 286;
    return transpose(multiply(A, transpose(multiply(B, V))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct kron_mvprod_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>>, -1, -1>
operator()(const T0__& A, const T1__& B, const T2__& V,
           std::ostream* pstream__)  const 
{
return kron_mvprod(A, B, V, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>
VUS(const T0__& Z_arg__, const std::vector<T1__>& x1,
    const std::vector<T2__>& x2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__,
          T2__>;
  const auto& Z = to_ref(Z_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<int> d;
    d = std::vector<int>(2, std::numeric_limits<int>::min());
    
    current_statement__ = 288;
    assign(d, nil_index_list(), dims(Z), "assigning variable d");
    int n1;
    n1 = std::numeric_limits<int>::min();
    
    current_statement__ = 289;
    n1 = d[(2 - 1)];
    int n2;
    n2 = std::numeric_limits<int>::min();
    
    current_statement__ = 290;
    n2 = d[(1 - 1)];
    local_scalar_t__ rVUS;
    rVUS = DUMMY_VAR__;
    
    current_statement__ = 291;
    rVUS = 0;
    current_statement__ = 292;
    validate_non_negative_index("B_rVUS", "n2", n2);
    Eigen::Matrix<local_scalar_t__, -1, 1> B_rVUS;
    B_rVUS = Eigen::Matrix<local_scalar_t__, -1, 1>(n2);
    stan::math::fill(B_rVUS, DUMMY_VAR__);
    
    current_statement__ = 303;
    for (int i = 1; i <= n2; ++i) {
      local_scalar_t__ b_rVUS;
      b_rVUS = DUMMY_VAR__;
      
      current_statement__ = 294;
      b_rVUS = 0;
      current_statement__ = 297;
      for (int j = 2; j <= n1; ++j) {
        current_statement__ = 295;
        b_rVUS = (b_rVUS +
                   (((x1[(j - 1)] - x1[((j - 1) - 1)]) *
                      (rvalue(Z,
                         cons_list(index_uni(i),
                           cons_list(index_uni(j), nil_index_list())), "Z") +
                        rvalue(Z,
                          cons_list(index_uni(i),
                            cons_list(index_uni((j - 1)), nil_index_list())),
                          "Z"))) / 2));}
      current_statement__ = 298;
      assign(B_rVUS, cons_list(index_uni(i), nil_index_list()), b_rVUS,
        "assigning variable B_rVUS");
      current_statement__ = 301;
      if (logical_gt(i, 1)) {
        current_statement__ = 299;
        rVUS = (rVUS +
                 (((x2[(i - 1)] - x2[((i - 1) - 1)]) *
                    (B_rVUS[(i - 1)] + B_rVUS[((i - 1) - 1)])) / 2));
      } }
    current_statement__ = 304;
    rVUS = ((100 * rVUS) / ((max(x1) - min(x1)) * (max(x2) - min(x2))));
    current_statement__ = 305;
    return rVUS;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct VUS_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<stan::value_type_t<T0__>, T1__,
T2__>
operator()(const T0__& Z, const std::vector<T1__>& x1,
           const std::vector<T2__>& x2, std::ostream* pstream__)  const 
{
return VUS(Z, x1, x2, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
dss(const T0__& c1, const T1__& c2, const T2__& la, const T3__& slope,
    const T4__& log10_ec50, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ val;
    val = DUMMY_VAR__;
    
    current_statement__ = 307;
    val = ((c2 - c1) +
            (((la - 1) / slope) *
              (stan::math::log10((1 + pow(10, (slope * (c2 - log10_ec50)))))
                -
                stan::math::log10((1 + pow(10, (slope * (c1 - log10_ec50))))))));
    current_statement__ = 308;
    val = (100 * (1 - (val / (c2 - c1))));
    current_statement__ = 309;
    return val;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct dss_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& c1, const T1__& c2, const T2__& la, const T3__& slope,
           const T4__& log10_ec50, std::ostream* pstream__)  const 
{
return dss(c1, c2, la, slope, log10_ec50, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, -1>
matrix_min(const T0__& A_arg__, const T1__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& A = to_ref(A_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<int> d;
    d = std::vector<int>(2, std::numeric_limits<int>::min());
    
    current_statement__ = 311;
    assign(d, nil_index_list(), dims(A), "assigning variable d");
    current_statement__ = 312;
    validate_non_negative_index("Z", "d[1]", d[(1 - 1)]);
    current_statement__ = 313;
    validate_non_negative_index("Z", "d[2]", d[(2 - 1)]);
    Eigen::Matrix<local_scalar_t__, -1, -1> Z;
    Z = Eigen::Matrix<local_scalar_t__, -1, -1>(d[(1 - 1)], d[(2 - 1)]);
    stan::math::fill(Z, DUMMY_VAR__);
    
    current_statement__ = 319;
    for (int i = 1; i <= d[(1 - 1)]; ++i) {
      current_statement__ = 317;
      for (int j = 1; j <= d[(2 - 1)]; ++j) {
        current_statement__ = 315;
        assign(Z,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          stan::math::fmin(
            rvalue(A,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "A"), a),
          "assigning variable Z");}}
    current_statement__ = 320;
    return Z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct matrix_min_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, -1>
operator()(const T0__& A, const T1__& a, std::ostream* pstream__)  const 
{
return matrix_min(A, a, pstream__);
}
};
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, -1>
matrix_max(const T0__& A_arg__, const T1__& a, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          T1__>;
  const auto& A = to_ref(A_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    std::vector<int> d;
    d = std::vector<int>(2, std::numeric_limits<int>::min());
    
    current_statement__ = 322;
    assign(d, nil_index_list(), dims(A), "assigning variable d");
    current_statement__ = 323;
    validate_non_negative_index("Z", "d[1]", d[(1 - 1)]);
    current_statement__ = 324;
    validate_non_negative_index("Z", "d[2]", d[(2 - 1)]);
    Eigen::Matrix<local_scalar_t__, -1, -1> Z;
    Z = Eigen::Matrix<local_scalar_t__, -1, -1>(d[(1 - 1)], d[(2 - 1)]);
    stan::math::fill(Z, DUMMY_VAR__);
    
    current_statement__ = 330;
    for (int i = 1; i <= d[(1 - 1)]; ++i) {
      current_statement__ = 328;
      for (int j = 1; j <= d[(2 - 1)]; ++j) {
        current_statement__ = 326;
        assign(Z,
          cons_list(index_uni(i), cons_list(index_uni(j), nil_index_list())),
          stan::math::fmax(
            rvalue(A,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "A"), a),
          "assigning variable Z");}}
    current_statement__ = 331;
    return Z;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct matrix_max_functor__ {
template <typename T0__, typename T1__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>,
T1__>, -1, -1>
operator()(const T0__& A, const T1__& a, std::ostream* pstream__)  const 
{
return matrix_max(A, a, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
pc_prior(const T0__& ell, const T1__& sigmaf, const T2__& lambda1,
         const T3__& lambda2, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ d_half;
    d_half = DUMMY_VAR__;
    
    current_statement__ = 333;
    d_half = (2.0 / 2.0);
    local_scalar_t__ lprob;
    lprob = DUMMY_VAR__;
    
    current_statement__ = 334;
    lprob = ((((((stan::math::log(d_half) + stan::math::log(lambda1)) +
                  stan::math::log(lambda2)) +
                 ((-d_half - 1) * stan::math::log(ell))) -
                (lambda1 * pow(ell, -d_half))) -
               (lambda2 * stan::math::sqrt(sigmaf))) -
              stan::math::log(stan::math::sqrt(sigmaf)));
    ;
    current_statement__ = 336;
    return lprob;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct pc_prior_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& ell, const T1__& sigmaf, const T2__& lambda1,
           const T3__& lambda2, std::ostream* pstream__)  const 
{
return pc_prior(ell, sigmaf, lambda1, lambda2, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
lptn(const T0__& rho, const T1__& z, const T2__& lambda, const T3__& tau,
     std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 346;
    if (logical_lte(stan::math::fabs(z), tau)) {
      current_statement__ = 344;
      return std_normal_lpdf<false>(z);
    } else {
      local_scalar_t__ logt;
      logt = DUMMY_VAR__;
      
      current_statement__ = 338;
      logt = stan::math::log(tau);
      local_scalar_t__ logl;
      logl = DUMMY_VAR__;
      
      current_statement__ = 339;
      logl = stan::math::log(lambda);
      local_scalar_t__ logabsz;
      logabsz = DUMMY_VAR__;
      
      current_statement__ = 340;
      logabsz = stan::math::log(
                  stan::math::fmax(stan::math::fabs(z), 1.0001));
      local_scalar_t__ lpdf;
      lpdf = DUMMY_VAR__;
      
      current_statement__ = 341;
      lpdf = (((std_normal_lpdf<false>(tau) + logt) - logabsz) +
               ((lambda + 1) *
                 (stan::math::log(logt) - stan::math::log(logabsz))));
      current_statement__ = 342;
      return lpdf;
    }
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct lptn_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
stan::promote_args_t<T0__, T1__, T2__,
T3__>
operator()(const T0__& rho, const T1__& z, const T2__& lambda,
           const T3__& tau, std::ostream* pstream__)  const 
{
return lptn(rho, z, lambda, tau, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_gp_grid final : public model_base_crtp<model_gp_grid> {
private:
  int n1;
  int n2;
  int nmissing;
  int nrep;
  Eigen::Matrix<double, -1, 1> y;
  std::vector<int> ii_obs;
  std::vector<double> x1;
  std::vector<double> x2;
  int est_la;
  int robust;
  int pcprior;
  int heteroscedastic;
  Eigen::Matrix<double, -1, 1> pcprior_hypers;
  double rho;
  double lambda;
  int kernel;
  int nu_matern;
  int est_alpha;
  int N;
  double c11;
  double c12;
  double c21;
  double c22;
  double d_half;
  double tauLPTN;
  double lambdaLPTN;
  Eigen::Matrix<double, -1, -1> x1dist;
  Eigen::Matrix<double, -1, -1> x2dist;
  Eigen::Matrix<double, -1, -1> x1dist_squared;
  Eigen::Matrix<double, -1, -1> x2dist_squared;
  double lambda1;
  double lambda2;
  int la_1_1dim__;
  int la_2_1dim__;
  int alpha_1dim__;
 
public:
  ~model_gp_grid() { }
  
  inline std::string model_name() const final { return "model_gp_grid"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_gp_grid(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_gp_grid_namespace::model_gp_grid";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 212;
      context__.validate_dims("data initialization","n1","int",
          context__.to_vec());
      n1 = std::numeric_limits<int>::min();
      
      current_statement__ = 212;
      n1 = context__.vals_i("n1")[(1 - 1)];
      current_statement__ = 212;
      current_statement__ = 212;
      check_greater_or_equal(function__, "n1", n1, 1);
      current_statement__ = 213;
      context__.validate_dims("data initialization","n2","int",
          context__.to_vec());
      n2 = std::numeric_limits<int>::min();
      
      current_statement__ = 213;
      n2 = context__.vals_i("n2")[(1 - 1)];
      current_statement__ = 213;
      current_statement__ = 213;
      check_greater_or_equal(function__, "n2", n2, 1);
      current_statement__ = 214;
      context__.validate_dims("data initialization","nmissing","int",
          context__.to_vec());
      nmissing = std::numeric_limits<int>::min();
      
      current_statement__ = 214;
      nmissing = context__.vals_i("nmissing")[(1 - 1)];
      current_statement__ = 214;
      current_statement__ = 214;
      check_greater_or_equal(function__, "nmissing", nmissing, 0);
      current_statement__ = 215;
      context__.validate_dims("data initialization","nrep","int",
          context__.to_vec());
      nrep = std::numeric_limits<int>::min();
      
      current_statement__ = 215;
      nrep = context__.vals_i("nrep")[(1 - 1)];
      current_statement__ = 215;
      current_statement__ = 215;
      check_greater_or_equal(function__, "nrep", nrep, 1);
      current_statement__ = 216;
      validate_non_negative_index("y",
                                  "(n1 + n2 + n1 * n2 + 1) * nrep - nmissing",
                                  (((((n1 + n2) + (n1 * n2)) + 1) * nrep) -
                                    nmissing));
      current_statement__ = 217;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(
            (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
      y = Eigen::Matrix<double, -1, 1>((((((n1 + n2) + (n1 * n2)) + 1) *
                                          nrep) - nmissing));
      stan::math::fill(y, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 217;
        assign(y_flat__, nil_index_list(), context__.vals_r("y"),
          "assigning variable y_flat__");
        current_statement__ = 217;
        pos__ = 1;
        current_statement__ = 217;
        for (int sym1__ = 1;
             sym1__ <= (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
             ++sym1__) {
          current_statement__ = 217;
          assign(y, cons_list(index_uni(sym1__), nil_index_list()),
            y_flat__[(pos__ - 1)], "assigning variable y");
          current_statement__ = 217;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 218;
      validate_non_negative_index("ii_obs",
                                  "(n1 + n2 + n1 * n2 + 1) * nrep - nmissing",
                                  (((((n1 + n2) + (n1 * n2)) + 1) * nrep) -
                                    nmissing));
      current_statement__ = 219;
      context__.validate_dims("data initialization","ii_obs","int",
          context__.to_vec(
            (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing)));
      ii_obs = std::vector<int>((((((n1 + n2) + (n1 * n2)) + 1) * nrep) -
                                  nmissing), std::numeric_limits<int>::min());
      
      current_statement__ = 219;
      assign(ii_obs, nil_index_list(), context__.vals_i("ii_obs"),
        "assigning variable ii_obs");
      current_statement__ = 220;
      validate_non_negative_index("x1", "n1", n1);
      current_statement__ = 221;
      context__.validate_dims("data initialization","x1","double",
          context__.to_vec(n1));
      x1 = std::vector<double>(n1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 221;
      assign(x1, nil_index_list(), context__.vals_r("x1"),
        "assigning variable x1");
      current_statement__ = 222;
      validate_non_negative_index("x2", "n2", n2);
      current_statement__ = 223;
      context__.validate_dims("data initialization","x2","double",
          context__.to_vec(n2));
      x2 = std::vector<double>(n2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 223;
      assign(x2, nil_index_list(), context__.vals_r("x2"),
        "assigning variable x2");
      current_statement__ = 224;
      context__.validate_dims("data initialization","est_la","int",
          context__.to_vec());
      est_la = std::numeric_limits<int>::min();
      
      current_statement__ = 224;
      est_la = context__.vals_i("est_la")[(1 - 1)];
      current_statement__ = 225;
      context__.validate_dims("data initialization","robust","int",
          context__.to_vec());
      robust = std::numeric_limits<int>::min();
      
      current_statement__ = 225;
      robust = context__.vals_i("robust")[(1 - 1)];
      current_statement__ = 226;
      context__.validate_dims("data initialization","pcprior","int",
          context__.to_vec());
      pcprior = std::numeric_limits<int>::min();
      
      current_statement__ = 226;
      pcprior = context__.vals_i("pcprior")[(1 - 1)];
      current_statement__ = 227;
      context__.validate_dims("data initialization","heteroscedastic","int",
          context__.to_vec());
      heteroscedastic = std::numeric_limits<int>::min();
      
      current_statement__ = 227;
      heteroscedastic = context__.vals_i("heteroscedastic")[(1 - 1)];
      current_statement__ = 228;
      context__.validate_dims("data initialization","pcprior_hypers",
          "double",context__.to_vec(4));
      pcprior_hypers = Eigen::Matrix<double, -1, 1>(4);
      stan::math::fill(pcprior_hypers, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> pcprior_hypers_flat__;
        current_statement__ = 228;
        assign(pcprior_hypers_flat__, nil_index_list(),
          context__.vals_r("pcprior_hypers"),
          "assigning variable pcprior_hypers_flat__");
        current_statement__ = 228;
        pos__ = 1;
        current_statement__ = 228;
        for (int sym1__ = 1; sym1__ <= 4; ++sym1__) {
          current_statement__ = 228;
          assign(pcprior_hypers,
            cons_list(index_uni(sym1__), nil_index_list()),
            pcprior_hypers_flat__[(pos__ - 1)],
            "assigning variable pcprior_hypers");
          current_statement__ = 228;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 229;
      context__.validate_dims("data initialization","rho","double",
          context__.to_vec());
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 229;
      rho = context__.vals_r("rho")[(1 - 1)];
      current_statement__ = 230;
      context__.validate_dims("data initialization","lambda","double",
          context__.to_vec());
      lambda = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 230;
      lambda = context__.vals_r("lambda")[(1 - 1)];
      current_statement__ = 231;
      context__.validate_dims("data initialization","kernel","int",
          context__.to_vec());
      kernel = std::numeric_limits<int>::min();
      
      current_statement__ = 231;
      kernel = context__.vals_i("kernel")[(1 - 1)];
      current_statement__ = 232;
      context__.validate_dims("data initialization","nu_matern","int",
          context__.to_vec());
      nu_matern = std::numeric_limits<int>::min();
      
      current_statement__ = 232;
      nu_matern = context__.vals_i("nu_matern")[(1 - 1)];
      current_statement__ = 233;
      context__.validate_dims("data initialization","est_alpha","int",
          context__.to_vec());
      est_alpha = std::numeric_limits<int>::min();
      
      current_statement__ = 233;
      est_alpha = context__.vals_i("est_alpha")[(1 - 1)];
      current_statement__ = 234;
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 234;
      N = (((((n1 + n2) + (n1 * n2)) + 1) * nrep) - nmissing);
      current_statement__ = 235;
      c11 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 235;
      c11 = min(x1);
      current_statement__ = 236;
      c12 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 236;
      c12 = max(x1);
      current_statement__ = 237;
      c21 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 237;
      c21 = min(x2);
      current_statement__ = 238;
      c22 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 238;
      c22 = max(x2);
      current_statement__ = 239;
      d_half = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 239;
      d_half = (2.0 / 2.0);
      current_statement__ = 240;
      tauLPTN = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 240;
      tauLPTN = inv_Phi(((1 + rho) / 2));
      current_statement__ = 241;
      lambdaLPTN = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 241;
      lambdaLPTN = ((((2 * inv((1 - rho))) *
                       stan::math::exp(normal_lpdf<false>(tauLPTN, 0, 1))) *
                      tauLPTN) * stan::math::log(tauLPTN));
      current_statement__ = 242;
      validate_non_negative_index("x1dist", "n1", n1);
      current_statement__ = 243;
      validate_non_negative_index("x1dist", "n1", n1);
      current_statement__ = 244;
      x1dist = Eigen::Matrix<double, -1, -1>(n1, n1);
      stan::math::fill(x1dist, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 245;
      validate_non_negative_index("x2dist", "n2", n2);
      current_statement__ = 246;
      validate_non_negative_index("x2dist", "n2", n2);
      current_statement__ = 247;
      x2dist = Eigen::Matrix<double, -1, -1>(n2, n2);
      stan::math::fill(x2dist, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 248;
      validate_non_negative_index("x1dist_squared", "n1", n1);
      current_statement__ = 249;
      validate_non_negative_index("x1dist_squared", "n1", n1);
      current_statement__ = 250;
      x1dist_squared = Eigen::Matrix<double, -1, -1>(n1, n1);
      stan::math::fill(x1dist_squared, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 251;
      validate_non_negative_index("x2dist_squared", "n2", n2);
      current_statement__ = 252;
      validate_non_negative_index("x2dist_squared", "n2", n2);
      current_statement__ = 253;
      x2dist_squared = Eigen::Matrix<double, -1, -1>(n2, n2);
      stan::math::fill(x2dist_squared, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 254;
      lambda1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 254;
      lambda1 = (-stan::math::log(pcprior_hypers[(2 - 1)]) *
                  pow(pcprior_hypers[(1 - 1)], d_half));
      current_statement__ = 255;
      lambda2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 255;
      lambda2 = (-stan::math::log(pcprior_hypers[(4 - 1)]) *
                  pow(pcprior_hypers[(3 - 1)], -1));
      current_statement__ = 263;
      for (int i = 1; i <= n1; ++i) {
        current_statement__ = 261;
        for (int j = i; j <= n1; ++j) {
          current_statement__ = 256;
          assign(x1dist,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            stan::math::sqrt(pow((x1[(i - 1)] - x1[(j - 1)]), 2)),
            "assigning variable x1dist");
          current_statement__ = 257;
          assign(x1dist,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            rvalue(x1dist,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "x1dist"),
            "assigning variable x1dist");
          current_statement__ = 258;
          assign(x1dist_squared,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            pow(
              rvalue(x1dist,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "x1dist"), 2),
            "assigning variable x1dist_squared");
          current_statement__ = 259;
          assign(x1dist_squared,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            rvalue(x1dist_squared,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "x1dist_squared"),
            "assigning variable x1dist_squared");}}
      current_statement__ = 271;
      for (int i = 1; i <= n2; ++i) {
        current_statement__ = 269;
        for (int j = i; j <= n2; ++j) {
          current_statement__ = 264;
          assign(x2dist,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            stan::math::sqrt(pow((x2[(i - 1)] - x2[(j - 1)]), 2)),
            "assigning variable x2dist");
          current_statement__ = 265;
          assign(x2dist,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            rvalue(x2dist,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "x2dist"),
            "assigning variable x2dist");
          current_statement__ = 266;
          assign(x2dist_squared,
            cons_list(index_uni(i),
              cons_list(index_uni(j), nil_index_list())),
            pow(
              rvalue(x2dist,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "x2dist"), 2),
            "assigning variable x2dist_squared");
          current_statement__ = 267;
          assign(x2dist_squared,
            cons_list(index_uni(j),
              cons_list(index_uni(i), nil_index_list())),
            rvalue(x2dist_squared,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())), "x2dist_squared"),
            "assigning variable x2dist_squared");}}
      current_statement__ = 272;
      la_1_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 272;
      la_1_1dim__ = (est_la ? 1 : 0);
      current_statement__ = 272;
      validate_non_negative_index("la_1", "est_la ? 1 : 0", la_1_1dim__);
      current_statement__ = 273;
      la_2_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 273;
      la_2_1dim__ = (est_la ? 1 : 0);
      current_statement__ = 273;
      validate_non_negative_index("la_2", "est_la ? 1 : 0", la_2_1dim__);
      current_statement__ = 274;
      alpha_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 274;
      alpha_1dim__ = (est_alpha ? 1 : 0);
      current_statement__ = 274;
      validate_non_negative_index("alpha", "est_alpha ? 1 : 0", alpha_1dim__);
      current_statement__ = 275;
      validate_non_negative_index("z", "n2", n2);
      current_statement__ = 276;
      validate_non_negative_index("z", "n1", n1);
      current_statement__ = 277;
      validate_non_negative_index("p0", "n2", n2);
      current_statement__ = 278;
      validate_non_negative_index("p0", "n1", n1);
      current_statement__ = 279;
      validate_non_negative_index("p01", "n1", n1);
      current_statement__ = 280;
      validate_non_negative_index("p02", "n2", n2);
      current_statement__ = 281;
      validate_non_negative_index("Delta", "n2", n2);
      current_statement__ = 282;
      validate_non_negative_index("Delta", "n1", n1);
      current_statement__ = 283;
      validate_non_negative_index("GP", "n2", n2);
      current_statement__ = 284;
      validate_non_negative_index("GP", "n1", n1);
      current_statement__ = 285;
      validate_non_negative_index("CPO", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += la_1_1dim__;
      num_params_r__ += la_2_1dim__;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += alpha_1dim__;
      num_params_r__ += n2 * n1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_gp_grid_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> la_1;
      la_1 = std::vector<local_scalar_t__>(la_1_1dim__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_1[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable la_1");
        } else {
          current_statement__ = 1;
          assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_1[(sym1__ - 1)], 0, 1),
            "assigning variable la_1");
        }}
      std::vector<local_scalar_t__> la_2;
      la_2 = std::vector<local_scalar_t__>(la_2_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_2[(sym1__ - 1)], 0, 1, lp__),
            "assigning variable la_2");
        } else {
          current_statement__ = 2;
          assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(la_2[(sym1__ - 1)], 0, 1),
            "assigning variable la_2");
        }}
      local_scalar_t__ log10_ec50_1;
      log10_ec50_1 = DUMMY_VAR__;
      
      current_statement__ = 3;
      log10_ec50_1 = in__.scalar();
      local_scalar_t__ log10_ec50_2;
      log10_ec50_2 = DUMMY_VAR__;
      
      current_statement__ = 4;
      log10_ec50_2 = in__.scalar();
      local_scalar_t__ theta_1;
      theta_1 = DUMMY_VAR__;
      
      current_statement__ = 5;
      theta_1 = in__.scalar();
      local_scalar_t__ theta_2;
      theta_2 = DUMMY_VAR__;
      
      current_statement__ = 6;
      theta_2 = in__.scalar();
      local_scalar_t__ slope_1;
      slope_1 = DUMMY_VAR__;
      
      current_statement__ = 7;
      slope_1 = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        slope_1 = stan::math::lb_constrain(slope_1, 0, lp__);
      } else {
        current_statement__ = 7;
        slope_1 = stan::math::lb_constrain(slope_1, 0);
      }
      local_scalar_t__ slope_2;
      slope_2 = DUMMY_VAR__;
      
      current_statement__ = 8;
      slope_2 = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        slope_2 = stan::math::lb_constrain(slope_2, 0, lp__);
      } else {
        current_statement__ = 8;
        slope_2 = stan::math::lb_constrain(slope_2, 0);
      }
      local_scalar_t__ b1;
      b1 = DUMMY_VAR__;
      
      current_statement__ = 9;
      b1 = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        b1 = stan::math::lb_constrain(b1, 0, lp__);
      } else {
        current_statement__ = 9;
        b1 = stan::math::lb_constrain(b1, 0);
      }
      local_scalar_t__ b2;
      b2 = DUMMY_VAR__;
      
      current_statement__ = 10;
      b2 = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        b2 = stan::math::lb_constrain(b2, 0, lp__);
      } else {
        current_statement__ = 10;
        b2 = stan::math::lb_constrain(b2, 0);
      }
      local_scalar_t__ ell;
      ell = DUMMY_VAR__;
      
      current_statement__ = 11;
      ell = in__.scalar();
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        ell = stan::math::lb_constrain(ell, 0, lp__);
      } else {
        current_statement__ = 11;
        ell = stan::math::lb_constrain(ell, 0);
      }
      local_scalar_t__ sigma_f;
      sigma_f = DUMMY_VAR__;
      
      current_statement__ = 12;
      sigma_f = in__.scalar();
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        sigma_f = stan::math::lb_constrain(sigma_f, 0, lp__);
      } else {
        current_statement__ = 12;
        sigma_f = stan::math::lb_constrain(sigma_f, 0);
      }
      std::vector<local_scalar_t__> alpha;
      alpha = std::vector<local_scalar_t__>(alpha_1dim__, DUMMY_VAR__);
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 13;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 13;
        if (jacobian__) {
          current_statement__ = 13;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 13;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      Eigen::Matrix<local_scalar_t__, -1, -1> z;
      z = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
      stan::math::fill(z, DUMMY_VAR__);
      
      current_statement__ = 14;
      z = in__.matrix(n2, n1);
      local_scalar_t__ s;
      s = DUMMY_VAR__;
      
      current_statement__ = 15;
      s = in__.scalar();
      current_statement__ = 15;
      if (jacobian__) {
        current_statement__ = 15;
        s = stan::math::lb_constrain(s, 0, lp__);
      } else {
        current_statement__ = 15;
        s = stan::math::lb_constrain(s, 0);
      }
      local_scalar_t__ s2_log10_ec50_1;
      s2_log10_ec50_1 = DUMMY_VAR__;
      
      current_statement__ = 16;
      s2_log10_ec50_1 = in__.scalar();
      current_statement__ = 16;
      if (jacobian__) {
        current_statement__ = 16;
        s2_log10_ec50_1 = stan::math::lb_constrain(s2_log10_ec50_1, 0, lp__);
      } else {
        current_statement__ = 16;
        s2_log10_ec50_1 = stan::math::lb_constrain(s2_log10_ec50_1, 0);
      }
      local_scalar_t__ s2_log10_ec50_2;
      s2_log10_ec50_2 = DUMMY_VAR__;
      
      current_statement__ = 17;
      s2_log10_ec50_2 = in__.scalar();
      current_statement__ = 17;
      if (jacobian__) {
        current_statement__ = 17;
        s2_log10_ec50_2 = stan::math::lb_constrain(s2_log10_ec50_2, 0, lp__);
      } else {
        current_statement__ = 17;
        s2_log10_ec50_2 = stan::math::lb_constrain(s2_log10_ec50_2, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, -1> p0;
      p0 = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
      stan::math::fill(p0, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, 1, -1> p01;
      p01 = Eigen::Matrix<local_scalar_t__, 1, -1>(n1);
      stan::math::fill(p01, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p02;
      p02 = Eigen::Matrix<local_scalar_t__, -1, 1>(n2);
      stan::math::fill(p02, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> Delta;
      Delta = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
      stan::math::fill(Delta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, -1> GP;
      GP = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
      stan::math::fill(GP, DUMMY_VAR__);
      
      {
        local_scalar_t__ la_1_param;
        la_1_param = DUMMY_VAR__;
        
        local_scalar_t__ la_2_param;
        la_2_param = DUMMY_VAR__;
        
        current_statement__ = 25;
        validate_non_negative_index("B", "n2", n2);
        current_statement__ = 26;
        validate_non_negative_index("B", "n1", n1);
        Eigen::Matrix<local_scalar_t__, -1, -1> B;
        B = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n1);
        stan::math::fill(B, DUMMY_VAR__);
        
        current_statement__ = 28;
        validate_non_negative_index("cov1", "n1", n1);
        current_statement__ = 29;
        validate_non_negative_index("cov1", "n1", n1);
        Eigen::Matrix<local_scalar_t__, -1, -1> cov1;
        cov1 = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n1);
        stan::math::fill(cov1, DUMMY_VAR__);
        
        current_statement__ = 31;
        validate_non_negative_index("cov2", "n2", n2);
        current_statement__ = 32;
        validate_non_negative_index("cov2", "n2", n2);
        Eigen::Matrix<local_scalar_t__, -1, -1> cov2;
        cov2 = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n2);
        stan::math::fill(cov2, DUMMY_VAR__);
        
        current_statement__ = 34;
        validate_non_negative_index("L_cov1", "n1", n1);
        current_statement__ = 35;
        validate_non_negative_index("L_cov1", "n1", n1);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_cov1;
        L_cov1 = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n1);
        stan::math::fill(L_cov1, DUMMY_VAR__);
        
        current_statement__ = 37;
        validate_non_negative_index("L_cov2", "n2", n2);
        current_statement__ = 38;
        validate_non_negative_index("L_cov2", "n2", n2);
        Eigen::Matrix<local_scalar_t__, -1, -1> L_cov2;
        L_cov2 = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n2);
        stan::math::fill(L_cov2, DUMMY_VAR__);
        
        current_statement__ = 73;
        if (logical_eq(kernel, 1)) {
          current_statement__ = 70;
          assign(cov1, nil_index_list(),
            add(
              multiply(sigma_f,
                stan::math::exp(
                  elt_divide(minus(x1dist_squared), (2 * pow(ell, 2))))),
              diag_matrix(rep_vector(1e-10, n1))), "assigning variable cov1");
          current_statement__ = 71;
          assign(cov2, nil_index_list(),
            add(
              stan::math::exp(
                elt_divide(minus(x2dist_squared), (2 * pow(ell, 2)))),
              diag_matrix(rep_vector(1e-10, n2))), "assigning variable cov2");
        } else {
          current_statement__ = 69;
          if (logical_eq(kernel, 2)) {
            current_statement__ = 44;
            validate_non_negative_index("poly1", "n1", n1);
            current_statement__ = 45;
            validate_non_negative_index("poly1", "n1", n1);
            Eigen::Matrix<local_scalar_t__, -1, -1> poly1;
            poly1 = Eigen::Matrix<local_scalar_t__, -1, -1>(n1, n1);
            stan::math::fill(poly1, DUMMY_VAR__);
            
            current_statement__ = 47;
            validate_non_negative_index("poly2", "n2", n2);
            current_statement__ = 48;
            validate_non_negative_index("poly2", "n2", n2);
            Eigen::Matrix<local_scalar_t__, -1, -1> poly2;
            poly2 = Eigen::Matrix<local_scalar_t__, -1, -1>(n2, n2);
            stan::math::fill(poly2, DUMMY_VAR__);
            
            current_statement__ = 67;
            if (logical_eq(nu_matern, 1)) {
              current_statement__ = 62;
              assign(poly1, nil_index_list(), rep_matrix(1, n1, n1),
                "assigning variable poly1");
              current_statement__ = 63;
              assign(poly2, nil_index_list(), rep_matrix(1, n2, n2),
                "assigning variable poly2");
              current_statement__ = 64;
              assign(cov1, nil_index_list(),
                add(
                  multiply(sigma_f,
                    elt_multiply(poly1,
                      stan::math::exp(elt_divide(minus(x1dist), ell)))),
                  diag_matrix(rep_vector(1e-10, n1))),
                "assigning variable cov1");
              current_statement__ = 65;
              assign(cov2, nil_index_list(),
                add(
                  elt_multiply(poly2,
                    stan::math::exp(elt_divide(minus(x2dist), ell))),
                  diag_matrix(rep_vector(1e-10, n2))),
                "assigning variable cov2");
            } else {
              current_statement__ = 61;
              if (logical_eq(nu_matern, 2)) {
                current_statement__ = 56;
                assign(poly1, nil_index_list(),
                  add(1,
                    multiply(stan::math::sqrt(3), elt_divide(x1dist, ell))),
                  "assigning variable poly1");
                current_statement__ = 57;
                assign(poly2, nil_index_list(),
                  add(1,
                    multiply(stan::math::sqrt(3), elt_divide(x2dist, ell))),
                  "assigning variable poly2");
                current_statement__ = 58;
                assign(cov1, nil_index_list(),
                  add(
                    multiply(sigma_f,
                      elt_multiply(poly1,
                        stan::math::exp(
                          elt_divide(multiply(-stan::math::sqrt(3), x1dist),
                            ell)))), diag_matrix(rep_vector(1e-10, n1))),
                  "assigning variable cov1");
                current_statement__ = 59;
                assign(cov2, nil_index_list(),
                  add(
                    elt_multiply(poly2,
                      stan::math::exp(
                        elt_divide(multiply(-stan::math::sqrt(3), x2dist),
                          ell))), diag_matrix(rep_vector(1e-10, n2))),
                  "assigning variable cov2");
              } else {
                current_statement__ = 55;
                if (logical_eq(nu_matern, 3)) {
                  current_statement__ = 50;
                  assign(poly1, nil_index_list(),
                    add(
                      add(1,
                        multiply(stan::math::sqrt(5),
                          elt_divide(x1dist, ell))),
                      multiply((5. / 3.),
                        elt_divide(x1dist_squared, pow(ell, 2)))),
                    "assigning variable poly1");
                  current_statement__ = 51;
                  assign(poly2, nil_index_list(),
                    add(
                      add(1,
                        multiply(stan::math::sqrt(5),
                          elt_divide(x2dist, ell))),
                      multiply((5. / 3.),
                        elt_divide(x2dist_squared, pow(ell, 2)))),
                    "assigning variable poly2");
                  current_statement__ = 52;
                  assign(cov1, nil_index_list(),
                    add(
                      multiply(sigma_f,
                        elt_multiply(poly1,
                          stan::math::exp(
                            elt_divide(
                              multiply(-stan::math::sqrt(5), x1dist), ell)))),
                      diag_matrix(rep_vector(1e-10, n1))),
                    "assigning variable cov1");
                  current_statement__ = 53;
                  assign(cov2, nil_index_list(),
                    add(
                      elt_multiply(poly2,
                        stan::math::exp(
                          elt_divide(multiply(-stan::math::sqrt(5), x2dist),
                            ell))), diag_matrix(rep_vector(1e-10, n2))),
                    "assigning variable cov2");
                } 
              }
            }
          } else {
            current_statement__ = 43;
            if (logical_eq(kernel, 3)) {
              current_statement__ = 40;
              assign(cov1, nil_index_list(),
                add(
                  multiply(sigma_f,
                    stan::math::exp(
                      multiply(-alpha[(1 - 1)],
                        stan::math::log(
                          add(1,
                            elt_divide(x1dist_squared,
                              ((2 * alpha[(1 - 1)]) * pow(ell, 2)))))))),
                  diag_matrix(rep_vector(1e-10, n1))),
                "assigning variable cov1");
              current_statement__ = 41;
              assign(cov2, nil_index_list(),
                add(
                  stan::math::exp(
                    multiply(-alpha[(1 - 1)],
                      stan::math::log(
                        add(1,
                          elt_divide(x2dist_squared,
                            ((2 * alpha[(1 - 1)]) * pow(ell, 2))))))),
                  diag_matrix(rep_vector(1e-10, n2))),
                "assigning variable cov2");
            } 
          }
        }
        current_statement__ = 74;
        assign(L_cov1, nil_index_list(), cholesky_decompose(cov1),
          "assigning variable L_cov1");
        current_statement__ = 75;
        assign(L_cov2, nil_index_list(), cholesky_decompose(cov2),
          "assigning variable L_cov2");
        current_statement__ = 76;
        assign(GP, nil_index_list(),
          kron_mvprod(L_cov1, L_cov2, z, pstream__), "assigning variable GP");
        current_statement__ = 83;
        if (est_la) {
          current_statement__ = 80;
          la_1_param = la_1[(1 - 1)];
          current_statement__ = 81;
          la_2_param = la_2[(1 - 1)];
        } else {
          current_statement__ = 77;
          la_1_param = 0;
          current_statement__ = 78;
          la_2_param = 0;
        }
        current_statement__ = 92;
        for (int j = 1; j <= n1; ++j) {
          current_statement__ = 84;
          assign(p01, cons_list(index_uni(j), nil_index_list()),
            (la_1_param +
              ((1 - la_1_param) /
                (1 + pow(10, (slope_1 * (x1[(j - 1)] - log10_ec50_1)))))),
            "assigning variable p01");
          current_statement__ = 90;
          for (int i = 1; i <= n2; ++i) {
            current_statement__ = 85;
            assign(p02, cons_list(index_uni(i), nil_index_list()),
              (la_2_param +
                ((1 - la_2_param) /
                  (1 + pow(10, (slope_2 * (x2[(i - 1)] - log10_ec50_2)))))),
              "assigning variable p02");
            current_statement__ = 86;
            assign(p0,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              (p01[(j - 1)] * p02[(i - 1)]), "assigning variable p0");
            current_statement__ = 87;
            assign(B,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              rvalue(GP,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "GP"),
              "assigning variable B");
            current_statement__ = 88;
            assign(Delta,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((-rvalue(p0,
                   cons_list(index_uni(i),
                     cons_list(index_uni(j), nil_index_list())), "p0") /
                 (1 +
                   stan::math::exp(
                     ((b1 *
                        rvalue(B,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())), "B"))
                       +
                       stan::math::log(
                         (rvalue(p0,
                            cons_list(index_uni(i),
                              cons_list(index_uni(j), nil_index_list())),
                            "p0") /
                           (1 -
                             rvalue(p0,
                               cons_list(index_uni(i),
                                 cons_list(index_uni(j), nil_index_list())),
                               "p0")))))))) +
                ((1 -
                   rvalue(p0,
                     cons_list(index_uni(i),
                       cons_list(index_uni(j), nil_index_list())), "p0")) /
                  (1 +
                    stan::math::exp(
                      ((-b2 *
                         rvalue(B,
                           cons_list(index_uni(i),
                             cons_list(index_uni(j), nil_index_list())), "B"))
                        -
                        stan::math::log(
                          (rvalue(p0,
                             cons_list(index_uni(i),
                               cons_list(index_uni(j), nil_index_list())),
                             "p0") /
                            (1 -
                              rvalue(p0,
                                cons_list(index_uni(i),
                                  cons_list(index_uni(j), nil_index_list())),
                                "p0"))))))))), "assigning variable Delta");}}
      }
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 18;
          current_statement__ = 18;
          check_greater_or_equal(function__, "p0[sym1__, sym2__]",
                                 rvalue(p0,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "p0"), 0);}}
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 18;
          current_statement__ = 18;
          check_less_or_equal(function__, "p0[sym1__, sym2__]",
                              rvalue(p0,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "p0"), 1);}}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)],
                               0);}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_less_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)], 1);
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_greater_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)],
                               0);}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_less_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)], 1);
      }
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 21;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 21;
          current_statement__ = 21;
          check_greater_or_equal(function__, "Delta[sym1__, sym2__]",
                                 rvalue(Delta,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "Delta"), 
                                 -1);}}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 21;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 21;
          current_statement__ = 21;
          check_less_or_equal(function__, "Delta[sym1__, sym2__]",
                              rvalue(Delta,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "Delta"), 1);}}
      {
        current_statement__ = 159;
        validate_non_negative_index("f", "n2 + 1", (n2 + 1));
        current_statement__ = 160;
        validate_non_negative_index("f", "n1 + 1", (n1 + 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> f;
        f = Eigen::Matrix<local_scalar_t__, -1, -1>((n2 + 1), (n1 + 1));
        stan::math::fill(f, DUMMY_VAR__);
        
        current_statement__ = 162;
        validate_non_negative_index("fobs", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> fobs;
        fobs = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(fobs, DUMMY_VAR__);
        
        current_statement__ = 164;
        validate_non_negative_index("noise", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> noise;
        noise = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(noise, DUMMY_VAR__);
        
        current_statement__ = 166;
        assign(f,
          cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
          1, "assigning variable f");
        current_statement__ = 167;
        assign(f,
          cons_list(index_uni(1),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())), p01,
          "assigning variable f");
        current_statement__ = 168;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_uni(1), nil_index_list())), p02,
          "assigning variable f");
        current_statement__ = 169;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())),
          add(p0, Delta), "assigning variable f");
        current_statement__ = 170;
        lp_accum__.add((cauchy_lpdf<false>(s, 0, 1) - cauchy_lccdf(0, 0, 1)));
        current_statement__ = 171;
        lp_accum__.add(inv_gamma_lpdf<false>(s2_log10_ec50_1, 3, 2));
        current_statement__ = 172;
        lp_accum__.add(inv_gamma_lpdf<false>(s2_log10_ec50_2, 3, 2));
        current_statement__ = 173;
        lp_accum__.add(beta_lpdf<false>(la_1, 1, 1.25));
        current_statement__ = 174;
        lp_accum__.add(beta_lpdf<false>(la_2, 1, 1.25));
        current_statement__ = 175;
        lp_accum__.add(gamma_lpdf<false>(slope_1, 1, 1));
        current_statement__ = 176;
        lp_accum__.add(gamma_lpdf<false>(slope_2, 1, 1));
        current_statement__ = 177;
        lp_accum__.add(std_normal_lpdf<false>(theta_1));
        current_statement__ = 178;
        lp_accum__.add(std_normal_lpdf<false>(theta_2));
        current_statement__ = 179;
        lp_accum__.add(
          normal_lpdf<false>(log10_ec50_1, theta_1,
            stan::math::sqrt(s2_log10_ec50_1)));
        current_statement__ = 180;
        lp_accum__.add(
          normal_lpdf<false>(log10_ec50_2, theta_2,
            stan::math::sqrt(s2_log10_ec50_2)));
        current_statement__ = 181;
        lp_accum__.add(normal_lpdf<false>(b1, 1, 0.1));
        current_statement__ = 182;
        lp_accum__.add(normal_lpdf<false>(b2, 1, 0.1));
        current_statement__ = 188;
        if (pcprior) {
          current_statement__ = 186;
          lp_accum__.add(pc_prior(ell, sigma_f, lambda1, lambda2, pstream__));
        } else {
          current_statement__ = 183;
          lp_accum__.add(inv_gamma_lpdf<false>(ell, 5, 5));
          current_statement__ = 184;
          lp_accum__.add(lognormal_lpdf<false>(sigma_f, 1, 1));
        }
        current_statement__ = 191;
        if (est_alpha) {
          current_statement__ = 189;
          lp_accum__.add(gamma_lpdf<false>(alpha, 1, 1));
        } 
        current_statement__ = 192;
        lp_accum__.add(std_normal_lpdf<false>(to_vector(z)));
        current_statement__ = 193;
        assign(fobs, nil_index_list(),
          rvalue(to_vector(f),
            cons_list(index_multi(ii_obs), nil_index_list()), "to_vector(f)"),
          "assigning variable fobs");
        current_statement__ = 194;
        assign(noise, nil_index_list(),
          multiply(s, stan::math::sqrt(add(fobs, lambda))),
          "assigning variable noise");
        current_statement__ = 211;
        if (heteroscedastic) {
          current_statement__ = 209;
          if (robust) {
            current_statement__ = 207;
            for (int n = 1; n <= N; ++n) {
              current_statement__ = 205;
              lp_accum__.add(
                (lptn(rho, ((y[(n - 1)] - fobs[(n - 1)]) / noise[(n - 1)]),
                   lambdaLPTN, tauLPTN, pstream__) -
                  stan::math::log(noise[(n - 1)])));}
          } else {
            current_statement__ = 203;
            lp_accum__.add(normal_lpdf<false>(y, fobs, noise));
          }
        } else {
          current_statement__ = 201;
          if (robust) {
            current_statement__ = 199;
            for (int n = 1; n <= N; ++n) {
              current_statement__ = 197;
              lp_accum__.add(
                (lptn(rho, ((y[(n - 1)] - fobs[(n - 1)]) / s), lambdaLPTN,
                   tauLPTN, pstream__) - stan::math::log(s)));}
          } else {
            current_statement__ = 195;
            lp_accum__.add(normal_lpdf<false>(y, fobs, s));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_gp_grid_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> la_1;
      la_1 = std::vector<double>(la_1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_1");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(la_1[(sym1__ - 1)], 0, 1),
          "assigning variable la_1");}
      std::vector<double> la_2;
      la_2 = std::vector<double>(la_2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable la_2");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(la_2[(sym1__ - 1)], 0, 1),
          "assigning variable la_2");}
      double log10_ec50_1;
      log10_ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      log10_ec50_1 = in__.scalar();
      double log10_ec50_2;
      log10_ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      log10_ec50_2 = in__.scalar();
      double theta_1;
      theta_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      theta_1 = in__.scalar();
      double theta_2;
      theta_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      theta_2 = in__.scalar();
      double slope_1;
      slope_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      slope_1 = in__.scalar();
      current_statement__ = 7;
      slope_1 = stan::math::lb_constrain(slope_1, 0);
      double slope_2;
      slope_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      slope_2 = in__.scalar();
      current_statement__ = 8;
      slope_2 = stan::math::lb_constrain(slope_2, 0);
      double b1;
      b1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      b1 = in__.scalar();
      current_statement__ = 9;
      b1 = stan::math::lb_constrain(b1, 0);
      double b2;
      b2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      b2 = in__.scalar();
      current_statement__ = 10;
      b2 = stan::math::lb_constrain(b2, 0);
      double ell;
      ell = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      ell = in__.scalar();
      current_statement__ = 11;
      ell = stan::math::lb_constrain(ell, 0);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_f = in__.scalar();
      current_statement__ = 12;
      sigma_f = stan::math::lb_constrain(sigma_f, 0);
      std::vector<double> alpha;
      alpha = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 13;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable alpha");}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 13;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      Eigen::Matrix<double, -1, -1> z;
      z = Eigen::Matrix<double, -1, -1>(n2, n1);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 14;
      z = in__.matrix(n2, n1);
      double s;
      s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      s = in__.scalar();
      current_statement__ = 15;
      s = stan::math::lb_constrain(s, 0);
      double s2_log10_ec50_1;
      s2_log10_ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      s2_log10_ec50_1 = in__.scalar();
      current_statement__ = 16;
      s2_log10_ec50_1 = stan::math::lb_constrain(s2_log10_ec50_1, 0);
      double s2_log10_ec50_2;
      s2_log10_ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      s2_log10_ec50_2 = in__.scalar();
      current_statement__ = 17;
      s2_log10_ec50_2 = stan::math::lb_constrain(s2_log10_ec50_2, 0);
      Eigen::Matrix<double, -1, -1> p0;
      p0 = Eigen::Matrix<double, -1, -1>(n2, n1);
      stan::math::fill(p0, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, 1, -1> p01;
      p01 = Eigen::Matrix<double, 1, -1>(n1);
      stan::math::fill(p01, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> p02;
      p02 = Eigen::Matrix<double, -1, 1>(n2);
      stan::math::fill(p02, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> Delta;
      Delta = Eigen::Matrix<double, -1, -1>(n2, n1);
      stan::math::fill(Delta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, -1> GP;
      GP = Eigen::Matrix<double, -1, -1>(n2, n1);
      stan::math::fill(GP, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        vars__.emplace_back(la_1[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        vars__.emplace_back(la_2[(sym1__ - 1)]);}
      vars__.emplace_back(log10_ec50_1);
      vars__.emplace_back(log10_ec50_2);
      vars__.emplace_back(theta_1);
      vars__.emplace_back(theta_2);
      vars__.emplace_back(slope_1);
      vars__.emplace_back(slope_2);
      vars__.emplace_back(b1);
      vars__.emplace_back(b2);
      vars__.emplace_back(ell);
      vars__.emplace_back(sigma_f);
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
          vars__.emplace_back(
            rvalue(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "z"));}}
      vars__.emplace_back(s);
      vars__.emplace_back(s2_log10_ec50_1);
      vars__.emplace_back(s2_log10_ec50_2);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      {
        double la_1_param;
        la_1_param = std::numeric_limits<double>::quiet_NaN();
        
        double la_2_param;
        la_2_param = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 25;
        validate_non_negative_index("B", "n2", n2);
        current_statement__ = 26;
        validate_non_negative_index("B", "n1", n1);
        Eigen::Matrix<double, -1, -1> B;
        B = Eigen::Matrix<double, -1, -1>(n2, n1);
        stan::math::fill(B, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 28;
        validate_non_negative_index("cov1", "n1", n1);
        current_statement__ = 29;
        validate_non_negative_index("cov1", "n1", n1);
        Eigen::Matrix<double, -1, -1> cov1;
        cov1 = Eigen::Matrix<double, -1, -1>(n1, n1);
        stan::math::fill(cov1, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 31;
        validate_non_negative_index("cov2", "n2", n2);
        current_statement__ = 32;
        validate_non_negative_index("cov2", "n2", n2);
        Eigen::Matrix<double, -1, -1> cov2;
        cov2 = Eigen::Matrix<double, -1, -1>(n2, n2);
        stan::math::fill(cov2, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 34;
        validate_non_negative_index("L_cov1", "n1", n1);
        current_statement__ = 35;
        validate_non_negative_index("L_cov1", "n1", n1);
        Eigen::Matrix<double, -1, -1> L_cov1;
        L_cov1 = Eigen::Matrix<double, -1, -1>(n1, n1);
        stan::math::fill(L_cov1, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 37;
        validate_non_negative_index("L_cov2", "n2", n2);
        current_statement__ = 38;
        validate_non_negative_index("L_cov2", "n2", n2);
        Eigen::Matrix<double, -1, -1> L_cov2;
        L_cov2 = Eigen::Matrix<double, -1, -1>(n2, n2);
        stan::math::fill(L_cov2, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 73;
        if (logical_eq(kernel, 1)) {
          current_statement__ = 70;
          assign(cov1, nil_index_list(),
            add(
              multiply(sigma_f,
                stan::math::exp(
                  elt_divide(minus(x1dist_squared), (2 * pow(ell, 2))))),
              diag_matrix(rep_vector(1e-10, n1))), "assigning variable cov1");
          current_statement__ = 71;
          assign(cov2, nil_index_list(),
            add(
              stan::math::exp(
                elt_divide(minus(x2dist_squared), (2 * pow(ell, 2)))),
              diag_matrix(rep_vector(1e-10, n2))), "assigning variable cov2");
        } else {
          current_statement__ = 69;
          if (logical_eq(kernel, 2)) {
            current_statement__ = 44;
            validate_non_negative_index("poly1", "n1", n1);
            current_statement__ = 45;
            validate_non_negative_index("poly1", "n1", n1);
            Eigen::Matrix<double, -1, -1> poly1;
            poly1 = Eigen::Matrix<double, -1, -1>(n1, n1);
            stan::math::fill(poly1, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 47;
            validate_non_negative_index("poly2", "n2", n2);
            current_statement__ = 48;
            validate_non_negative_index("poly2", "n2", n2);
            Eigen::Matrix<double, -1, -1> poly2;
            poly2 = Eigen::Matrix<double, -1, -1>(n2, n2);
            stan::math::fill(poly2, std::numeric_limits<double>::quiet_NaN());
            
            current_statement__ = 67;
            if (logical_eq(nu_matern, 1)) {
              current_statement__ = 62;
              assign(poly1, nil_index_list(), rep_matrix(1, n1, n1),
                "assigning variable poly1");
              current_statement__ = 63;
              assign(poly2, nil_index_list(), rep_matrix(1, n2, n2),
                "assigning variable poly2");
              current_statement__ = 64;
              assign(cov1, nil_index_list(),
                add(
                  multiply(sigma_f,
                    elt_multiply(poly1,
                      stan::math::exp(elt_divide(minus(x1dist), ell)))),
                  diag_matrix(rep_vector(1e-10, n1))),
                "assigning variable cov1");
              current_statement__ = 65;
              assign(cov2, nil_index_list(),
                add(
                  elt_multiply(poly2,
                    stan::math::exp(elt_divide(minus(x2dist), ell))),
                  diag_matrix(rep_vector(1e-10, n2))),
                "assigning variable cov2");
            } else {
              current_statement__ = 61;
              if (logical_eq(nu_matern, 2)) {
                current_statement__ = 56;
                assign(poly1, nil_index_list(),
                  add(1,
                    multiply(stan::math::sqrt(3), elt_divide(x1dist, ell))),
                  "assigning variable poly1");
                current_statement__ = 57;
                assign(poly2, nil_index_list(),
                  add(1,
                    multiply(stan::math::sqrt(3), elt_divide(x2dist, ell))),
                  "assigning variable poly2");
                current_statement__ = 58;
                assign(cov1, nil_index_list(),
                  add(
                    multiply(sigma_f,
                      elt_multiply(poly1,
                        stan::math::exp(
                          elt_divide(multiply(-stan::math::sqrt(3), x1dist),
                            ell)))), diag_matrix(rep_vector(1e-10, n1))),
                  "assigning variable cov1");
                current_statement__ = 59;
                assign(cov2, nil_index_list(),
                  add(
                    elt_multiply(poly2,
                      stan::math::exp(
                        elt_divide(multiply(-stan::math::sqrt(3), x2dist),
                          ell))), diag_matrix(rep_vector(1e-10, n2))),
                  "assigning variable cov2");
              } else {
                current_statement__ = 55;
                if (logical_eq(nu_matern, 3)) {
                  current_statement__ = 50;
                  assign(poly1, nil_index_list(),
                    add(
                      add(1,
                        multiply(stan::math::sqrt(5),
                          elt_divide(x1dist, ell))),
                      multiply((5. / 3.),
                        elt_divide(x1dist_squared, pow(ell, 2)))),
                    "assigning variable poly1");
                  current_statement__ = 51;
                  assign(poly2, nil_index_list(),
                    add(
                      add(1,
                        multiply(stan::math::sqrt(5),
                          elt_divide(x2dist, ell))),
                      multiply((5. / 3.),
                        elt_divide(x2dist_squared, pow(ell, 2)))),
                    "assigning variable poly2");
                  current_statement__ = 52;
                  assign(cov1, nil_index_list(),
                    add(
                      multiply(sigma_f,
                        elt_multiply(poly1,
                          stan::math::exp(
                            elt_divide(
                              multiply(-stan::math::sqrt(5), x1dist), ell)))),
                      diag_matrix(rep_vector(1e-10, n1))),
                    "assigning variable cov1");
                  current_statement__ = 53;
                  assign(cov2, nil_index_list(),
                    add(
                      elt_multiply(poly2,
                        stan::math::exp(
                          elt_divide(multiply(-stan::math::sqrt(5), x2dist),
                            ell))), diag_matrix(rep_vector(1e-10, n2))),
                    "assigning variable cov2");
                } 
              }
            }
          } else {
            current_statement__ = 43;
            if (logical_eq(kernel, 3)) {
              current_statement__ = 40;
              assign(cov1, nil_index_list(),
                add(
                  multiply(sigma_f,
                    stan::math::exp(
                      multiply(-alpha[(1 - 1)],
                        stan::math::log(
                          add(1,
                            elt_divide(x1dist_squared,
                              ((2 * alpha[(1 - 1)]) * pow(ell, 2)))))))),
                  diag_matrix(rep_vector(1e-10, n1))),
                "assigning variable cov1");
              current_statement__ = 41;
              assign(cov2, nil_index_list(),
                add(
                  stan::math::exp(
                    multiply(-alpha[(1 - 1)],
                      stan::math::log(
                        add(1,
                          elt_divide(x2dist_squared,
                            ((2 * alpha[(1 - 1)]) * pow(ell, 2))))))),
                  diag_matrix(rep_vector(1e-10, n2))),
                "assigning variable cov2");
            } 
          }
        }
        current_statement__ = 74;
        assign(L_cov1, nil_index_list(), cholesky_decompose(cov1),
          "assigning variable L_cov1");
        current_statement__ = 75;
        assign(L_cov2, nil_index_list(), cholesky_decompose(cov2),
          "assigning variable L_cov2");
        current_statement__ = 76;
        assign(GP, nil_index_list(),
          kron_mvprod(L_cov1, L_cov2, z, pstream__), "assigning variable GP");
        current_statement__ = 83;
        if (est_la) {
          current_statement__ = 80;
          la_1_param = la_1[(1 - 1)];
          current_statement__ = 81;
          la_2_param = la_2[(1 - 1)];
        } else {
          current_statement__ = 77;
          la_1_param = 0;
          current_statement__ = 78;
          la_2_param = 0;
        }
        current_statement__ = 92;
        for (int j = 1; j <= n1; ++j) {
          current_statement__ = 84;
          assign(p01, cons_list(index_uni(j), nil_index_list()),
            (la_1_param +
              ((1 - la_1_param) /
                (1 + pow(10, (slope_1 * (x1[(j - 1)] - log10_ec50_1)))))),
            "assigning variable p01");
          current_statement__ = 90;
          for (int i = 1; i <= n2; ++i) {
            current_statement__ = 85;
            assign(p02, cons_list(index_uni(i), nil_index_list()),
              (la_2_param +
                ((1 - la_2_param) /
                  (1 + pow(10, (slope_2 * (x2[(i - 1)] - log10_ec50_2)))))),
              "assigning variable p02");
            current_statement__ = 86;
            assign(p0,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              (p01[(j - 1)] * p02[(i - 1)]), "assigning variable p0");
            current_statement__ = 87;
            assign(B,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              rvalue(GP,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())), "GP"),
              "assigning variable B");
            current_statement__ = 88;
            assign(Delta,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((-rvalue(p0,
                   cons_list(index_uni(i),
                     cons_list(index_uni(j), nil_index_list())), "p0") /
                 (1 +
                   stan::math::exp(
                     ((b1 *
                        rvalue(B,
                          cons_list(index_uni(i),
                            cons_list(index_uni(j), nil_index_list())), "B"))
                       +
                       stan::math::log(
                         (rvalue(p0,
                            cons_list(index_uni(i),
                              cons_list(index_uni(j), nil_index_list())),
                            "p0") /
                           (1 -
                             rvalue(p0,
                               cons_list(index_uni(i),
                                 cons_list(index_uni(j), nil_index_list())),
                               "p0")))))))) +
                ((1 -
                   rvalue(p0,
                     cons_list(index_uni(i),
                       cons_list(index_uni(j), nil_index_list())), "p0")) /
                  (1 +
                    stan::math::exp(
                      ((-b2 *
                         rvalue(B,
                           cons_list(index_uni(i),
                             cons_list(index_uni(j), nil_index_list())), "B"))
                        -
                        stan::math::log(
                          (rvalue(p0,
                             cons_list(index_uni(i),
                               cons_list(index_uni(j), nil_index_list())),
                             "p0") /
                            (1 -
                              rvalue(p0,
                                cons_list(index_uni(i),
                                  cons_list(index_uni(j), nil_index_list())),
                                "p0"))))))))), "assigning variable Delta");}}
      }
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 18;
          current_statement__ = 18;
          check_greater_or_equal(function__, "p0[sym1__, sym2__]",
                                 rvalue(p0,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "p0"), 0);}}
      current_statement__ = 18;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 18;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 18;
          current_statement__ = 18;
          check_less_or_equal(function__, "p0[sym1__, sym2__]",
                              rvalue(p0,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "p0"), 1);}}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_greater_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)],
                               0);}
      current_statement__ = 19;
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        current_statement__ = 19;
        current_statement__ = 19;
        check_less_or_equal(function__, "p01[sym1__]", p01[(sym1__ - 1)], 1);
      }
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_greater_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)],
                               0);}
      current_statement__ = 20;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 20;
        current_statement__ = 20;
        check_less_or_equal(function__, "p02[sym1__]", p02[(sym1__ - 1)], 1);
      }
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 21;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 21;
          current_statement__ = 21;
          check_greater_or_equal(function__, "Delta[sym1__, sym2__]",
                                 rvalue(Delta,
                                   cons_list(index_uni(sym1__),
                                     cons_list(index_uni(sym2__),
                                       nil_index_list())), "Delta"), 
                                 -1);}}
      current_statement__ = 21;
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        current_statement__ = 21;
        for (int sym2__ = 1; sym2__ <= n1; ++sym2__) {
          current_statement__ = 21;
          current_statement__ = 21;
          check_less_or_equal(function__, "Delta[sym1__, sym2__]",
                              rvalue(Delta,
                                cons_list(index_uni(sym1__),
                                  cons_list(index_uni(sym2__),
                                    nil_index_list())), "Delta"), 1);}}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            vars__.emplace_back(
              rvalue(p0,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "p0"));}}
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          vars__.emplace_back(p01[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
          vars__.emplace_back(p02[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            vars__.emplace_back(
              rvalue(Delta,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "Delta"));
          }}
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            vars__.emplace_back(
              rvalue(GP,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "GP"));}}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      double ec50_1;
      ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      double ec50_2;
      ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> CPO;
      CPO = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(CPO, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 96;
      assign(CPO, nil_index_list(), rep_vector(0, N),
        "assigning variable CPO");
      double dss_1;
      dss_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 97;
      dss_1 = 0;
      double dss_2;
      dss_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 98;
      dss_2 = 0;
      double rVUS_f;
      rVUS_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 99;
      rVUS_f = 0;
      double rVUS_p0;
      rVUS_p0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 100;
      rVUS_p0 = 0;
      double VUS_Delta;
      VUS_Delta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 101;
      VUS_Delta = 0;
      double VUS_syn;
      VUS_syn = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 102;
      VUS_syn = 0;
      double VUS_ant;
      VUS_ant = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 103;
      VUS_ant = 0;
      {
        current_statement__ = 104;
        validate_non_negative_index("f", "n2 + 1", (n2 + 1));
        current_statement__ = 105;
        validate_non_negative_index("f", "n1 + 1", (n1 + 1));
        Eigen::Matrix<double, -1, -1> f;
        f = Eigen::Matrix<double, -1, -1>((n2 + 1), (n1 + 1));
        stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 107;
        validate_non_negative_index("fc_interior", "n2", n2);
        current_statement__ = 108;
        validate_non_negative_index("fc_interior", "n1", n1);
        Eigen::Matrix<double, -1, -1> fc_interior;
        fc_interior = Eigen::Matrix<double, -1, -1>(n2, n1);
        stan::math::fill(fc_interior, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 110;
        validate_non_negative_index("fobs", "N", N);
        Eigen::Matrix<double, -1, 1> fobs;
        fobs = Eigen::Matrix<double, -1, 1>(N);
        stan::math::fill(fobs, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 112;
        validate_non_negative_index("noise", "N", N);
        Eigen::Matrix<double, -1, 1> noise;
        noise = Eigen::Matrix<double, -1, 1>(N);
        stan::math::fill(noise, std::numeric_limits<double>::quiet_NaN());
        
        double la_1_param;
        la_1_param = std::numeric_limits<double>::quiet_NaN();
        
        double la_2_param;
        la_2_param = std::numeric_limits<double>::quiet_NaN();
        
        current_statement__ = 116;
        assign(f,
          cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
          1, "assigning variable f");
        current_statement__ = 117;
        assign(f,
          cons_list(index_uni(1),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())), p01,
          "assigning variable f");
        current_statement__ = 118;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_uni(1), nil_index_list())), p02,
          "assigning variable f");
        current_statement__ = 119;
        assign(f,
          cons_list(index_min_max(2, (n2 + 1)),
            cons_list(index_min_max(2, (n1 + 1)), nil_index_list())),
          add(p0, Delta), "assigning variable f");
        current_statement__ = 120;
        assign(fc_interior,
          cons_list(index_min_max(1, n2),
            cons_list(index_min_max(1, n1), nil_index_list())),
          subtract(1, add(p0, Delta)), "assigning variable fc_interior");
        current_statement__ = 121;
        assign(fobs, nil_index_list(),
          rvalue(to_vector(f),
            cons_list(index_multi(ii_obs), nil_index_list()), "to_vector(f)"),
          "assigning variable fobs");
        current_statement__ = 122;
        assign(noise, nil_index_list(),
          multiply(s, stan::math::sqrt(add(fobs, lambda))),
          "assigning variable noise");
        current_statement__ = 129;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 127;
          if (heteroscedastic) {
            current_statement__ = 125;
            assign(CPO, cons_list(index_uni(i), nil_index_list()),
              stan::math::exp(
                -normal_lpdf<false>(y[(i - 1)], fobs[(i - 1)],
                   noise[(i - 1)])), "assigning variable CPO");
          } else {
            current_statement__ = 123;
            assign(CPO, cons_list(index_uni(i), nil_index_list()),
              stan::math::exp(
                -normal_lpdf<false>(y[(i - 1)], fobs[(i - 1)], s)),
              "assigning variable CPO");
          }}
        current_statement__ = 130;
        ec50_1 = pow(10, log10_ec50_1);
        current_statement__ = 131;
        ec50_2 = pow(10, log10_ec50_2);
        current_statement__ = 138;
        if (est_la) {
          current_statement__ = 135;
          la_1_param = la_1[(1 - 1)];
          current_statement__ = 136;
          la_2_param = la_2[(1 - 1)];
        } else {
          current_statement__ = 132;
          la_1_param = 0;
          current_statement__ = 133;
          la_2_param = 0;
        }
        current_statement__ = 139;
        dss_1 = dss(c11, c12, la_1_param, slope_1, log10_ec50_1, pstream__);
        current_statement__ = 140;
        dss_2 = dss(c21, c22, la_2_param, slope_2, log10_ec50_2, pstream__);
        current_statement__ = 141;
        rVUS_f = VUS(fc_interior, x1, x2, pstream__);
        current_statement__ = 142;
        rVUS_p0 = VUS(subtract(1, p0), x1, x2, pstream__);
        current_statement__ = 143;
        VUS_Delta = VUS(Delta, x1, x2, pstream__);
        current_statement__ = 144;
        VUS_syn = VUS(matrix_min(Delta, 0, pstream__), x1, x2, pstream__);
        current_statement__ = 145;
        VUS_ant = VUS(matrix_max(Delta, 0, pstream__), x1, x2, pstream__);
        current_statement__ = 148;
        if (logical_eq(rVUS_f, 0)) {
          current_statement__ = 146;
          rVUS_f = uniform_rng(1e-6, 1e-4, base_rng__);
        } 
        current_statement__ = 151;
        if (logical_eq(rVUS_p0, 0)) {
          current_statement__ = 149;
          rVUS_p0 = uniform_rng(1e-6, 1e-4, base_rng__);
        } 
        current_statement__ = 154;
        if (logical_eq(VUS_syn, 0)) {
          current_statement__ = 152;
          VUS_syn = uniform_rng(1e-6, 1e-4, base_rng__);
        } 
        current_statement__ = 157;
        if (logical_eq(VUS_ant, 0)) {
          current_statement__ = 155;
          VUS_ant = uniform_rng(1e-6, 1e-4, base_rng__);
        } 
      }
      vars__.emplace_back(ec50_1);
      vars__.emplace_back(ec50_2);
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        vars__.emplace_back(CPO[(sym1__ - 1)]);}
      vars__.emplace_back(dss_1);
      vars__.emplace_back(dss_2);
      vars__.emplace_back(rVUS_f);
      vars__.emplace_back(rVUS_p0);
      vars__.emplace_back(VUS_Delta);
      vars__.emplace_back(VUS_syn);
      vars__.emplace_back(VUS_ant);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> la_1;
      la_1 = std::vector<double>(la_1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(la_1, nil_index_list(), context__.vals_r("la_1"),
        "assigning variable la_1");
      std::vector<double> la_1_free__;
      la_1_free__ = std::vector<double>(la_1_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(la_1_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(la_1[(sym1__ - 1)], 0, 1),
          "assigning variable la_1_free__");}
      std::vector<double> la_2;
      la_2 = std::vector<double>(la_2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(la_2, nil_index_list(), context__.vals_r("la_2"),
        "assigning variable la_2");
      std::vector<double> la_2_free__;
      la_2_free__ = std::vector<double>(la_2_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(la_2_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(la_2[(sym1__ - 1)], 0, 1),
          "assigning variable la_2_free__");}
      double log10_ec50_1;
      log10_ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      log10_ec50_1 = context__.vals_r("log10_ec50_1")[(1 - 1)];
      double log10_ec50_2;
      log10_ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      log10_ec50_2 = context__.vals_r("log10_ec50_2")[(1 - 1)];
      double theta_1;
      theta_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      theta_1 = context__.vals_r("theta_1")[(1 - 1)];
      double theta_2;
      theta_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      theta_2 = context__.vals_r("theta_2")[(1 - 1)];
      double slope_1;
      slope_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      slope_1 = context__.vals_r("slope_1")[(1 - 1)];
      double slope_1_free__;
      slope_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      slope_1_free__ = stan::math::lb_free(slope_1, 0);
      double slope_2;
      slope_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      slope_2 = context__.vals_r("slope_2")[(1 - 1)];
      double slope_2_free__;
      slope_2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      slope_2_free__ = stan::math::lb_free(slope_2, 0);
      double b1;
      b1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      b1 = context__.vals_r("b1")[(1 - 1)];
      double b1_free__;
      b1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      b1_free__ = stan::math::lb_free(b1, 0);
      double b2;
      b2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      b2 = context__.vals_r("b2")[(1 - 1)];
      double b2_free__;
      b2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      b2_free__ = stan::math::lb_free(b2, 0);
      double ell;
      ell = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      ell = context__.vals_r("ell")[(1 - 1)];
      double ell_free__;
      ell_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      ell_free__ = stan::math::lb_free(ell, 0);
      double sigma_f;
      sigma_f = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_f = context__.vals_r("sigma_f")[(1 - 1)];
      double sigma_f_free__;
      sigma_f_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_f_free__ = stan::math::lb_free(sigma_f, 0);
      std::vector<double> alpha;
      alpha = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      assign(alpha, nil_index_list(), context__.vals_r("alpha"),
        "assigning variable alpha");
      std::vector<double> alpha_free__;
      alpha_free__ = std::vector<double>(alpha_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 13;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      Eigen::Matrix<double, -1, -1> z;
      z = Eigen::Matrix<double, -1, -1>(n2, n1);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 14;
        assign(z_flat__, nil_index_list(), context__.vals_r("z"),
          "assigning variable z_flat__");
        current_statement__ = 14;
        pos__ = 1;
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
          current_statement__ = 14;
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            current_statement__ = 14;
            assign(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              z_flat__[(pos__ - 1)], "assigning variable z");
            current_statement__ = 14;
            pos__ = (pos__ + 1);}}
      }
      double s;
      s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      s = context__.vals_r("s")[(1 - 1)];
      double s_free__;
      s_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 15;
      s_free__ = stan::math::lb_free(s, 0);
      double s2_log10_ec50_1;
      s2_log10_ec50_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      s2_log10_ec50_1 = context__.vals_r("s2_log10_ec50_1")[(1 - 1)];
      double s2_log10_ec50_1_free__;
      s2_log10_ec50_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 16;
      s2_log10_ec50_1_free__ = stan::math::lb_free(s2_log10_ec50_1, 0);
      double s2_log10_ec50_2;
      s2_log10_ec50_2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      s2_log10_ec50_2 = context__.vals_r("s2_log10_ec50_2")[(1 - 1)];
      double s2_log10_ec50_2_free__;
      s2_log10_ec50_2_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 17;
      s2_log10_ec50_2_free__ = stan::math::lb_free(s2_log10_ec50_2, 0);
      for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
        vars__.emplace_back(la_1_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
        vars__.emplace_back(la_2_free__[(sym1__ - 1)]);}
      vars__.emplace_back(log10_ec50_1);
      vars__.emplace_back(log10_ec50_2);
      vars__.emplace_back(theta_1);
      vars__.emplace_back(theta_2);
      vars__.emplace_back(slope_1_free__);
      vars__.emplace_back(slope_2_free__);
      vars__.emplace_back(b1_free__);
      vars__.emplace_back(b2_free__);
      vars__.emplace_back(ell_free__);
      vars__.emplace_back(sigma_f_free__);
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
          vars__.emplace_back(
            rvalue(z,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "z"));}}
      vars__.emplace_back(s_free__);
      vars__.emplace_back(s2_log10_ec50_1_free__);
      vars__.emplace_back(s2_log10_ec50_2_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("la_1");
    names__.emplace_back("la_2");
    names__.emplace_back("log10_ec50_1");
    names__.emplace_back("log10_ec50_2");
    names__.emplace_back("theta_1");
    names__.emplace_back("theta_2");
    names__.emplace_back("slope_1");
    names__.emplace_back("slope_2");
    names__.emplace_back("b1");
    names__.emplace_back("b2");
    names__.emplace_back("ell");
    names__.emplace_back("sigma_f");
    names__.emplace_back("alpha");
    names__.emplace_back("z");
    names__.emplace_back("s");
    names__.emplace_back("s2_log10_ec50_1");
    names__.emplace_back("s2_log10_ec50_2");
    names__.emplace_back("p0");
    names__.emplace_back("p01");
    names__.emplace_back("p02");
    names__.emplace_back("Delta");
    names__.emplace_back("GP");
    names__.emplace_back("ec50_1");
    names__.emplace_back("ec50_2");
    names__.emplace_back("CPO");
    names__.emplace_back("dss_1");
    names__.emplace_back("dss_2");
    names__.emplace_back("rVUS_f");
    names__.emplace_back("rVUS_p0");
    names__.emplace_back("VUS_Delta");
    names__.emplace_back("VUS_syn");
    names__.emplace_back("VUS_ant");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(la_1_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(la_2_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2),
                                             static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2),
                                             static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2),
                                             static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n2),
                                             static_cast<size_t>(n1)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_2" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "log10_ec50_1");
    param_names__.emplace_back(std::string() + "log10_ec50_2");
    param_names__.emplace_back(std::string() + "theta_1");
    param_names__.emplace_back(std::string() + "theta_2");
    param_names__.emplace_back(std::string() + "slope_1");
    param_names__.emplace_back(std::string() + "slope_2");
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "b2");
    param_names__.emplace_back(std::string() + "ell");
    param_names__.emplace_back(std::string() + "sigma_f");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "s");
    param_names__.emplace_back(std::string() + "s2_log10_ec50_1");
    param_names__.emplace_back(std::string() + "s2_log10_ec50_2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p0" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p01" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p02" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Delta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "GP" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "ec50_1");
      param_names__.emplace_back(std::string() + "ec50_2");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CPO" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "dss_1");
      param_names__.emplace_back(std::string() + "dss_2");
      param_names__.emplace_back(std::string() + "rVUS_f");
      param_names__.emplace_back(std::string() + "rVUS_p0");
      param_names__.emplace_back(std::string() + "VUS_Delta");
      param_names__.emplace_back(std::string() + "VUS_syn");
      param_names__.emplace_back(std::string() + "VUS_ant");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= la_1_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_1" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= la_2_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "la_2" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "log10_ec50_1");
    param_names__.emplace_back(std::string() + "log10_ec50_2");
    param_names__.emplace_back(std::string() + "theta_1");
    param_names__.emplace_back(std::string() + "theta_2");
    param_names__.emplace_back(std::string() + "slope_1");
    param_names__.emplace_back(std::string() + "slope_2");
    param_names__.emplace_back(std::string() + "b1");
    param_names__.emplace_back(std::string() + "b2");
    param_names__.emplace_back(std::string() + "ell");
    param_names__.emplace_back(std::string() + "sigma_f");
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "z" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    param_names__.emplace_back(std::string() + "s");
    param_names__.emplace_back(std::string() + "s2_log10_ec50_1");
    param_names__.emplace_back(std::string() + "s2_log10_ec50_2");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p0" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p01" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p02" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "Delta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= n1; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n2; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "GP" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "ec50_1");
      param_names__.emplace_back(std::string() + "ec50_2");
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "CPO" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "dss_1");
      param_names__.emplace_back(std::string() + "dss_2");
      param_names__.emplace_back(std::string() + "rVUS_f");
      param_names__.emplace_back(std::string() + "rVUS_p0");
      param_names__.emplace_back(std::string() + "VUS_Delta");
      param_names__.emplace_back(std::string() + "VUS_syn");
      param_names__.emplace_back(std::string() + "VUS_ant");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"la_1\",\"type\":{\"name\":\"array\",\"length\":" << la_1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"la_2\",\"type\":{\"name\":\"array\",\"length\":" << la_2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log10_ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log10_ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ell\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << alpha_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_log10_ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_log10_ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p01\",\"type\":{\"name\":\"vector\",\"length\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p02\",\"type\":{\"name\":\"vector\",\"length\":" << n2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Delta\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"GP\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"CPO\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"dss_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"dss_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_f\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_p0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"VUS_Delta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"VUS_syn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"VUS_ant\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"la_1\",\"type\":{\"name\":\"array\",\"length\":" << la_1_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"la_2\",\"type\":{\"name\":\"array\",\"length\":" << la_2_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"log10_ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log10_ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"theta_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"slope_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"b2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"ell\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_f\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" << alpha_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"parameters\"},{\"name\":\"s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_log10_ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"s2_log10_ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p0\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p01\",\"type\":{\"name\":\"vector\",\"length\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"p02\",\"type\":{\"name\":\"vector\",\"length\":" << n2 << "},\"block\":\"transformed_parameters\"},{\"name\":\"Delta\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"GP\",\"type\":{\"name\":\"matrix\",\"rows\":" << n2 << ",\"cols\":" << n1 << "},\"block\":\"transformed_parameters\"},{\"name\":\"ec50_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"ec50_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"CPO\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"dss_1\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"dss_2\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_f\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"rVUS_p0\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"VUS_Delta\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"VUS_syn\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"VUS_ant\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_gp_grid_namespace::model_gp_grid;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_gp_grid_namespace::profiles__;
}
#endif
#endif
